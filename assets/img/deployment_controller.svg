<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than diagrams.net -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="4741px" height="2108px" viewBox="-0.5 -0.5 4741 2108" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2022-09-07T08:23:16.608Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/19.0.3 Chrome/102.0.5005.63 Electron/19.0.3 Safari/537.36&quot; etag=&quot;SoefmYUI4ke7kRWJcjny&quot; version=&quot;19.0.3&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;HCxS8oL4tQ2x_tnT8Usb&quot; name=&quot;第 1 页&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs/><g><path d="M 3440 143 L 3863.63 143" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 3868.88 143 L 3861.88 146.5 L 3863.63 143 L 3861.88 139.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 2640 41 L 2640 18 L 3440 18 L 3440 41" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 2640 41 L 2640 268 L 3440 268 L 3440 41" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2640 41 L 3440 41" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="3039.5" y="34">startDeploymentController (cmd/kube-controller-manager/app/apps.go)</text></g><rect x="2640" y="38" width="800" height="230" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 798px; height: 1px; padding-top: 153px; margin-left: 2642px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><b>func startDeploymentController</b>(ctx context.Context, controllerContext ControllerContext) (controller.Interface, bool, error) {<br /><span style="white-space: pre;">	</span><font color="#7f00ff">// create controller, register handlers for deployments, replicasets, pods resource</font><br /><div><span style="">	</span><b><font color="#00994d">dc, err := deployment.NewDeploymentController</font></b>(</div><div><span style="">		</span><b><font color="#00994d">controllerContext.InformerFactory.Apps().V1().Deployments(),</font></b></div><div><span style="">		</span>controllerContext.InformerFactory.Apps().V1().ReplicaSets(),</div><div><span style="">		</span>controllerContext.InformerFactory.Core().V1().Pods(),</div><div><span style="">		</span>controllerContext.ClientBuilder.ClientOrDie("deployment-controller"),</div><div><span style="">	</span>)</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return nil, true, fmt.Errorf("error creating Deployment controller: %v", err)</div><div><span style="">	</span>}</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// run controller</font><br /></div><div><span style="">	</span><b><font color="#00994d">go dc.Run(ctx, int(controllerContext.ComponentConfig.DeploymentController.ConcurrentDeploymentSyncs))</font></b></div><div><span style="">	</span>return nil, true, nil</div><div>}</div></pre></div></div></div></foreignObject><text x="2642" y="157" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">func startDeploymentController(ctx context.Context, controllerContext ControllerContext) (controller.Interface, bool, error) {...</text></switch></g><path d="M 1294 126 L 1294 103 L 2020 103 L 2020 126" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1294 126 L 1294 183 L 2020 183 L 2020 126" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1294 126 L 2020 126" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1656.5" y="119">Deployments (staging/src/k8s.io/client-go/informers/apps/v1/interface.go)</text></g><rect x="1294" y="123" width="726" height="60" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 724px; height: 1px; padding-top: 153px; margin-left: 1296px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// Deployments returns a DeploymentInformer.</font><div><b>func (v *version) Deployments() DeploymentInformer</b> {</div><div><span style="">	</span>return &amp;<b><font color="#00994d">deploymentInformer</font></b>{factory: v.factory, namespace: v.namespace, tweakListOptions: v.tweakListOptions}</div><div>}</div></pre></div></div></div></foreignObject><text x="1296" y="157" fill="#000000" font-family="Helvetica" font-size="12px">// Deployments returns a DeploymentInformer....</text></switch></g><path d="M 1392 231 L 1392 208 L 1922 208 L 1922 231" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1392 231 L 1392 288 L 1922 288 L 1922 231" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1392 231 L 1922 231" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1656.5" y="224">Informer (staging/src/k8s.io/client-go/informers/apps/v1/deployment.go)</text></g><rect x="1392" y="228" width="530" height="60" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 528px; height: 1px; padding-top: 258px; margin-left: 1394px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><b>func (f *deploymentInformer) Informer() cache.SharedIndexInformer</b> {<div><span style="">	</span>return <b><font color="#00994d">f.factory.InformerFor(&amp;appsv1.Deployment{}, f.defaultInformer)</font></b></div><div>}</div></pre></div></div></div></foreignObject><text x="1394" y="262" fill="#000000" font-family="Helvetica" font-size="12px">func (f *deploymentInformer) Informer() cache.SharedIndexInformer {...</text></switch></g><path d="M 1657 398 L 1657 421.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1657 426.88 L 1653.5 419.88 L 1657 421.63 L 1660.5 419.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1137 341 L 1137 318 L 2177 318 L 2177 341" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1137 341 L 1137 398 L 2177 398 L 2177 341" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1137 341 L 2177 341" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1656.5" y="334">defaultInformer (staging/src/k8s.io/client-go/informers/apps/v1/deployment.go)</text></g><rect x="1137" y="338" width="1040" height="60" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1038px; height: 1px; padding-top: 368px; margin-left: 1139px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><b>func (f *deploymentInformer) defaultInformer</b>(client kubernetes.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {<div><span style="">	</span>return <b><font color="#00994d">NewFilteredDeploymentInformer</font></b>(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)</div><div>}</div></pre></div></div></div></foreignObject><text x="1139" y="372" fill="#000000" font-family="Helvetica" font-size="12px">func (f *deploymentInformer) defaultInformer(client kubernetes.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {...</text></switch></g><path d="M 977 451 L 977 428 L 2337 428 L 2337 451" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 977 451 L 977 798 L 2337 798 L 2337 451" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 977 451 L 2337 451" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1656.5" y="444">NewFilteredDeploymentInformer (staging/src/k8s.io/client-go/informers/apps/v1/deployment.go)</text></g><rect x="977" y="448" width="1360" height="350" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1358px; height: 1px; padding-top: 623px; margin-left: 979px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// NewFilteredDeploymentInformer constructs a new informer for Deployment type.</font><div><font color="#7f00ff">// Always prefer using an informer factory to get a shared informer instead of getting an independent</font></div><div><font color="#7f00ff">// one. This reduces memory footprint and number of connections to the server.</font></div><div><b>func NewFilteredDeploymentInformer</b>(client kubernetes.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {</div><div><span style="">	</span>return <b><font color="#00994d">cache.NewSharedIndexInformer</font></b>(</div><div><span style="">		</span>&amp;cache.ListWatch{</div><div><span style="">			</span>ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {</div><div><span style="">				</span>if tweakListOptions != nil {</div><div><span style="">					</span>tweakListOptions(&amp;options)</div><div><span style="">				</span>}</div><div><span style="">				</span>return client.AppsV1().Deployments(namespace).List(context.TODO(), options)</div><div><span style="">			</span>},</div><div><span style="">			</span>WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {</div><div><span style="">				</span>if tweakListOptions != nil {</div><div><span style="">					</span>tweakListOptions(&amp;options)</div><div><span style="">				</span>}</div><div><span style="">				</span>return client.AppsV1().Deployments(namespace).Watch(context.TODO(), options)</div><div><span style="">			</span>},</div><div><span style="">		</span>},</div><div><span style="">		</span>&amp;appsv1.Deployment{},</div><div><span style="">		</span>resyncPeriod,</div><div><span style="">		</span>indexers,</div><div><span style="">	</span>)</div><div>}</div></pre></div></div></div></foreignObject><text x="979" y="627" fill="#000000" font-family="Helvetica" font-size="12px">// NewFilteredDeploymentInformer constructs a new informer for Deployment type....</text></switch></g><path d="M 1152 861 L 1152 838 L 2162 838 L 2162 861" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1152 861 L 1152 1078 L 2162 1078 L 2162 861" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1152 861 L 2162 861" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1656.5" y="854">NewSharedIndexInformer (staging/src/k8s.io/client-go/tools/cache/shared_informer.go)</text></g><rect x="1152" y="858" width="1010" height="220" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1008px; height: 1px; padding-top: 968px; margin-left: 1154px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><b>func NewSharedIndexInformer</b>(lw ListerWatcher, exampleObject runtime.Object, defaultEventHandlerResyncPeriod time.Duration, indexers Indexers) SharedIndexInformer {</div><div><span style="">	</span>realClock := &amp;clock.RealClock{}</div><div><span style="">	</span><b><font color="#00994d">sharedIndexInformer := &amp;sharedIndexInformer</font></b>{</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// all controllers shared one informer which is created by singleton factory, processor manages handlers from controllers and dispatch events to them</font><br /></div><div><span style="">		</span><b><font color="#00994d">processor:                    &amp;sharedProcessor{clock: realClock}</font></b>,</div><div><span style="">		</span>indexer:                        NewIndexer(DeletionHandlingMetaNamespaceKeyFunc, indexers),</div><div><span style="">		</span>listerWatcher:                     lw,</div><div><span style="">		</span>objectType:                       exampleObject,</div><div><span style="">		</span>resyncCheckPeriod:                   defaultEventHandlerResyncPeriod,</div><div><span style="">		</span>defaultEventHandlerResyncPeriod:             defaultEventHandlerResyncPeriod,</div><div><span style="">		</span>cacheMutationDetector:                 NewCacheMutationDetector(fmt.Sprintf("%T", exampleObject)),</div><div><span style="">		</span>clock:                          realClock,</div><div><span style="">	</span>}</div><div><span style="">	</span>return sharedIndexInformer</div><div>}</div></pre></div></div></div></foreignObject><text x="1154" y="972" fill="#000000" font-family="Helvetica" font-size="12px">func NewSharedIndexInformer(lw ListerWatcher, exampleObject runtime.Object, defaultEventHandlerResyncPeriod time.Duration, indexers Indexers) SharedIndexInformer {...</text></switch></g><path d="M 2370 341 L 2370 318 L 3710 318 L 3710 341" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2370 341 L 2370 1028 L 3710 1028 L 3710 341" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2370 341 L 3710 341" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="3039.5" y="334">NewDeploymentController (pkg/controller/deployment/deployment_controller.go)</text></g><rect x="2370" y="338" width="1340" height="690" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1338px; height: 1px; padding-top: 683px; margin-left: 2372px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// NewDeploymentController creates a new DeploymentController.</font><div><b>func NewDeploymentController</b>(dInformer appsinformers.DeploymentInformer, rsInformer appsinformers.ReplicaSetInformer, podInformer coreinformers.PodInformer, client clientset.Interface) (*DeploymentController, error) {</div><div><span style="">	</span>eventBroadcaster := record.NewBroadcaster()</div><div><span style="">	</span>eventBroadcaster.StartStructuredLogging(0)</div><div><span style="">	</span>eventBroadcaster.StartRecordingToSink(&amp;v1core.EventSinkImpl{Interface: client.CoreV1().Events("")})</div><div><br /></div><div><span style="">	</span>if client != nil &amp;&amp; client.CoreV1().RESTClient().GetRateLimiter() != nil {</div><div><span style="">		</span>if err := ratelimiter.RegisterMetricAndTrackRateLimiterUsage("deployment_controller", client.CoreV1().RESTClient().GetRateLimiter()); err != nil {</div><div><span style="">			</span>return nil, err</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div><span style="">	</span>dc := &amp;DeploymentController{</div><div><span style="">		</span>client:        client,</div><div><span style="">		</span>eventRecorder:     eventBroadcaster.NewRecorder(scheme.Scheme, v1.EventSource{Component: "deployment-controller"}),</div><div><span style="">		</span>queue:         workqueue.NewNamedRateLimitingQueue(workqueue.DefaultControllerRateLimiter(), "deployment"),</div><div><span style="">	</span>}</div><div><span style="">	</span>dc.rsControl = controller.RealRSControl{</div><div><span style="">		</span>KubeClient:   client,</div><div><span style="">		</span>Recorder:   dc.eventRecorder,</div><div><span style="">	</span>}</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// add event handler to informer</font><br /></div><div><span style="">	</span><b><font color="#00994d">dInformer.Informer().AddEventHandler</font></b>(cache.ResourceEventHandlerFuncs{</div><div><span style="">		</span>AddFunc:    dc.addDeployment,</div><div><span style="">		</span>UpdateFunc:   dc.updateDeployment,</div><div><span style="">		</span><font color="#7f00ff">// This will enter the sync loop and no-op, because the deployment has been deleted from the store.</font></div><div><span style="">		</span>DeleteFunc:   dc.deleteDeployment,</div><div><span style="">	</span>})</div><div><span style="">	</span><b><font color="#00994d">rsInformer.Informer().AddEventHandler</font></b>(cache.ResourceEventHandlerFuncs{</div><div><span style="">		</span>AddFunc:    dc.addReplicaSet,</div><div><span style="">		</span>UpdateFunc:   dc.updateReplicaSet,</div><div><span style="">		</span>DeleteFunc:   dc.deleteReplicaSet,</div><div><span style="">	</span>})</div><div><span style="">	</span><b><font color="#00994d">podInformer.Informer().AddEventHandler</font></b>(cache.ResourceEventHandlerFuncs{</div><div><span style="">		</span>DeleteFunc:   dc.deletePod,</div><div><span style="">	</span>})</div><div><br /></div><div><span style="">	</span><b><font color="#00994d">dc.syncHandler = dc.syncDeployment</font></b></div><div><span style="">	</span>dc.enqueueDeployment = dc.enqueue</div><div><br /></div><div><span style="">	</span>dc.dLister = dInformer.Lister()</div><div><span style="">	</span>dc.rsLister = rsInformer.Lister()</div><div><span style="">	</span>dc.podLister = podInformer.Lister()</div><div><span style="">	</span>dc.dListerSynced = dInformer.Informer().HasSynced</div><div><span style="">	</span>dc.rsListerSynced = rsInformer.Informer().HasSynced</div><div><span style="">	</span>dc.podListerSynced = podInformer.Informer().HasSynced</div><div><span style="">	</span>return dc, nil</div><div>}</div></pre></div></div></div></foreignObject><text x="2372" y="687" fill="#000000" font-family="Helvetica" font-size="12px">// NewDeploymentController creates a new DeploymentController....</text></switch></g><path d="M 2765 1131 L 2765 1108 L 3315 1108 L 3315 1131" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2765 1131 L 2765 1188 L 3315 1188 L 3315 1131" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2765 1131 L 3315 1131" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="3039.5" y="1124">AddEventHandler (staging/src/k8s.io/client-go/tools/cache/shared_informer.go)</text></g><rect x="2765" y="1128" width="550" height="60" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 548px; height: 1px; padding-top: 1158px; margin-left: 2767px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><b>func (s *sharedIndexInformer) AddEventHandler</b>(handler ResourceEventHandler) {<div><span style="">	</span><b><font color="#00994d">s.AddEventHandlerWithResyncPeriod</font></b>(handler, s.defaultEventHandlerResyncPeriod)</div><div>}</div></pre></div></div></div></foreignObject><text x="2767" y="1162" fill="#000000" font-family="Helvetica" font-size="12px">func (s *sharedIndexInformer) AddEventHandler(handler ResourceEventHandler) {...</text></switch></g><path d="M 2393.5 1316 L 2393.5 1293 L 3686.5 1293 L 3686.5 1316" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2393.5 1316 L 2393.5 2043 L 3686.5 2043 L 3686.5 1316" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2393.5 1316 L 3686.5 1316" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="3039.5" y="1309">AddEventHandlerWithResyncPeriod (staging/src/k8s.io/client-go/tools/cache/shared_informer.go)</text></g><rect x="2393.5" y="1313" width="1293" height="730" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1291px; height: 1px; padding-top: 1678px; margin-left: 2396px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><b>func (s *sharedIndexInformer) AddEventHandlerWithResyncPeriod</b>(handler ResourceEventHandler, resyncPeriod time.Duration) {<div><span style="">	</span>s.startedLock.Lock()</div><div><span style="">	</span>defer s.startedLock.Unlock()</div><div><br /></div><div><span style="">	</span>if s.stopped {</div><div><span style="">		</span>klog.V(2).Infof("Handler %v was not added to shared informer because it has stopped already", handler)</div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>if resyncPeriod &gt; 0 {</div><div><span style="">		</span>if resyncPeriod &lt; minimumResyncPeriod {</div><div><span style="">			</span>klog.Warningf("resyncPeriod %v is too small. Changing it to the minimum allowed value of %v", resyncPeriod, minimumResyncPeriod)</div><div><span style="">			</span>resyncPeriod = minimumResyncPeriod</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span>if resyncPeriod &lt; s.resyncCheckPeriod {</div><div><span style="">			</span>if s.started {</div><div><span style="">				</span>klog.Warningf("resyncPeriod %v is smaller than resyncCheckPeriod %v and the informer has already started. Changing it to %v", resyncPeriod, s.resyncCheckPeriod, s.resyncCheckPeriod)</div><div><span style="">				</span>resyncPeriod = s.resyncCheckPeriod</div><div><span style="">			</span>} else {</div><div><font color="#7f00ff"><span style="">				</span>// if the event handler's resyncPeriod is smaller than the current resyncCheckPeriod, update</font></div><div><font color="#7f00ff"><span style="">				</span>// resyncCheckPeriod to match resyncPeriod and adjust the resync periods of all the listeners</font></div><div><font color="#7f00ff"><span style="">				</span>// accordingly</font></div><div><span style="">				</span>s.resyncCheckPeriod = resyncPeriod</div><div><span style="">				</span>s.processor.resyncCheckPeriodChanged(resyncPeriod)</div><div><span style="">			</span>}</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><b><font color="#00994d">listener := newProcessListener(handler, resyncPeriod, determineResyncPeriod(resyncPeriod, s.resyncCheckPeriod), s.clock.Now(), initialBufferSize)</font></b></div><div><br /></div><div><span style="">	</span>if !s.started {</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// add listener to processer</font><br /></div><div><span style="">		</span><b><font color="#00994d">s.processor.addListener(listener)</font></b></div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// in order to safely join, we have to</font></div><div><font color="#7f00ff"><span style="">	</span>// 1. stop sending add/update/delete notifications</font></div><div><font color="#7f00ff"><span style="">	</span>// 2. do a list against the store</font></div><div><font color="#7f00ff"><span style="">	</span>// 3. send synthetic "Add" events to the new handler</font></div><div><font color="#7f00ff"><span style="">	</span>// 4. unblock</font></div><div><span style="">	</span>s.blockDeltas.Lock()</div><div><span style="">	</span>defer s.blockDeltas.Unlock()</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// add listener to processer</font><br /></div><div><span style="">	</span><b><font color="#00994d">s.processor.addListener(listener)</font></b></div><div><span style="">	</span>for _, item := range s.indexer.List() {</div><div><span style="">		</span>listener.add(addNotification{newObj: item})</div><div><span style="">	</span>}</div><div>}</div></pre></div></div></div></foreignObject><text x="2396" y="1682" fill="#000000" font-family="Helvetica" font-size="12px">func (s *sharedIndexInformer) AddEventHandlerWithResyncPeriod(handler ResourceEventHandler, resyncPeriod time.Duration) {...</text></switch></g><path d="M 1372 1141 L 1372 1118 L 1942 1118 L 1942 1141" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1372 1141 L 1372 1438 L 1942 1438 L 1942 1141" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1372 1141 L 1942 1141" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1656.5" y="1134">run (staging/src/k8s.io/client-go/tools/cache/shared_informer.go)</text></g><rect x="1372" y="1138" width="570" height="300" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 568px; height: 1px; padding-top: 1288px; margin-left: 1374px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><b>func (p *sharedProcessor) run(stopCh &lt;-chan struct{})</b> {<div><span style="">	</span>func() {</div><div><span style="">		</span>p.listenersLock.RLock()</div><div><span style="">		</span>defer p.listenersLock.RUnlock()</div><div><span style="">		</span>for _, listener := range p.listeners {</div><div><font color="#7f00ff"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>// run function process events from nextCh<br /></font></div><div><font color="#7f00ff"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>// pop function add events to nextCh</font><br /></div><div><span style="">			</span><b><font color="#00994d">p.wg.Start(listener.run)</font></b></div><div><span style="">			</span><b><font color="#00994d">p.wg.Start(listener.pop)</font></b></div><div><span style="">		</span>}</div><div><span style="">		</span>p.listenersStarted = true</div><div><span style="">	</span>}()</div><div><span style="">	</span>&lt;-stopCh</div><div><span style="">	</span>p.listenersLock.RLock()</div><div><span style="">	</span>defer p.listenersLock.RUnlock()</div><div><span style="">	</span>for _, listener := range p.listeners {</div><div><span style="">		</span>close(listener.addCh) // Tell .pop() to stop. .pop() will tell .run() to stop</div><div><span style="">	</span>}</div><div><span style="">	</span>p.wg.Wait() // Wait for all .pop() and .run() to stop</div><div>}</div></pre></div></div></div></foreignObject><text x="1374" y="1292" fill="#000000" font-family="Helvetica" font-size="12px">func (p *sharedProcessor) run(stopCh &lt;-chan struct{}) {...</text></switch></g><path d="M 1327 1501 L 1327 1478 L 1987 1478 L 1987 1501" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1327 1501 L 1327 1858 L 1987 1858 L 1987 1501" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1327 1501 L 1987 1501" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1656.5" y="1494">run (staging/src/k8s.io/client-go/tools/cache/shared_informer.go)</text></g><rect x="1327" y="1498" width="660" height="360" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 658px; height: 1px; padding-top: 1678px; margin-left: 1329px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><b>func (p *processorListener) run()</b> {<div><font color="#7f00ff"><span style="">	</span>// this call blocks until the channel is closed.  When a panic happens during the notification</font></div><div><font color="#7f00ff"><span style="">	</span>// we will catch it, **the offending item will be skipped!**, and after a short delay (one second)</font></div><div><font color="#7f00ff"><span style="">	</span>// the next notification will be attempted.  This is usually better than the alternative of never</font></div><div><font color="#7f00ff"><span style="">	</span>// delivering again.</font></div><div><span style="">	</span>stopCh := make(chan struct{})</div><div><span style="">	</span>wait.Until(func() {</div><div><span style="">		</span><b><font color="#00994d">for next := range p.nextCh</font></b> {</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// iterate all events and call registered handler</font><br /></div><div><span style="">			</span>switch notification := next.(type) {</div><div><span style="">			</span>case updateNotification:</div><div><span style="">				</span><b><font color="#00994d">p.handler.OnUpdate(notification.oldObj, notification.newObj)</font></b></div><div><span style="">			</span>case addNotification:</div><div><span style="">				</span><b><font color="#00994d">p.handler.OnAdd(notification.newObj)</font></b></div><div><span style="">			</span>case deleteNotification:</div><div><span style="">				</span><b><font color="#00994d">p.handler.OnDelete(notification.oldObj)</font></b></div><div><span style="">			</span>default:</div><div><span style="">				</span>utilruntime.HandleError(fmt.Errorf("unrecognized notification: %T", next))</div><div><span style="">			</span>}</div><div><span style="">		</span>}</div><div><span style="">		</span>// the only way to get here is if the p.nextCh is empty and closed</div><div><span style="">		</span>close(stopCh)</div><div><span style="">	</span>}, 1*time.Second, stopCh)</div><div>}</div></pre></div></div></div></foreignObject><text x="1329" y="1682" fill="#000000" font-family="Helvetica" font-size="12px">func (p *processorListener) run() {...</text></switch></g><path d="M 600 1456 L 600 1433 L 1270 1433 L 1270 1456" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 600 1456 L 600 1903 L 1270 1903 L 1270 1456" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 600 1456 L 1270 1456" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="934.5" y="1449">pop (staging/src/k8s.io/client-go/tools/cache/shared_informer.go)</text></g><rect x="600" y="1453" width="670" height="450" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 668px; height: 1px; padding-top: 1678px; margin-left: 602px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><b>func (p *processorListener) pop()</b> {<div><span style="">	</span>defer utilruntime.HandleCrash()</div><div><span style="">	</span>defer close(p.nextCh) // Tell .run() to stop</div><div><br /></div><div><span style="">	</span>var nextCh chan&lt;- interface{}</div><div><span style="">	</span>var notification interface{}</div><div><span style="">	</span>for {</div><div><span style="">		</span>select {</div><div><span style="">		</span>case nextCh &lt;- notification:</div><div><span style="">			</span><font color="#7f00ff">// Notification dispatched</font></div><div><span style="">			</span>var ok bool</div><div><span style="">			</span>notification, ok = p.pendingNotifications.ReadOne()</div><div><span style="">			</span>if !ok { // Nothing to pop</div><div><span style="">				</span>nextCh = nil // Disable this select case</div><div><span style="">			</span>}</div><div><span style="">		</span><b><font color="#00994d">case notificationToAdd, ok := &lt;-p.addCh:</font></b></div><div><font color="#7f00ff"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>// receive events from addCh</font></div><div><font color="#7f00ff"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>// if it remains not handled notification, add to pendingNotifications</font><br /></div><div><span style="">			</span>if !ok {</div><div><span style="">				</span>return</div><div><span style="">			</span>}</div><div><span style="">			</span>if notification == nil { <font color="#7f00ff">// No notification to pop (and pendingNotifications is empty)</font></div><div><span style="">				</span><font color="#7f00ff">// Optimize the case - skip adding to pendingNotifications</font></div><div><span style="">				</span>notification = notificationToAdd</div><div><span style="">				</span>nextCh = p.nextCh</div><div><span style="">			</span>} else { <font color="#7f00ff">// There is already a notification waiting to be dispatched</font></div><div><span style="">				</span>p.pendingNotifications.WriteOne(notificationToAdd)</div><div><span style="">			</span>}</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div>}</div></pre></div></div></div></foreignObject><text x="602" y="1682" fill="#000000" font-family="Helvetica" font-size="12px">func (p *processorListener) pop() {...</text></switch></g><path d="M 3040 268 L 3040 311.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3040 316.88 L 3036.5 309.88 L 3040 311.63 L 3043.5 309.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3040 1028 L 3040 1101.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3040 1106.88 L 3036.5 1099.88 L 3040 1101.63 L 3043.5 1099.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3040 1188 L 3040 1286.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3040 1291.88 L 3036.5 1284.88 L 3040 1286.63 L 3043.5 1284.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2393.5 1678 L 1993.37 1678" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 1988.12 1678 L 1995.12 1674.5 L 1993.37 1678 L 1995.12 1681.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1657 1078 L 1657 1111.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 1657 1116.88 L 1653.5 1109.88 L 1657 1111.63 L 1660.5 1109.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1657 1438 L 1657 1471.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1657 1476.88 L 1653.5 1469.88 L 1657 1471.63 L 1660.5 1469.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1657 183 L 1657 201.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1657 206.88 L 1653.5 199.88 L 1657 201.63 L 1660.5 199.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1657 288 L 1657 311.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1657 316.88 L 1653.5 309.88 L 1657 311.63 L 1660.5 309.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1657 798 L 1657 831.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1657 836.88 L 1653.5 829.88 L 1657 831.63 L 1660.5 829.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1372 1288 L 935 1288 L 935 1426.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 935 1431.88 L 931.5 1424.88 L 935 1426.63 L 938.5 1424.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1270 1678 L 1320.63 1678" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 1325.88 1678 L 1318.88 1681.5 L 1320.63 1678 L 1318.88 1674.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 550 1678 L 593.63 1678" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 598.88 1678 L 591.88 1681.5 L 593.63 1678 L 591.88 1674.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 1571 L 0 1548 L 550 1548 L 550 1571" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 1571 L 0 1808 L 550 1808 L 550 1571" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 1571 L 550 1571" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="274.5" y="1564">distribute (staging/src/k8s.io/client-go/tools/cache/shared_informer.go)</text></g><rect x="0" y="1568" width="550" height="240" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 548px; height: 1px; padding-top: 1688px; margin-left: 2px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><b>func (p *sharedProcessor) distribute(obj interface{}, sync bool)</b> {<div><span style="">	</span>p.listenersLock.RLock()</div><div><span style="">	</span>defer p.listenersLock.RUnlock()</div><div><br /></div><div><span style="">	</span>if sync {</div><div><span style="">		</span>for _, listener := range p.syncingListeners {</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// add event to addCh</font><br /></div><div><span style="">			</span><b><font color="#00994d">listener.add(obj)</font></b></div><div><span style="">		</span>}</div><div><span style="">	</span>} else {</div><div><span style="">		</span>for _, listener := range p.listeners {</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// add event to addCh</font><br /></div><div><span style="">			</span><b><font color="#00994d">listener.add(obj)</font></b></div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div>}</div></pre></div></div></div></foreignObject><text x="2" y="1692" fill="#000000" font-family="Helvetica" font-size="12px">func (p *sharedProcessor) distribute(obj interface{}, sync bool) {...</text></switch></g><path d="M 3870 23 L 3870 0 L 4630 0 L 4630 23" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3870 23 L 3870 286 L 4630 286 L 4630 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3870 23 L 4630 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="4249.5" y="16">Run (pkg/controller/deployment/deployment_controller.go)</text></g><rect x="3870" y="23" width="760" height="267" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 758px; height: 1px; padding-top: 157px; margin-left: 3872px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// Run begins watching and syncing.</font><div><b>func (dc *DeploymentController) Run(ctx context.Context, workers int)</b> {</div><div><span style="">	</span>defer utilruntime.HandleCrash()</div><div><span style="">	</span>defer dc.queue.ShutDown()</div><div><br /></div><div><span style="">	</span>klog.InfoS("Starting controller", "controller", "deployment")</div><div><span style="">	</span>defer klog.InfoS("Shutting down controller", "controller", "deployment")</div><div><br /></div><div><span style="">	</span>if !cache.WaitForNamedCacheSync("deployment", ctx.Done(), dc.dListerSynced, dc.rsListerSynced, dc.podListerSynced) {</div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>for i := 0; i &lt; workers; i++ {</div><div><span style="">		</span><b><font color="#00994d">go wait.UntilWithContext(ctx, dc.worker, time.Second)</font></b></div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>&lt;-ctx.Done()</div><div>}</div></pre></div></div></div></foreignObject><text x="3872" y="160" fill="#000000" font-family="Helvetica" font-size="12px">// Run begins watching and syncing....</text></switch></g><path d="M 3970 351 L 3970 328 L 4530 328 L 4530 351" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3970 351 L 3970 448 L 4530 448 L 4530 351" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3970 351 L 4530 351" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="4249.5" y="344">worker (pkg/controller/deployment/deployment_controller.go)</text></g><rect x="3970" y="348" width="560" height="100" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 558px; height: 1px; padding-top: 398px; margin-left: 3972px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// worker runs a worker thread that just dequeues items, processes them, and marks them done.</font><div><font color="#7f00ff">// It enforces that the syncHandler is never invoked concurrently with the same key.</font></div><div><b>func (dc *DeploymentController) worker(ctx context.Context)</b> {</div><div><span style="">	</span>for <b><font color="#00994d">dc.processNextWorkItem(ctx)</font></b> {</div><div><span style="">	</span>}</div><div>}</div></pre></div></div></div></foreignObject><text x="3972" y="402" fill="#000000" font-family="Helvetica" font-size="12px">// worker runs a worker thread that just dequeues items, processes them, and marks them done....</text></switch></g><path d="M 3885 511 L 3885 488 L 4615 488 L 4615 511" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3885 511 L 3885 706 L 4615 706 L 4615 511" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3885 511 L 4615 511" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="4249.5" y="504">processNextWorkItem (pkg/controller/deployment/deployment_controller.go)</text></g><rect x="3885" y="508" width="730" height="198" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 728px; height: 1px; padding-top: 607px; margin-left: 3887px;"><div data-drawio-colors="color: #00994D; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 153, 77); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#000000"><b>func (dc *DeploymentController) processNextWorkItem(ctx context.Context)</b> bool {</font><br /><span style="color: rgb(0, 0, 0); white-space: pre;">	</span><font color="#7f00ff">// get item from queue which is added by EventHandlers like addDeployment ...</font><font color="#000000"><br /></font><div style=""><font style=""><span style="color: rgb(0, 0, 0);">	</span><b style="">key, quit := dc.queue.Get()</b></font></div><div style="color: rgb(0, 0, 0);"></div><div style="color: rgb(0, 0, 0);"><font color="#000000"><span style="">	</span>if quit {</font></div><div style="color: rgb(0, 0, 0);"><font color="#000000"><span style="">		</span>return false</font></div><div style="color: rgb(0, 0, 0);"><font color="#000000"><span style="">	</span>}</font></div><div style="color: rgb(0, 0, 0);"><font color="#000000"><span style="">	</span>defer dc.queue.Done(key)</font></div><div style=""><font style=""><span style="color: rgb(0, 0, 0); white-space: pre;">	</span><font color="#7f00ff">// process item</font><font color="#000000"><br /></font></font></div><div style=""><font style=""><span style="color: rgb(0, 0, 0);">	</span><b style="">err := dc.syncHandler(ctx, key.(string))</b></font></div><div style="color: rgb(0, 0, 0);"><font color="#000000"><span style="">	</span>dc.handleErr(err, key)</font></div><div style="color: rgb(0, 0, 0);"><font color="#000000"><br /></font></div><div style="color: rgb(0, 0, 0);"><font color="#000000"><span style="">	</span>return true</font></div><div style="color: rgb(0, 0, 0);"><font color="#000000">}</font></div></pre></div></div></div></foreignObject><text x="3887" y="611" fill="#00994D" font-family="Helvetica" font-size="12px">func (dc *DeploymentController) processNextWorkItem(ctx context.Context) bool {...</text></switch></g><path d="M 3760 771 L 3760 748 L 4740 748 L 4740 771" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3760 771 L 3760 2098 L 4740 2098 L 4740 771" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3760 771 L 4740 771" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="4249.5" y="764">syncDeployment  (pkg/controller/deployment/deployment_controller.go)</text></g><rect x="3760" y="768" width="980" height="1330" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 978px; height: 1px; padding-top: 1433px; margin-left: 3762px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// syncDeployment will sync the deployment with the given key.</font><div><font color="#7f00ff">// This function is not meant to be invoked concurrently with the same key.</font></div><div><b>func (dc *DeploymentController) syncDeployment(ctx context.Context, key string)</b> error {</div><div><span style="">	</span><b><font color="#00994d">namespace, name, err := cache.SplitMetaNamespaceKey(key)</font></b></div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>klog.ErrorS(err, "Failed to split meta namespace cache key", "cacheKey", key)</div><div><span style="">		</span>return err</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>startTime := time.Now()</div><div><span style="">	</span>klog.V(4).InfoS("Started syncing deployment", "deployment", klog.KRef(namespace, name), "startTime", startTime)</div><div><span style="">	</span>defer func() {</div><div><span style="">		</span>klog.V(4).InfoS("Finished syncing deployment", "deployment", klog.KRef(namespace, name), "duration", time.Since(startTime))</div><div><span style="">	</span>}()</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// list deployment in namespace</font><br /></div><div><span style="">	</span><b><font color="#00994d">deployment, err := dc.dLister.Deployments(namespace).Get(name)</font></b></div><div><span style="">	</span>if errors.IsNotFound(err) {</div><div><span style="">		</span>klog.V(2).InfoS("Deployment has been deleted", "deployment", klog.KRef(namespace, name))</div><div><span style="">		</span>return nil</div><div><span style="">	</span>}</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return err</div><div><span style="">	</span>}</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// Deep-copy otherwise we are mutating our cache.</font></div><div><font color="#7f00ff"><span style="">	</span>// TODO: Deep-copy only when needed.</font></div><div><span style="">	</span>d := deployment.DeepCopy()</div><div><br /></div><div><span style="">	</span>everything := metav1.LabelSelector{}</div><div><span style="">	</span>if reflect.DeepEqual(d.Spec.Selector, &amp;everything) {</div><div><span style="">		</span>dc.eventRecorder.Eventf(d, v1.EventTypeWarning, "SelectingAll", "This deployment is selecting all pods. A non-empty selector is required.")</div><div><span style="">		</span>if d.Status.ObservedGeneration &lt; d.Generation {</div><div><span style="">			</span>d.Status.ObservedGeneration = d.Generation</div><div><span style="">			</span>dc.client.AppsV1().Deployments(d.Namespace).UpdateStatus(ctx, d, metav1.UpdateOptions{})</div><div><span style="">		</span>}</div><div><span style="">		</span>return nil</div><div><span style="">	</span>}</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// List ReplicaSets owned by this Deployment, while reconciling ControllerRef</font></div><div><font color="#7f00ff"><span style="">	</span>// through adoption/orphaning.</font></div><div><span style="">	</span><b><font color="#00994d">rsList, err := dc.getReplicaSetsForDeployment(ctx, d)</font></b></div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return err</div><div><span style="">	</span>}</div><div><font color="#7f00ff"><span style="">	</span>// List all Pods owned by this Deployment, grouped by their ReplicaSet.</font></div><div><font color="#7f00ff"><span style="">	</span>// Current uses of the podMap are:</font></div><div><font color="#7f00ff"><span style="">	</span>//</font></div><div><font color="#7f00ff"><span style="">	</span>// * check if a Pod is labeled correctly with the pod-template-hash label.</font></div><div><font color="#7f00ff"><span style="">	</span>// * check that no old Pods are running in the middle of Recreate Deployments.</font></div><div><span style="">	</span><b><font color="#00994d">podMap, err := dc.getPodMapForDeployment(d, rsList)</font></b></div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return err</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>if d.DeletionTimestamp != nil {</div><div><span style="">		</span>return dc.syncStatusOnly(ctx, d, rsList)</div><div><span style="">	</span>}</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// Update deployment conditions with an Unknown condition when pausing/resuming</font></div><div><font color="#7f00ff"><span style="">	</span>// a deployment. In this way, we can be sure that we won't timeout when a user</font></div><div><font color="#7f00ff"><span style="">	</span>// resumes a Deployment with a set progressDeadlineSeconds.</font></div><div><span style="">	</span>if err = dc.checkPausedConditions(ctx, d); err != nil {</div><div><span style="">		</span>return err</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>if d.Spec.Paused {</div><div><span style="">		</span>return <b><font color="#00994d">dc.sync(ctx, d, rsList)</font></b></div><div><span style="">	</span>}</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// rollback is not re-entrant in case the underlying replica sets are updated with a new</font></div><div><font color="#7f00ff"><span style="">	</span>// revision so we should ensure that we won't proceed to update replica sets until we</font></div><div><font color="#7f00ff"><span style="">	</span>// make sure that the deployment has cleaned up its rollback spec in subsequent enqueue</font>s.</div><div><span style="">	</span>if getRollbackTo(d) != nil {</div><div><span style="">		</span>return <b><font color="#00994d">dc.rollback(ctx, d, rsList)</font></b></div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><b><font color="#00994d">scalingEvent, err := dc.isScalingEvent(ctx, d, rsList)</font></b></div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return err</div><div><span style="">	</span>}</div><div><span style="">	</span>if scalingEvent {</div><div><span style="">		</span>return <b><font color="#00994d">dc.sync(ctx, d, rsList)</font></b></div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><b><font color="#00994d">switch d.Spec.Strategy.Type</font></b> {</div><div><span style="">	</span>case apps.RecreateDeploymentStrategyType:</div><div><span style="">		</span>return <b><font color="#00994d">dc.rolloutRecreate(ctx, d, rsList, podMap)</font></b></div><div><span style="">	</span>case apps.RollingUpdateDeploymentStrategyType:</div><div><span style="">		</span>return <b><font color="#00994d">dc.rolloutRolling(ctx, d, rsList)</font></b></div><div><span style="">	</span>}</div><div><span style="">	</span>return fmt.Errorf("unexpected deployment strategy type: %s", d.Spec.Strategy.Type)</div><div>}</div></pre></div></div></div></foreignObject><text x="3762" y="1437" fill="#000000" font-family="Helvetica" font-size="12px">// syncDeployment will sync the deployment with the given key....</text></switch></g><path d="M 4250 290 L 4250 321.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 4250 326.88 L 4246.5 319.88 L 4250 321.63 L 4253.5 319.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 4250 448 L 4250 481.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 4250 486.88 L 4246.5 479.88 L 4250 481.63 L 4253.5 479.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 4250 706 L 4250 741.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 4250 746.88 L 4246.5 739.88 L 4250 741.63 L 4253.5 739.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2640 153 L 2026.37 153" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2021.12 153 L 2028.12 149.5 L 2026.37 153 L 2028.12 156.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>