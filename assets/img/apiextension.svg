<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than diagrams.net -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1761px" height="2571px" viewBox="-0.5 -0.5 1761 2571" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2022-08-19T09:41:29.231Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/19.0.3 Chrome/102.0.5005.63 Electron/19.0.3 Safari/537.36&quot; etag=&quot;Vxr4hPX1HYgu8qjdcfQc&quot; version=&quot;19.0.3&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;TyEIrytdnNC43feL7FiF&quot; name=&quot;第 1 页&quot;&gt;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&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs/><g><path d="M 0 23 L 0 0 L 1760 0 L 1760 23" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 0 23 L 0 290 L 1760 290 L 1760 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 23 L 1760 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="879.5" y="16">CreateServerChain (cmd/kube-apiserver/app/server.go)</text></g><rect x="0" y="20" width="1760" height="270" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1758px; height: 1px; padding-top: 155px; margin-left: 2px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// CreateServerChain creates the apiservers connected via delegation.</font><div><b>func CreateServerChain(completedOptions completedServerRunOptions, stopCh &lt;-chan struct{}) (*aggregatorapiserver.APIAggregator, error)</b> {</div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span>// If additional API servers are added, they should be gated.</div><div><span style="">	</span><b><font color="#00994d">apiExtensionsConfig, err := createAPIExtensionsConfig</font></b>(*kubeAPIServerConfig.GenericConfig, kubeAPIServerConfig.ExtraConfig.VersionedInformers, pluginInitializer, completedOptions.ServerRunOptions, completedOptions.MasterCount,</div><div><span style="">		</span>serviceResolver, webhook.NewDefaultAuthenticationInfoResolverWrapper(kubeAPIServerConfig.ExtraConfig.ProxyTransport, kubeAPIServerConfig.GenericConfig.EgressSelector, kubeAPIServerConfig.GenericConfig.LoopbackClientConfig, kubeAPIServerConfig.GenericConfig.TracerProvider))</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return nil, err</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>notFoundHandler := notfoundhandler.New(kubeAPIServerConfig.GenericConfig.Serializer, genericapifilters.NoMuxAndDiscoveryIncompleteKey)</div><div><span style="">	</span><font color="#00994d"><b>apiExtensionsServer, err := createAPIExtensionsServer(apiExtensionsConfig, genericapiserver.NewEmptyDelegateWithCustomHandler(notFoundHandler))</b></font></div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return nil, err</div><div><span style="">	</span>}</div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span>return aggregatorServer, nil</div><div>}</div></pre></div></div></div></foreignObject><text x="2" y="159" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">// CreateServerChain creates the apiservers connected via delegation....</text></switch></g><path d="M 195 373 L 195 350 L 1565 350 L 1565 373" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 195 373 L 195 2560 L 1565 2560 L 1565 373" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 195 373 L 1565 373" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="879.5" y="366">New (staging/src/k8s.io/apiextenstions-apiserver/pkg/apiserver/apiserver.go)</text></g><rect x="195" y="370" width="1370" height="2190" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1368px; height: 1px; padding-top: 1465px; margin-left: 197px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// New returns a new instance of CustomResourceDefinitions from the given config.</font><div><b>func (c completedConfig) New(delegationTarget genericapiserver.DelegationTarget) (*CustomResourceDefinitions, error)</b> {</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// init genericServer</font><br /></div><div><span style="">	</span>genericServer, err := c.GenericConfig.New("apiextensions-apiserver", delegationTarget)</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return nil, err</div><div><span style="">	</span>}</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// hasCRDInformerSyncedSignal is closed when the CRD informer this server uses has been fully synchronized.</font></div><div><font color="#7f00ff"><span style="">	</span>// It ensures that requests to potential custom resource endpoints while the server hasn't installed all known HTTP paths get a 503 error instead of a 404</font></div><div><span style="">	</span>hasCRDInformerSyncedSignal := make(chan struct{})</div><div><span style="">	</span>if err := genericServer.RegisterMuxAndDiscoveryCompleteSignal("CRDInformerHasNotSynced", hasCRDInformerSyncedSignal); err != nil {</div><div><span style="">		</span>return nil, err</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>s := &amp;CustomResourceDefinitions{</div><div><span style="">		</span>GenericAPIServer: genericServer,</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>apiResourceConfig := c.GenericConfig.MergedResourceConfig</div><div><span style="">	</span>apiGroupInfo := genericapiserver.NewDefaultAPIGroupInfo(apiextensions.GroupName, Scheme, metav1.ParameterCodec, Codecs)</div><div><span style="">	</span>storage := map[string]rest.Storage{}</div><div><span style="">	</span><font color="#7f00ff">// customresourcedefinitions</font></div><div><span style="">	</span>if resource := "customresourcedefinitions"; apiResourceConfig.ResourceEnabled(v1.SchemeGroupVersion.WithResource(resource)) {</div><div><span style="">		</span>customResourceDefinitionStorage, err := customresourcedefinition.NewREST(Scheme, c.GenericConfig.RESTOptionsGetter)</div><div><span style="">		</span>if err != nil {</div><div><span style="">			</span>return nil, err</div><div><span style="">		</span>}</div><div><span style="">		</span>storage[resource] = customResourceDefinitionStorage</div><div><span style="">		</span>storage[resource+"/status"] = customresourcedefinition.NewStatusREST(Scheme, customResourceDefinitionStorage)</div><div><span style="">	</span>}</div><div><span style="">	</span>if len(storage) &gt; 0 {</div><div><span style="">		</span>apiGroupInfo.VersionedResourcesStorageMap[v1.SchemeGroupVersion.Version] = storage</div><div><span style="">	</span>}</div><div><br /></div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// install crd api group</font><br /></div><div><span style="">	</span>if err := <b><font color="#00994d">s.GenericAPIServer.InstallAPIGroup(&amp;apiGroupInfo</font></b>); err != nil {</div><div><span style="">		</span>return nil, err</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>crdClient, err := clientset.NewForConfig(s.GenericAPIServer.LoopbackClientConfig)</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>// it's really bad that this is leaking here, but until we can fix the test (which I'm pretty sure isn't even testing what it wants to test),</div><div><span style="">		</span>// we need to be able to move forward</div><div><span style="">		</span>return nil, fmt.Errorf("failed to create clientset: %v", err)</div><div><span style="">	</span>}</div><div><span style="">	</span>s.Informers = externalinformers.NewSharedInformerFactory(crdClient, 5*time.Minute)</div><div><br /></div><div><span style="">	</span>delegateHandler := delegationTarget.UnprotectedHandler()</div><div><span style="">	</span>if delegateHandler == nil {</div><div><span style="">		</span>delegateHandler = http.NotFoundHandler()</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>versionDiscoveryHandler := &amp;versionDiscoveryHandler{</div><div><span style="">		</span>discovery: map[schema.GroupVersion]*discovery.APIVersionHandler{},</div><div><span style="">		</span>delegate:  delegateHandler,</div><div><span style="">	</span>}</div><div><span style="">	</span>groupDiscoveryHandler := &amp;groupDiscoveryHandler{</div><div><span style="">		</span>discovery: map[string]*discovery.APIGroupHandler{},</div><div><span style="">		</span>delegate:  delegateHandler,</div><div><span style="">	</span>}</div><div><span style="">	</span>establishingController := establish.NewEstablishingController(s.Informers.Apiextensions().V1().CustomResourceDefinitions(), crdClient.ApiextensionsV1())</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// create crdHandler to handle requests</font><br /></div><div><span style="">	</span><b><font color="#00994d">crdHandler, err := NewCustomResourceDefinitionHandler</font></b>(</div><div><span style="">		</span>versionDiscoveryHandler,</div><div><span style="">		</span>groupDiscoveryHandler,</div><div><span style="">		</span>s.Informers.Apiextensions().V1().CustomResourceDefinitions(),</div><div><span style="">		</span>delegateHandler,</div><div><span style="">		</span>c.ExtraConfig.CRDRESTOptionsGetter,</div><div><span style="">		</span>c.GenericConfig.AdmissionControl,</div><div><span style="">		</span>establishingController,</div><div><span style="">		</span>c.ExtraConfig.ServiceResolver,</div><div><span style="">		</span>c.ExtraConfig.AuthResolverWrapper,</div><div><span style="">		</span>c.ExtraConfig.MasterCount,</div><div><span style="">		</span>s.GenericAPIServer.Authorizer,</div><div><span style="">		</span>c.GenericConfig.RequestTimeout,</div><div><span style="">		</span>time.Duration(c.GenericConfig.MinRequestTimeout)*time.Second,</div><div><span style="">		</span>apiGroupInfo.StaticOpenAPISpec,</div><div><span style="">		</span>c.GenericConfig.MaxRequestBodyBytes,</div><div><span style="">	</span>)</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return nil, err</div><div><span style="">	</span>}</div><div><span style="">	</span><b><font color="#00994d">s.GenericAPIServer.Handler.NonGoRestfulMux.Handle("/apis", crdHandler)</font></b></div><div><span style="">	</span><b><font color="#00994d">s.GenericAPIServer.Handler.NonGoRestfulMux.HandlePrefix("/apis/", crdHandler)</font></b></div><div><br /></div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// create controllers</font><br /></div><div><span style="">	</span><b><font color="#00994d">discoveryController := NewDiscoveryController(s.Informers.Apiextensions().V1().CustomResourceDefinitions(), versionDiscoveryHandler, groupDiscoveryHandler)</font></b></div><div><span style="">	</span><b><font color="#00994d">namingController := status.NewNamingConditionController(s.Informers.Apiextensions().V1().CustomResourceDefinitions(), crdClient.ApiextensionsV1())</font></b></div><div><span style="">	</span><b><font color="#00994d">nonStructuralSchemaController := nonstructuralschema.NewConditionController(s.Informers.Apiextensions().V1().CustomResourceDefinitions(), crdClient.ApiextensionsV1())</font></b></div><div><span style="">	</span><b><font color="#00994d">apiApprovalController := apiapproval.NewKubernetesAPIApprovalPolicyConformantConditionController(s.Informers.Apiextensions().V1().CustomResourceDefinitions(), crdClient.ApiextensionsV1())</font></b></div><div><span style="">	</span><b><font color="#00994d">finalizingController := finalizer.NewCRDFinalizer</font></b>(</div><div><span style="">		</span>s.Informers.Apiextensions().V1().CustomResourceDefinitions(),</div><div><span style="">		</span>crdClient.ApiextensionsV1(),</div><div><span style="">		</span>crdHandler,</div><div><span style="">	</span>)</div><div><span style="">	</span><b><font color="#00994d">openapiController := openapicontroller.NewController(s.Informers.Apiextensions().V1().CustomResourceDefinitions())</font></b></div><div><span style="">	</span>var openapiv3Controller *openapiv3controller.Controller</div><div><span style="">	</span>if utilfeature.DefaultFeatureGate.Enabled(features.OpenAPIV3) {</div><div><span style="">		</span><b><font color="#00994d">openapiv3Controller = openapiv3controller.NewController(s.Informers.Apiextensions().V1().CustomResourceDefinitions())</font></b></div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>s.GenericAPIServer.AddPostStartHookOrDie("start-apiextensions-informers", func(context genericapiserver.PostStartHookContext) error {</div><div><span style="">		</span>s.Informers.Start(context.StopCh)</div><div><span style="">		</span>return nil</div><div><span style="">	</span>})</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// add post start handler to start controllers</font><br /></div><div><span style="">	</span><b><font color="#00994d">s.GenericAPIServer.AddPostStartHookOrDie("start-apiextensions-controllers", func(context genericapiserver.PostStartHookContext)</font></b> error {</div><div><span style="">		</span>// OpenAPIVersionedService and StaticOpenAPISpec are populated in generic apiserver PrepareRun().</div><div><span style="">		</span>// Together they serve the /openapi/v2 endpoint on a generic apiserver. A generic apiserver may</div><div><span style="">		</span>// choose to not enable OpenAPI by having null openAPIConfig, and thus OpenAPIVersionedService</div><div><span style="">		</span>// and StaticOpenAPISpec are both null. In that case we don't run the CRD OpenAPI controller.</div><div><span style="">		</span>if s.GenericAPIServer.StaticOpenAPISpec != nil {</div><div><span style="">			</span>if s.GenericAPIServer.OpenAPIVersionedService != nil {</div><div><span style="">				</span>go openapiController.Run(s.GenericAPIServer.StaticOpenAPISpec, s.GenericAPIServer.OpenAPIVersionedService, context.StopCh)</div><div><span style="">			</span>}</div><div><br /></div><div><span style="">			</span>if s.GenericAPIServer.OpenAPIV3VersionedService != nil &amp;&amp; utilfeature.DefaultFeatureGate.Enabled(features.OpenAPIV3) {</div><div><span style="">				</span>go openapiv3Controller.Run(s.GenericAPIServer.OpenAPIV3VersionedService, context.StopCh)</div><div><span style="">			</span>}</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span>go namingController.Run(context.StopCh)</div><div><span style="">		</span>go establishingController.Run(context.StopCh)</div><div><span style="">		</span>go nonStructuralSchemaController.Run(5, context.StopCh)</div><div><span style="">		</span>go apiApprovalController.Run(5, context.StopCh)</div><div><span style="">		</span>go finalizingController.Run(5, context.StopCh)</div><div><br /></div><div><span style="">		</span>discoverySyncedCh := make(chan struct{})</div><div><span style="">		</span>go discoveryController.Run(context.StopCh, discoverySyncedCh)</div><div><span style="">		</span>select {</div><div><span style="">		</span>case &lt;-context.StopCh:</div><div><span style="">		</span>case &lt;-discoverySyncedCh:</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span>return nil</div><div><span style="">	</span>})</div><div><font color="#7f00ff"><span style="">	</span>// we don't want to report healthy until we can handle all CRDs that have already been registered.  Waiting for the informer</font></div><div><font color="#7f00ff"><span style="">	</span>// to sync makes sure that the lister will be valid before we begin.  There may still be races for CRDs added after startup,</font></div><div><font color="#7f00ff"><span style="">	</span>// but we won't go healthy until we can handle the ones already present.</font></div><div><span style="">	</span>s.GenericAPIServer.AddPostStartHookOrDie("crd-informer-synced", func(context genericapiserver.PostStartHookContext) error {</div><div><span style="">		</span>return wait.PollImmediateUntil(100*time.Millisecond, func() (bool, error) {</div><div><span style="">			</span>if s.Informers.Apiextensions().V1().CustomResourceDefinitions().Informer().HasSynced() {</div><div><span style="">				</span>close(hasCRDInformerSyncedSignal)</div><div><span style="">				</span>return true, nil</div><div><span style="">			</span>}</div><div><span style="">			</span>return false, nil</div><div><span style="">		</span>}, context.StopCh)</div><div><span style="">	</span>})</div><div><br /></div><div><span style="">	</span>return s, nil</div><div>}</div></pre></div></div></div></foreignObject><text x="197" y="1469" fill="#000000" font-family="Helvetica" font-size="12px">// New returns a new instance of CustomResourceDefinitions from the given config....</text></switch></g><path d="M 880 290 L 880 343.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 880 348.88 L 876.5 341.88 L 880 343.63 L 883.5 341.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>