<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than diagrams.net -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1981px" height="3157px" viewBox="-0.5 -0.5 1981 3157" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2022-11-15T08:37:08.679Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/19.0.3 Chrome/102.0.5005.63 Electron/19.0.3 Safari/537.36&quot; etag=&quot;OvABZVL8i9oksQbgKtMs&quot; version=&quot;19.0.3&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;F2kO2VXvu4vErafnCEid&quot; name=&quot;第 1 页&quot;&gt;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&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs/><g><path d="M 880 23 L 880 0 L 1270 0 L 1270 23" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 880 23 L 880 160 L 1270 160 L 1270 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 880 23 L 1270 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1074.5" y="16">main (cmd/kubectl/kubectl.go)</text></g><rect x="880" y="20" width="390" height="140" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 388px; height: 1px; padding-top: 90px; margin-left: 882px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><b>func main()</b> {</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// create command</font><br /></div><div><span style="">	</span>command := <b><font color="#00994d">cmd.NewDefaultKubectlCommand()</font></b></div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// run</font><br /></div><div><span style="">	</span>if err := <b><font color="#00994d">cli.RunNoErrOutput(command)</font></b>; err != nil {</div><div><span style="">		</span>// Pretty-print the error and exit with an error.</div><div><span style="">		</span>util.CheckErr(err)</div><div><span style="">	</span>}</div><div>}</div></pre></div></div></div></foreignObject><text x="882" y="94" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">func main() {...</text></switch></g><path d="M 735 216 L 735 193 L 1415 193 L 1415 216" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 735 216 L 735 353 L 1415 353 L 1415 216" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 735 216 L 1415 216" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1074.5" y="209">NewDefaultKubectlCommand (staging/src/k8s.io/kubectl/pkg/cmd/cmd.go)</text></g><rect x="735" y="213" width="680" height="140" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 678px; height: 1px; padding-top: 283px; margin-left: 737px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><font color="#7f00ff">// NewDefaultKubectlCommand creates the `kubectl` command with default arguments</font></div><div><b>func NewDefaultKubectlCommand()</b> *cobra.Command {</div><div><span style="">	</span>return <b><font color="#00994d">NewDefaultKubectlCommandWithArgs</font></b>(KubectlOptions{</div><div><span style="">		</span>PluginHandler: NewDefaultPluginHandler(plugin.ValidPluginFilenamePrefixes),</div><div><span style="">		</span>Arguments:     os.Args,</div><div><span style="">		</span>ConfigFlags:   defaultConfigFlags,</div><div><span style="">		</span>IOStreams:     genericclioptions.IOStreams{In: os.Stdin, Out: os.Stdout, ErrOut: os.Stderr},</div><div><span style="">	</span>})</div><div>}</div></pre></div></div></div></foreignObject><text x="737" y="287" fill="#000000" font-family="Helvetica" font-size="12px">// NewDefaultKubectlCommand creates the `kubectl` command with default arguments...</text></switch></g><path d="M 710 413 L 710 390 L 1440 390 L 1440 413" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 710 413 L 710 1001 L 1440 1001 L 1440 413" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 710 413 L 1440 413" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1074.5" y="406">NewDefaultKubectlCommandWithArgs (staging/src/k8s.io/kubectl/pkg/cmd/cmd.go)</text></g><rect x="710" y="410" width="730" height="591" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 728px; height: 1px; padding-top: 706px; margin-left: 712px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><font color="#7f00ff">// NewDefaultKubectlCommandWithArgs creates the `kubectl` command with arguments</font></div><div><b>func NewDefaultKubectlCommandWithArgs</b>(o KubectlOptions) *cobra.Command {</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// create command</font><br /></div><div><span style="">	</span><b><font color="#00994d">cmd := NewKubectlCommand(o)</font></b></div><div><br /></div><div><span style="">	</span>if o.PluginHandler == nil {</div><div><span style="">		</span>return cmd</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>if len(o.Arguments) &gt; 1 {</div><div><span style="">		</span>cmdPathPieces := o.Arguments[1:]</div><div><br /></div><div><font color="#7f00ff"><span style="">		</span>// only look for suitable extension executables if</font></div><div><font color="#7f00ff"><span style="">		</span>// the specified command does not already exist</font></div><div><span style="">		</span>if _, _, err := cmd.Find(cmdPathPieces); err != nil {</div><div><font color="#7f00ff"><span style="">			</span>// Also check the commands that will be added by Cobra.</font></div><div><font color="#7f00ff"><span style="">			</span>// These commands are only added once rootCmd.Execute() is called, so we</font></div><div><font color="#7f00ff"><span style="">			</span>// need to check them explicitly here.</font></div><div><span style="">			</span>var cmdName string // first "non-flag" arguments</div><div><span style="">			</span>for _, arg := range cmdPathPieces {</div><div><span style="">				</span>if !strings.HasPrefix(arg, "-") {</div><div><span style="">					</span>cmdName = arg</div><div><span style="">					</span>break</div><div><span style="">				</span>}</div><div><span style="">			</span>}</div><div><br /></div><div><span style="">			</span>switch cmdName {</div><div><span style="">			</span>case "help", cobra.ShellCompRequestCmd, cobra.ShellCompNoDescRequestCmd:</div><div><span style="">				</span><font color="#7f00ff">// Don't search for a plugin</font></div><div><span style="">			</span>default:</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// if can not find command, search and execute plugin command (kubectl-xxx) in the $PATH</font><br /></div><div><span style="">				</span>if err := <b><font color="#00994d">HandlePluginCommand</font></b>(o.PluginHandler, cmdPathPieces); err != nil {</div><div><span style="">					</span>fmt.Fprintf(o.IOStreams.ErrOut, "Error: %v\n", err)</div><div><span style="">					</span>os.Exit(1)</div><div><span style="">				</span>}</div><div><span style="">			</span>}</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>return cmd</div><div>}</div></pre></div></div></div></foreignObject><text x="712" y="709" fill="#000000" font-family="Helvetica" font-size="12px">// NewDefaultKubectlCommandWithArgs creates the `kubectl` command with arguments...</text></switch></g><path d="M 0 1083 L 0 1060 L 1000 1060 L 1000 1083" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 1083 L 0 3150 L 1000 3150 L 1000 1083" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 1083 L 1000 1083" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="499.5" y="1076">NewKubectlCommand (staging/src/k8s.io/kubectl/pkg/cmd/cmd.go)</text></g><rect x="0" y="1080" width="1000" height="2070" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 998px; height: 1px; padding-top: 2115px; margin-left: 2px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><font color="#7f00ff">// NewKubectlCommand creates the `kubectl` command and its nested children.</font></div><div><b>func NewKubectlCommand</b>(o KubectlOptions) *cobra.Command {</div><div><span style="">	</span>warningHandler := rest.NewWarningWriter(o.IOStreams.ErrOut, rest.WarningWriterOptions{Deduplicate: true, Color: term.AllowsColorOutput(o.IOStreams.ErrOut)})</div><div><span style="">	</span>warningsAsErrors := false</div><div><span style="">	</span>// Parent command to which all subcommands are added.</div><div><span style="">	</span>cmds := &amp;cobra.Command{</div><div><span style="">		</span>Use:   "kubectl",</div><div><span style="">		</span>Short: i18n.T("kubectl controls the Kubernetes cluster manager"),</div><div><span style="">		</span>Long: templates.LongDesc(`</div><div>      kubectl controls the Kubernetes cluster manager.</div><div><br /></div><div>      Find more information at:</div><div>            https://kubernetes.io/docs/reference/kubectl/overview/`),</div><div><span style="">	</span><span style="">	</span><font color="#7f00ff">// if run without arguments, print help, else falls into subcommand's Run function which invoke cmdutil.CheckErr or cmdutil.DefaultSubCommandRun</font><br /></div><div><span style="">		</span><b><font color="#00994d">Run: runHelp,</font></b></div><div><span style="">		</span>// Hook before and after Run initialize and write profiles to disk,</div><div><span style="">		</span>// respectively.</div><div><span style="">		</span>PersistentPreRunE: func(*cobra.Command, []string) error {</div><div><span style="">			</span>rest.SetDefaultWarningHandler(warningHandler)</div><div><span style="">			</span>return initProfiling()</div><div><span style="">		</span>},</div><div><span style="">		</span>PersistentPostRunE: func(*cobra.Command, []string) error {</div><div><span style="">			</span>if err := flushProfiling(); err != nil {</div><div><span style="">				</span>return err</div><div><span style="">			</span>}</div><div><span style="">			</span>if warningsAsErrors {</div><div><span style="">				</span>count := warningHandler.WarningCount()</div><div><span style="">				</span>switch count {</div><div><span style="">				</span>case 0:</div><div><span style="">					</span>// no warnings</div><div><span style="">				</span>case 1:</div><div><span style="">					</span>return fmt.Errorf("%d warning received", count)</div><div><span style="">				</span>default:</div><div><span style="">					</span>return fmt.Errorf("%d warnings received", count)</div><div><span style="">				</span>}</div><div><span style="">			</span>}</div><div><span style="">			</span>return nil</div><div><span style="">		</span>},</div><div><span style="">	</span>}</div><div><span style="">	</span>...<br /></div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// command groups, basic, deploy, cluster, troubleshooting, advance, setting</font><br /></div><div><span style="">	</span><b><font color="#00994d">groups := templates.CommandGroups</font></b>{</div><div><span style="">		</span>{</div><div><span style="">			</span><b><font color="#00994d">Message: "Basic Commands (Beginner)</font></b>:",</div><div><span style="">			</span>Commands: []*cobra.Command{</div><div><span style="">				</span>create.NewCmdCreate(f, o.IOStreams),</div><div><span style="">				</span>expose.NewCmdExposeService(f, o.IOStreams),</div><div><span style="">				</span>run.NewCmdRun(f, o.IOStreams),</div><div><span style="">				</span>set.NewCmdSet(f, o.IOStreams),</div><div><span style="">			</span>},</div><div><span style="">		</span>},</div><div><span style="">		</span>{</div><div><span style="">			</span><b><font color="#00994d">Message: "Basic Commands (Intermediate)</font></b>:",</div><div><span style="">			</span>Commands: []*cobra.Command{</div><div><span style="">				</span>explain.NewCmdExplain("kubectl", f, o.IOStreams),</div><div><span style="">				</span>getCmd,</div><div><span style="">				</span>edit.NewCmdEdit(f, o.IOStreams),</div><div><span style="">				</span>delete.NewCmdDelete(f, o.IOStreams),</div><div><span style="">			</span>},</div><div><span style="">		</span>},</div><div><span style="">		</span>{</div><div><span style="">			</span><font color="#00994d"><b>Message: "Deploy Commands</b></font>:",</div><div><span style="">			</span>Commands: []*cobra.Command{</div><div><span style="">				</span>rollout.NewCmdRollout(f, o.IOStreams),</div><div><span style="">				</span>scale.NewCmdScale(f, o.IOStreams),</div><div><span style="">				</span>autoscale.NewCmdAutoscale(f, o.IOStreams),</div><div><span style="">			</span>},</div><div><span style="">		</span>},</div><div><span style="">		</span>{</div><div><span style="">			</span><b><font color="#00994d">Message: "Cluster Management Commands</font></b>:",</div><div><span style="">			</span>Commands: []*cobra.Command{</div><div><span style="">				</span>certificates.NewCmdCertificate(f, o.IOStreams),</div><div><span style="">				</span>clusterinfo.NewCmdClusterInfo(f, o.IOStreams),</div><div><span style="">				</span>top.NewCmdTop(f, o.IOStreams),</div><div><span style="">				</span>drain.NewCmdCordon(f, o.IOStreams),</div><div><span style="">				</span>drain.NewCmdUncordon(f, o.IOStreams),</div><div><span style="">				</span>drain.NewCmdDrain(f, o.IOStreams),</div><div><span style="">				</span>taint.NewCmdTaint(f, o.IOStreams),</div><div><span style="">			</span>},</div><div><span style="">		</span>},</div><div><span style="">		</span>{</div><div><span style="">			</span><b><font color="#00994d">Message: "Troubleshooting and Debugging Commands</font></b>:",</div><div><span style="">			</span>Commands: []*cobra.Command{</div><div><span style="">				</span>describe.NewCmdDescribe("kubectl", f, o.IOStreams),</div><div><span style="">				</span>logs.NewCmdLogs(f, o.IOStreams),</div><div><span style="">				</span>attach.NewCmdAttach(f, o.IOStreams),</div><div><span style="">				</span>cmdexec.NewCmdExec(f, o.IOStreams),</div><div><span style="">				</span>portforward.NewCmdPortForward(f, o.IOStreams),</div><div><span style="">				</span>proxyCmd,</div><div><span style="">				</span>cp.NewCmdCp(f, o.IOStreams),</div><div><span style="">				</span>auth.NewCmdAuth(f, o.IOStreams),</div><div><span style="">				</span>debug.NewCmdDebug(f, o.IOStreams),</div><div><span style="">			</span>},</div><div><span style="">		</span>},</div><div><span style="">		</span>{</div><div><span style="">			</span><font color="#00994d"><b>Message: "Advanced Commands</b></font>:",</div><div><span style="">			</span>Commands: []*cobra.Command{</div><div><span style="">				</span>diff.NewCmdDiff(f, o.IOStreams),</div><div><span style="">				</span>apply.NewCmdApply("kubectl", f, o.IOStreams),</div><div><span style="">				</span>patch.NewCmdPatch(f, o.IOStreams),</div><div><span style="">				</span>replace.NewCmdReplace(f, o.IOStreams),</div><div><span style="">				</span>wait.NewCmdWait(f, o.IOStreams),</div><div><span style="">				</span>kustomize.NewCmdKustomize(o.IOStreams),</div><div><span style="">			</span>},</div><div><span style="">		</span>},</div><div><span style="">		</span>{</div><div><span style="">			</span><b><font color="#00994d">Message: "Settings Commands</font></b>:",</div><div><span style="">			</span>Commands: []*cobra.Command{</div><div><span style="">				</span>label.NewCmdLabel(f, o.IOStreams),</div><div><span style="">				</span>annotate.NewCmdAnnotate("kubectl", f, o.IOStreams),</div><div><span style="">				</span>completion.NewCmdCompletion(o.IOStreams.Out, ""),</div><div><span style="">			</span>},</div><div><span style="">		</span>},</div><div><span style="">	</span>}</div><div><span style="">	</span>groups.Add(cmds)</div><div><br /></div><div><span style="">	</span>filters := []string{"options"}</div><div><br /></div><div><span style="">	</span>// Hide the "alpha" subcommand if there are no alpha commands in this build.</div><div><span style="">	</span>alpha := NewCmdAlpha(f, o.IOStreams)</div><div><span style="">	</span>if !alpha.HasSubCommands() {</div><div><span style="">		</span>filters = append(filters, alpha.Name())</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>templates.ActsAsRootCommand(cmds, filters, groups...)</div><div><br /></div><div><span style="">	</span>utilcomp.SetFactoryForCompletion(f)</div><div><span style="">	</span>registerCompletionFuncForGlobalFlags(cmds, f)</div><div><br /></div><div><span style="">	</span>cmds.AddCommand(alpha)</div><div><span style="">	</span>cmds.AddCommand(cmdconfig.NewCmdConfig(clientcmd.NewDefaultPathOptions(), o.IOStreams))</div><div><span style="">	</span>cmds.AddCommand(plugin.NewCmdPlugin(o.IOStreams))</div><div><span style="">	</span>cmds.AddCommand(version.NewCmdVersion(f, o.IOStreams))</div><div><span style="">	</span>cmds.AddCommand(apiresources.NewCmdAPIVersions(f, o.IOStreams))</div><div><span style="">	</span>cmds.AddCommand(apiresources.NewCmdAPIResources(f, o.IOStreams))</div><div><span style="">	</span>cmds.AddCommand(options.NewCmdOptions(o.IOStreams.Out))</div><div><br /></div><div><span style="">	</span>// Stop warning about normalization of flags. That makes it possible to</div><div><span style="">	</span>// add the klog flags later.</div><div><span style="">	</span>cmds.SetGlobalNormalizationFunc(cliflag.WordSepNormalizeFunc)</div><div><span style="">	</span>return cmds</div><div>}</div></pre></div></div></div></foreignObject><text x="2" y="2119" fill="#000000" font-family="Helvetica" font-size="12px">// NewKubectlCommand creates the `kubectl` command and its nested children....</text></switch></g><path d="M 1200 1083 L 1200 1060 L 1980 1060 L 1980 1083" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1200 1083 L 1200 1690 L 1980 1690 L 1980 1083" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1200 1083 L 1980 1083" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1589.5" y="1076">HandlePluginCommand (staging/src/k8s.io/kubectl/pkg/cmd/cmd.go)</text></g><rect x="1200" y="1080" width="780" height="610" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 778px; height: 1px; padding-top: 1385px; margin-left: 1202px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><font color="#7f00ff">// if can not find subcommand, search plugin binaries (kubectl-xxx) in the $PATH </font></div><div><font color="#7f00ff">// HandlePluginCommand receives a pluginHandler and command-line arguments and attempts to find</font></div><div><font color="#7f00ff">// a plugin executable on the PATH that satisfies the given arguments.</font></div><div><b>func HandlePluginCommand</b>(pluginHandler PluginHandler, cmdArgs []string) error {</div><div><span style="">	</span>var remainingArgs []string // all "non-flag" arguments</div><div><span style="">	</span>for _, arg := range cmdArgs {</div><div><span style="">		</span>if strings.HasPrefix(arg, "-") {</div><div><span style="">			</span>break</div><div><span style="">		</span>}</div><div><span style="">		</span>remainingArgs = append(remainingArgs, strings.Replace(arg, "-", "_", -1))</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>if len(remainingArgs) == 0 {</div><div><span style="">		</span>// the length of cmdArgs is at least 1</div><div><span style="">		</span>return fmt.Errorf("flags cannot be placed before plugin name: %s", cmdArgs[0])</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>foundBinaryPath := ""</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// attempt to find binary, starting at longest possible name with given cmdArgs</font></div><div><span style="">	</span>for len(remainingArgs) &gt; 0 {</div><div><span style="">		</span>path, found := <b><font color="#00994d">pluginHandler.Lookup(strings.Join(remainingArgs, "-"))</font></b></div><div><span style="">		</span>if !found {</div><div><span style="">			</span>remainingArgs = remainingArgs[:len(remainingArgs)-1]</div><div><span style="">			</span>continue</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span>foundBinaryPath = path</div><div><span style="">		</span>break</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>if len(foundBinaryPath) == 0 {</div><div><span style="">		</span>return nil</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// invoke cmd binary relaying the current environment and args given</font></div><div><span style="">	</span>if err := <b><font color="#00994d">pluginHandler.Execute(foundBinaryPath, cmdArgs[len(remainingArgs):], os.Environ())</font></b>; err != nil {</div><div><span style="">		</span>return err</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>return nil</div><div>}</div></pre></div></div></div></foreignObject><text x="1202" y="1389" fill="#000000" font-family="Helvetica" font-size="12px">// if can not find subcommand, search plugin binaries (kubectl-xxx) in the $PATH...</text></switch></g><path d="M 1075 160 L 1075 186.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1075 191.88 L 1071.5 184.88 L 1075 186.63 L 1078.5 184.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1075 353 L 1075 383.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1075 388.88 L 1071.5 381.88 L 1075 383.63 L 1078.5 381.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1075 1001 L 1075 1030.5 L 500 1030.5 L 500 1053.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 500 1058.88 L 496.5 1051.88 L 500 1053.63 L 503.5 1051.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1075 1001 L 1075 1030.5 L 1590 1030.5 L 1590 1053.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1590 1058.88 L 1586.5 1051.88 L 1590 1053.63 L 1593.5 1051.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>