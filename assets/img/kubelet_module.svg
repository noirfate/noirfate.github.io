<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than diagrams.net -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="4251px" height="4196px" viewBox="-0.5 -0.5 4251 4196" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2022-08-04T03:12:19.657Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/19.0.3 Chrome/102.0.5005.63 Electron/19.0.3 Safari/537.36&quot; etag=&quot;KGUSVFz4od6YccGIgCHj&quot; version=&quot;19.0.3&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;NTXkSaUdDqDTP8oRYGCi&quot; name=&quot;第 1 页&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs/><g><path d="M 2230 23 L 2230 0 L 2580 0 L 2580 23" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 2230 23 L 2230 120 L 2580 120 L 2580 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2230 23 L 2580 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="2404.5" y="16">startKubelet (cmd/kubelet/app/server.go)</text></g><rect x="2230" y="20" width="350" height="100" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 348px; height: 1px; padding-top: 70px; margin-left: 2231px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><b>func startKubelet(k kubelet.Bootstrap, ...)</b> {<div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// start the kubelet</font></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">go k.Run(podCfg.Updates())</font></b></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="white-space: pre;">	</span>...<br /></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="2405" y="74" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">func startKubelet(k kubelet.Bootstrap, ...) {...</text></switch></g><path d="M 2055 585 L 1421.37 585" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1416.12 585 L 1423.12 581.5 L 1421.37 585 L 1423.12 588.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2055 183 L 2055 160 L 2755 160 L 2755 183" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2055 183 L 2055 1010 L 2755 1010 L 2755 183" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2055 183 L 2755 183" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="2404.5" y="176">Run (pkg/kubelet/kubelet.go)</text></g><rect x="2055" y="180" width="700" height="830" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 698px; height: 1px; padding-top: 595px; margin-left: 2056px;"><div data-drawio-colors="color: #00994D; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 153, 77); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><font color="#7f00ff">// Run starts the kubelet reacting to config updates</font><div style="text-align: justify;"><font color="#000000"><b>func (kl *Kubelet) Run(updates &lt;-chan kubetypes.PodUpdate)</b> {</font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>if kl.logServer == nil {</font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span><span style="color: rgb(0, 0, 0);">	</span><font color="#7f00ff">// redirect /logs/ request to file server</font><font color="#000000"><br /></font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">		</span><b style="">kl.logServer = http.StripPrefix("/logs/", http.FileServer(http.Dir("/var/log/")))</b></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>}</font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>if kl.kubeClient == nil {</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>klog.InfoS("No API server defined - no node status update will be sent")</font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>}</font></div><div style="text-align: justify;"><font color="#000000"><br /></font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span><font color="#7f00ff">// Start the cloud provider sync manager</font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>if kl.cloudResourceSyncManager != nil {</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>go kl.cloudResourceSyncManager.Run(wait.NeverStop)</font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>}</font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span><font color="#7f00ff">// <span style="background-color: initial;">initialize internal modules that do not require the container runtime to be up</span></font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span><b style="">if err := kl.initializeModules(); err != nil</b><font color="#000000"> {</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>kl.recorder.Eventf(kl.nodeRef, v1.EventTypeWarning, events.KubeletSetupFailed, err.Error())</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>klog.ErrorS(err, "Failed to initialize internal modules")</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>os.Exit(1)</font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>}</font></div><div style="text-align: justify;"><font color="#000000"><br /></font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span><font color="#7f00ff">// Start volume manager</font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span><b style="">go kl.volumeManager.Run(kl.sourcesReady, wait.NeverStop)</b></div><div style="text-align: justify;"><font color="#000000"><br /></font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>if kl.kubeClient != nil {</font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">		</span><font color="#7f00ff">// Introduce some small jittering to ensure that over time the requests won't start</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">		</span>// accumulating at approximately the same time from the set of nodes due to priority and</font></div><div style="text-align: justify;"><font color="#7f00ff">		// fairness effect.</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>go wait.JitterUntil(kl.syncNodeStatus, kl.nodeStatusUpdateFrequency, 0.04, true, wait.NeverStop)</font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0); white-space: pre;">	</span><span style="color: rgb(0, 0, 0); white-space: pre;">	</span><font color="#7f00ff">// check node cidr and update pods cidr corresponding to node</font><font color="#000000"><br /></font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">		</span><b style="">go kl.fastStatusUpdateOnce()</b></div><div style="text-align: justify;"><font color="#000000"><br /></font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">		</span><font color="#7f00ff">// start syncing lease</font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">		</span><b style="">go kl.nodeLeaseController.Run(wait.NeverStop)</b></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>}</font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0); white-space: pre;">	</span><font color="#7f00ff">// check container runtime status</font><font color="#000000"><br /></font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span><b style="">go wait.Until(kl.updateRuntimeUp, 5*time.Second, wait.NeverStop)</b></div><div style="text-align: justify;"><font color="#000000"><br /></font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span><font color="#7f00ff">// Set up iptables util rules</font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>if kl.makeIPTablesUtilChains {</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>kl.initNetworkUtil()</font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>}</font></div><div style="text-align: justify;"><font color="#000000"><br /></font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span><font color="#7f00ff">// Start component sync loops.</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="white-space: pre;">	</span>// Sync pod status with apiserver<br /></font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span><b style="">kl.statusManager.Start()</b></div><div style="text-align: justify;"><font color="#000000"><br /></font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span><font color="#7f00ff">// Start syncing RuntimeClasses if enabled</font><font color="#000000">.</font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>if kl.runtimeClassManager != nil {</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>kl.runtimeClassManager.Start(wait.NeverStop)</font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>}</font></div><div style="text-align: justify;"><font color="#000000"><br /></font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span><font color="#7f00ff">// Start the pod lifecycle event generator.</font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span><b style="">kl.pleg.Start()</b></div><div style="text-align: justify;"><span style="white-space: pre;">	</span><font color="#7f00ff">// main loop for processing changes</font><br /></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span><b style="">kl.syncLoop(updates, kl)</b></div><div style="text-align: justify;"><font color="#000000">}</font></div></pre></div></div></div></foreignObject><text x="2405" y="599" fill="#00994D" font-family="Helvetica" font-size="12px" text-anchor="middle">// Run starts the kubelet reacting to config updates...</text></switch></g><path d="M 2405 120 L 2405 153.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2405 158.88 L 2401.5 151.88 L 2405 153.63 L 2408.5 151.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 715 238 L 715 215 L 1415 215 L 1415 238" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 715 238 L 715 955 L 1415 955 L 1415 238" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 715 238 L 1415 238" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1064.5" y="231">initializeModules (pkg/kubelet/kubelet.go)</text></g><rect x="715" y="238" width="700" height="717" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 698px; height: 1px; padding-top: 597px; margin-left: 716px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><font color="#7f00ff">// initializeModules will initialize internal modules that do not require the container runtime to be up.</font><div style="text-align: justify;"><font color="#7f00ff">// Note that the modules here must not depend on modules that are not initialized here.</font></div><div style="text-align: justify;"><b>func (kl *Kubelet) initializeModules() error</b> {</div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// Prometheus metrics</font>.</div><div style="text-align: justify;"><span style="">	</span>metrics.Register(</div><div style="text-align: justify;"><span style="">		</span>collectors.NewVolumeStatsCollector(kl),</div><div style="text-align: justify;"><span style="">		</span>collectors.NewLogMetricsCollector(kl.StatsProvider.ListPodStats),</div><div style="text-align: justify;"><span style="">	</span>)</div><div style="text-align: justify;"><span style="">	</span>metrics.SetNodeName(kl.nodeName)</div><div style="text-align: justify;"><span style="">	</span>servermetrics.Register()</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// Setup filesystem directories</font>.</div><div style="text-align: justify;"><span style="">	</span>if err := <b><font color="#00994d">kl.setupDataDirs()</font></b>; err != nil {</div><div style="text-align: justify;"><span style="">		</span>return err</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// If the container logs directory does not exist, create it.</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span>// </font><span style="background-color: initial;"><font color="#7f00ff">ContainerLogsDir = </font></span><span style="background-color: initial;"><font color="#7f00ff">/var/log/containers and all files in </font></span><span style="background-color: initial;"><font color="#7f00ff">/var/log/containers are link to /var/log/pods</font></span></div><div style="text-align: justify;"><span style="">	</span>if _, err := os.Stat(ContainerLogsDir); err != nil {</div><div style="text-align: justify;"><span style="">		</span>if err := <b><font color="#00994d">kl.os.MkdirAll(ContainerLogsDir, 0755)</font></b>; err != nil {</div><div style="text-align: justify;"><span style="">			</span>return fmt.Errorf("failed to create directory %q: %v", ContainerLogsDir, err)</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// Start the image manager.</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span>// Actually </font><span style="background-color: initial;"><font color="#7f00ff">imageManager = </font></span><span style="background-color: initial;"><font color="#7f00ff">realImageGCManager = </font></span><span style="background-color:"><font color="#7f00ff">images.NewImageGCManager() (kubelet.go:698)</font></span></div><div style="text-align: justify;"><span style="background-color:"><font color="#7f00ff"><span style="">	</span>// start go routine to periodically collect image information<br /></font></span></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">kl.imageManager.Start()</font></b></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// Start the certificate manager if it was enabled via --feature-gates="</font><span style="background-color: initial;"><font color="#7f00ff">RotateKubeletServerCertificate=true</font></span><span style="color: rgb(127, 0, 255); background-color: initial; font-family: Helvetica;">"</span></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// serverCertificateManager = kubeletcertificate.NewKubeletServerCertificateManager (kubelet.go:705)</font></div><div style="text-align: justify;"><span style="">	</span>if kl.serverCertificateManager != nil {</div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">kl.serverCertificateManager.Start()</font></b></div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// Start out of memory watcher.</font></div><div style="text-align: justify;"><span style="">	</span>if kl.oomWatcher != nil {</div><div style="text-align: justify;"><span style="">		</span>if err := <b><font color="#00994d">kl.oomWatcher.Start(kl.nodeRef)</font></b>; err != nil {</div><div style="text-align: justify;"><span style="">			</span>return fmt.Errorf("failed to start OOM watcher: %w", err)</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// Start resource analyzer, periodically collect pod volume stats</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span>// </font><span style="background-color: initial;"><font color="#7f00ff">resourceAnalyzer = serverstats.NewResourceAnalyzer (kubelet.go:580)</font></span></div><div style="text-align: justify;"><span style="background-color: initial;"><font color="#7f00ff"><span style="">	</span>// resourceAnalyzer.Start() =&gt; </font></span><span style="background-color: initial;"><font color="#7f00ff">fsResourceAnalyzer.Start() in fs_resource_analyzer.go:61</font></span></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">kl.resourceAnalyzer.Start()</font></b></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>return nil</div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="1065" y="600" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">// initializeModules will initialize internal modules that do not require the container runtime to be up....</text></switch></g><path d="M 660 1043 L 660 1020 L 1470 1020 L 1470 1043" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 660 1043 L 660 1780 L 1470 1780 L 1470 1043" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 660 1043 L 1470 1043" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1064.5" y="1036">setupDataDirs (pkg/kubelet/kubelet.go)</text></g><rect x="660" y="1043" width="810" height="740" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 808px; height: 1px; padding-top: 1413px; margin-left: 661px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><font color="#7f00ff">// setupDataDirs creates:</font><div style="text-align: justify;"><font color="#7f00ff">// 1.  the root directory</font></div><div style="text-align: justify;"><font color="#7f00ff">// 2.  the pods directory</font></div><div style="text-align: justify;"><font color="#7f00ff">// 3.  the plugins directory</font></div><div style="text-align: justify;"><font color="#7f00ff">// 4.  the pod-resources directory</font></div><div style="text-align: justify;"><b>func (kl *Kubelet) setupDataDirs() error</b> {</div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// kl.rootDirectory = options.KubeletServer.RootDirectory = KubeletFlags.RootDirectory = defaultRootDir = "/var/lib/kubelet"</font><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">kl.rootDirectory = path.Clean(kl.rootDirectory)</font></b></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// pluginRegistrationDir = /var/lib/kubelet/plugins_registry</font><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">pluginRegistrationDir := kl.getPluginsRegistrationDir()</font></b></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// pluginsDir = /var/lib/kubelet/plugins</font><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">pluginsDir := kl.getPluginsDir()</font></b></div><div style="text-align: justify;"><span style="">	</span>if err := os.MkdirAll(kl.getRootDir(), 0750); err != nil {</div><div style="text-align: justify;"><span style="">		</span>return fmt.Errorf("error creating root directory: %v", err)</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// bind mount /var/lib/kubelet itself and make it shared, so it can be used between different mount namespaces</font><br /></div><div style="text-align: justify;"><span style="">	</span>if err := <b><font color="#00994d">kl.hostutil.MakeRShared(kl.getRootDir())</font></b>; err != nil {</div><div style="text-align: justify;"><span style="">		</span>return fmt.Errorf("error configuring root directory: %v", err)</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// kl.getPodsDir() = /var/lib/kubelet/pods</font><br /></div><div style="text-align: justify;"><span style="">	</span>if err := <b><font color="#00994d">os.MkdirAll(kl.getPodsDir(), 0750)</font></b>; err != nil {</div><div style="text-align: justify;"><span style="">		</span>return fmt.Errorf("error creating pods directory: %v", err)</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// kl.getPluginsDir() = /var/lib/kubelet/plugins</font><br /></div><div style="text-align: justify;"><span style="">	</span>if err := <b><font color="#00994d">os.MkdirAll(kl.getPluginsDir(), 0750)</font></b>; err != nil {</div><div style="text-align: justify;"><span style="">		</span>return fmt.Errorf("error creating plugins directory: %v", err)</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// kl.getPluginsRegistrationDir() = /var/lib/kubelet/plugins_registry</font><br /></div><div style="text-align: justify;"><span style="">	</span>if err := <b><font color="#00994d">os.MkdirAll(kl.getPluginsRegistrationDir(), 0750)</font></b>; err != nil {</div><div style="text-align: justify;"><span style="">		</span>return fmt.Errorf("error creating plugins registry directory: %v", err)</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// kl.getPodResourcesDir() = /var/lib/kubelet/pod-resources</font><br /></div><div style="text-align: justify;"><span style="">	</span>if err := <b><font color="#00994d">os.MkdirAll(kl.getPodResourcesDir()</font></b>, 0750); err != nil {</div><div style="text-align: justify;"><span style="">		</span>return fmt.Errorf("error creating podresources directory: %v", err)</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// KubeletPluginsDirSELinuxLabel = system_u:object_r:container_file_t:s0</font><br /></div><div style="text-align: justify;"><span style="">	</span>if selinux.GetEnabled() {</div><div style="text-align: justify;"><span style="">		</span>err := selinux.SetFileLabel(pluginRegistrationDir, config.KubeletPluginsDirSELinuxLabel)</div><div style="text-align: justify;"><span style="">		</span>if err != nil {</div><div style="text-align: justify;"><span style="">			</span>klog.InfoS("Unprivileged containerized plugins might not work, </div><div style="text-align: justify;"><span style="">	</span><span style="">	</span><span style="">	<span style="">	</span></span>could not set selinux context on plugin registration dir", "path", pluginRegistrationDir, "err", err)</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">		</span>err = selinux.SetFileLabel(pluginsDir, config.KubeletPluginsDirSELinuxLabel)</div><div style="text-align: justify;"><span style="">		</span>if err != nil {</div><div style="text-align: justify;"><span style="">			</span>klog.InfoS("Unprivileged containerized plugins might not work, </div><div style="text-align: justify;"><span style="">	</span><span style="">	</span><span style="">	<span style="">	</span></span>could not set selinux context on plugins dir", "path", pluginsDir, "err", err)</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span>return nil</div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="1065" y="1417" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">// setupDataDirs creates:...</text></switch></g><path d="M 0 1261.5 L 0 1238.5 L 570 1238.5 L 570 1261.5" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 1261.5 L 0 1501.5 L 570 1501.5 L 570 1261.5" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 1261.5 L 570 1261.5" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="284.5" y="1254.5">pkg/kubelet/config/defaults.go</text></g><rect x="0" y="1293" width="570" height="240" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 568px; height: 1px; padding-top: 1413px; margin-left: 1px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><span style="background-color: initial;">package config</span><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="background-color: initial;">// Defines sane defaults for the kubelet config.</span></div><div style="text-align: justify;"><span style="background-color: initial;">const (</span></div><div style="text-align: justify;"><span style="background-color: initial;">DefaultKubeletPodsDirName                = "pods"</span></div><div style="text-align: justify;"><span style="background-color: initial;">DefaultKubeletVolumesDirName              = "volumes"</span></div><div style="text-align: justify;"><span style="background-color: initial;">DefaultKubeletVolumeSubpathsDirName           = "volume-subpaths"</span></div><div style="text-align: justify;"><span style="background-color: initial;">DefaultKubeletVolumeDevicesDirName           = "volumeDevices"</span></div><div style="text-align: justify;"><span style="background-color: initial;">DefaultKubeletPluginsDirName              = "plugins"</span></div><div style="text-align: justify;"><span style="background-color: initial;">DefaultKubeletPluginsRegistrationDirName         = "plugins_registry"</span></div><div style="text-align: justify;"><span style="background-color: initial;">DefaultKubeletContainersDirName             = "containers"</span></div><div style="text-align: justify;"><span style="background-color: initial;">DefaultKubeletPluginContainersDirName          = "plugin-containers"</span></div><div style="text-align: justify;"><span style="background-color: initial;">DefaultKubeletPodResourcesDirName            = "pod-resources"</span></div><div style="text-align: justify;"><span style="background-color: initial;">KubeletPluginsDirSELinuxLabel              = "system_u:object_r:container_file_t:s0"</span></div><div style="text-align: justify;"><span style="background-color: initial;">)</span></div></pre></div></div></div></foreignObject><text x="285" y="1417" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">package config...</text></switch></g><path d="M 3500 23 L 3500 0 L 4140 0 L 4140 23" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3500 23 L 3500 320 L 4140 320 L 4140 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3500 23 L 4140 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="3819.5" y="16">Run (pkg/kubelet/volumemanager/volume_manager.go)</text></g><rect x="3500" y="20" width="640" height="300" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 638px; height: 1px; padding-top: 170px; margin-left: 3501px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><b>func (vm *volumeManager) Run(sourcesReady config.SourcesReady, stopCh &lt;-chan struct{})</b> {<div style="text-align: justify;"><span style="">	</span>defer runtime.HandleCrash()</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>if vm.kubeClient != nil {</div><div style="text-align: justify;"><span style="">		</span>// start informer for CSIDriver</div><div style="text-align: justify;"><span style="">		</span>go vm.volumePluginMgr.Run(stopCh)</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span>// desiredStateOfWorldPopulator runs an asynchronous periodic loop to<br /></font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span>// populate the desiredStateOfWorld using the kubelet PodManager</font><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">go vm.desiredStateOfWorldPopulator.Run(sourcesReady, stopCh)</font></b></div><div style="text-align: justify;"><span style="">	</span>klog.V(2).InfoS("The desired_state_of_world populator starts")</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>klog.InfoS("Starting Kubelet Volume Manager")</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">go vm.reconciler.Run(stopCh)</font></b></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>metrics.Register(vm.actualStateOfWorld, vm.desiredStateOfWorld, vm.volumePluginMgr)</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>&lt;-stopCh</div><div style="text-align: justify;"><span style="">	</span>klog.InfoS("Shutting down Kubelet Volume Manager")</div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="3820" y="174" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">func (vm *volumeManager) Run(sourcesReady config.SourcesReady, stopCh &lt;-chan struct{}) {...</text></switch></g><path d="M 3565 373 L 3565 350 L 4075 350 L 4075 373" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3565 373 L 3565 430 L 4075 430 L 4075 373" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3565 373 L 4075 373" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="3819.5" y="366">Run (pkg/kubelet/volumemanager/reconciler/reconciler.go)</text></g><rect x="3565" y="370" width="510" height="60" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 508px; height: 1px; padding-top: 400px; margin-left: 3566px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><b>func (rc *reconciler) Run(stopCh &lt;-chan struct{})</b> {<div style="text-align: justify;"><span style="">	</span>wait.Until(<b><font color="#00994d">rc.reconciliationLoopFunc()</font></b>, rc.loopSleepDuration, stopCh)</div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="3820" y="404" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">func (rc *reconciler) Run(stopCh &lt;-chan struct{}) {...</text></switch></g><path d="M 3430 486 L 3430 463 L 4210 463 L 4210 486" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3430 486 L 3430 683 L 4210 683 L 4210 486" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3430 486 L 4210 486" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="3819.5" y="479">reconciliationLoopFunc (pkg/kubelet/volumemanager/reconciler/reconciler.go)</text></g><rect x="3431" y="483" width="780" height="200" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 778px; height: 1px; padding-top: 583px; margin-left: 3432px;"><div data-drawio-colors="color: #00994D; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 153, 77); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><font color="#000000"><b>func (rc *reconciler) reconciliationLoopFunc()</b> func() {</font><div style="text-align: justify;"><font color="#000000"><span style="">	</span>return func() {</font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">		</span><b style="">rc.reconcile()</b></div><div style="text-align: justify;"><font color="#000000"><br /></font></div><div style="text-align: justify;"><font color="#7f00ff">		// Sync the state with the reality once after all existing pods are added to the desired state from all sources.</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">		</span>// Otherwise, the reconstruct process may clean up pods' volumes that are still in use because</font></div><div style="text-align: justify;"><font color="#7f00ff">		// desired state of world does not contain a complete list of pods.</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>if rc.populatorHasAddedPods() &amp;&amp; !rc.StatesHasBeenSynced() {</font></div><div style="text-align: justify;"><font color="#000000"><span style="">			</span>klog.InfoS("Reconciler: start to sync state")</font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">			</span><b style="">rc.sync()</b></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>}</font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>}</font></div><div style="text-align: justify;"><font color="#000000">}</font></div></pre></div></div></div></foreignObject><text x="3821" y="587" fill="#00994D" font-family="Helvetica" font-size="12px" text-anchor="middle">func (rc *reconciler) reconciliationLoopFunc() func() {...</text></switch></g><path d="M 3500 733 L 3500 710 L 4250 710 L 4250 733" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3500 733 L 3500 1250 L 4250 1250 L 4250 733" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3500 733 L 4250 733" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="3874.5" y="726">Start (pkg/kubelet/status/status_manager.go)</text></g><rect x="3500" y="730" width="750" height="520" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 748px; height: 1px; padding-top: 990px; margin-left: 3501px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><b>func (m *manager) Start()</b> {<div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// Don't start the status manager if we don't have a client. This will happen</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span>// on the master, where the kubelet is responsible for bootstrapping the pods</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span>// of the master components.</font></div><div style="text-align: justify;"><span style="">	</span>if m.kubeClient == nil {</div><div style="text-align: justify;"><span style="">		</span>klog.InfoS("Kubernetes client is nil, not starting status manager")</div><div style="text-align: justify;"><span style="">		</span>return</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>klog.InfoS("Starting to sync pod status with apiserver")</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">//nolint:staticcheck // SA1015 Ticker can leak since this is only called once and doesn't handle termination.</font></div><div style="text-align: justify;"><span style="">	</span>syncTicker := time.NewTicker(syncPeriod).C</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// syncPod and syncBatch share the same go routine to avoid sync races.</font></div><div style="text-align: justify;"><span style="">	</span>go wait.Forever(func() {</div><div style="text-align: justify;"><span style="">		</span>for {</div><div style="text-align: justify;"><span style="">			</span>select {</div><div style="text-align: justify;"><span style="">			</span>case syncRequest := &lt;-m.podStatusChannel:</div><div style="text-align: justify;"><span style="">				</span>klog.V(5).InfoS("Status Manager: syncing pod with status from podStatusChannel",</div><div style="text-align: justify;"><span style="">					</span>"podUID", syncRequest.podUID,</div><div style="text-align: justify;"><span style="">					</span>"statusVersion", syncRequest.status.version,</div><div style="text-align: justify;"><span style="">					</span>"status", syncRequest.status.status)</div><div style="text-align: justify;"><span style="">				</span><b><font color="#00994d">m.syncPod(syncRequest.podUID, syncRequest.status)</font></b></div><div style="text-align: justify;"><span style="">			</span>case &lt;-syncTicker:</div><div style="text-align: justify;"><span style="">				</span>klog.V(5).InfoS("Status Manager: syncing batch")</div><div style="text-align: justify;"><span style="">				</span>// remove any entries in the status channel since the batch will handle them</div><div style="text-align: justify;"><span style="">				</span>for i := len(m.podStatusChannel); i &gt; 0; i-- {</div><div style="text-align: justify;"><span style="">					</span>&lt;-m.podStatusChannel</div><div style="text-align: justify;"><span style="">				</span>}</div><div style="text-align: justify;"><span style="">				</span><b><font color="#00994d">m.syncBatch()</font></b></div><div style="text-align: justify;"><span style="">			</span>}</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">	</span>}, 0)</div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="3875" y="994" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">func (m *manager) Start() {...</text></switch></g><path d="M 1645 1172 L 1645 1149 L 2055 1149 L 2055 1172" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1645 1172 L 1645 1239 L 2055 1239 L 2055 1172" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1645 1172 L 2055 1172" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1849.5" y="1165">Start (pkg/kubelet/pleg/generic.go)</text></g><rect x="1645" y="1169" width="410" height="70" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 408px; height: 1px; padding-top: 1204px; margin-left: 1646px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><font color="#7f00ff">// Start spawns a goroutine to relist periodically.</font><div style="text-align: justify;"><b>func (g *GenericPLEG) Start()</b> {</div><div style="text-align: justify;"><span style="">	</span>go wait.Until(<b><font color="#00994d">g.relist</font></b>, g.relistPeriod, wait.NeverStop)</div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="1850" y="1208" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">// Start spawns a goroutine to relist periodically....</text></switch></g><path d="M 1065 955 L 1065 1013.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1065 1018.88 L 1061.5 1011.88 L 1065 1013.63 L 1068.5 1011.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 570 1413 L 653.63 1413" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 658.88 1413 L 651.88 1416.5 L 653.63 1413 L 651.88 1409.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3820 320 L 3820 343.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3820 348.88 L 3816.5 341.88 L 3820 343.63 L 3823.5 341.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3820 430 L 3820 450 L 3820 443 L 3820 456.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3820 461.88 L 3816.5 454.88 L 3820 456.63 L 3823.5 454.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2755 595 L 3127.5 595 L 3127.5 170 L 3493.63 170" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3498.88 170 L 3491.88 173.5 L 3493.63 170 L 3491.88 166.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2755 595 L 3127.5 595 L 3127.5 1009.8 L 3493.63 1009.76" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3498.88 1009.76 L 3491.88 1013.26 L 3493.63 1009.76 L 3491.88 1006.26 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1512.5 1343 L 1512.5 1320 L 2187.5 1320 L 2187.5 1343" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1512.5 1343 L 1512.5 2270 L 2187.5 2270 L 2187.5 1343" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1512.5 1343 L 2187.5 1343" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1849.5" y="1336">relist (pkg/kubelet/pleg/generic.go)</text></g><rect x="1512.5" y="1340" width="675" height="930" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 673px; height: 1px; padding-top: 1805px; margin-left: 1514px;"><div data-drawio-colors="color: #7F00FF; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(127, 0, 255); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;">// relist queries the container runtime for list of pods/containers, compare<div style="text-align: justify;">// with the internal pods/containers, and generates events accordingly.</div><div style="text-align: justify;"><font color="#000000"><b>func (g *GenericPLEG) relist()</b> {</font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>klog.V(5).InfoS("GenericPLEG: Relisting")</font></div><div style="text-align: justify;"><span style="">	</span>...<br /></div><div style="text-align: justify;"><font color="#000000"><br /></font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span>// Get all the pods.</div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span><b style=""><font color="#00994d">podList, err := g.runtime.GetPods(true)</font></b></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>if err != nil {</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>klog.ErrorS(err, "GenericPLEG: Unable to retrieve pods")</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>return</font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>}</font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>...<br /></font></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span><b style=""><font color="#00994d">pods := kubecontainer.Pods(podList)</font></b></div><div style="text-align: justify;"><span style="">	</span>...<br /></div><div style="text-align: justify;"><font color="#000000"><br /></font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span>// Compare the old and the current pods, and generate events.</div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>eventsByPodID := map[types.UID][]*PodLifecycleEvent{}</font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>for pid := range g.podRecords {</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>oldPod := g.podRecords.getOld(pid)</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>pod := g.podRecords.getCurrent(pid)</font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">		</span>// Get all containers in the old and the new pod.</div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>allContainers := getContainersFromPods(oldPod, pod)</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>for _, container := range allContainers {</font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">			</span><b style=""><font color="#00994d">events := computeEvents(oldPod, pod, &amp;container.ID)</font></b></div><div style="text-align: justify;"><font color="#000000"><span style="">			</span>for _, e := range events {</font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">				</span><b style=""><font color="#00994d">updateEvents(eventsByPodID, e)</font></b></div><div style="text-align: justify;"><font color="#000000"><span style="">			</span>}</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>}</font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>}</font></div><div style="text-align: justify;"><font color="#000000"><br /></font></div><div style="text-align: justify;"><span style="">	</span>...<br /></div><div style="text-align: justify;"><font color="#000000"><br /></font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span>// If there are events associated with a pod, we should update the podCache.</div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>for pid, events := range eventsByPodID {</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>pod := g.podRecords.getCurrent(pid)</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>if g.cacheEnabled() {</font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">			</span><font color="#000000">if err := </font><b style=""><font color="#00994d">g.updateCache(pod, pid)</font></b><font color="#000000">; err != nil {</font></div><div style="text-align: justify;"><span style="">	</span><span style="">	</span><span style="">	</span><span style="">	</span>...<br /></div><div style="text-align: justify;"><font color="#000000"><span style="">				</span>continue</font></div><div style="text-align: justify;"><font color="#000000"><span style="">			</span>} else {</font></div><div style="text-align: justify;"><font color="#000000"><span style="">				</span>delete(g.podsToReinspect, pid)</font></div><div style="text-align: justify;"><font color="#000000"><span style="">			</span>}</font></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>}</font></div><div style="text-align: justify;"><span style="">	</span><span style="">	</span>...<br /></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>for i := range events {</font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">			</span>// Filter out events that are not reliable and no other components use yet.</div><div style="text-align: justify;"><font color="#000000"><span style="">			</span>if events[i].Type == ContainerChanged {</font></div><div style="text-align: justify;"><font color="#000000"><span style="">				</span>continue</font></div><div style="text-align: justify;"><font color="#000000"><span style="">			</span>}</font></div><div style="text-align: justify;"><font color="#000000"><span style="">			</span>select {</font></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">	</span><span style="color: rgb(0, 0, 0);">	</span><span style="color: rgb(0, 0, 0);">	</span>// send event to syncLoop, it will consume it at <span style="background-color: initial;">syncLoopIteration kubelet.go:2100</span></div><div style="text-align: justify;"><span style="color: rgb(0, 0, 0);">			</span><b style=""><font color="#00994d">case g.eventChannel &lt;- events[i]:</font></b></div><div style="text-align: justify;"><font color="#000000"><span style="">			</span>default:</font></div><div style="text-align: justify;"><font color="#000000"><span style="">				</span>metrics.PLEGDiscardEvents.Inc()</font></div><div style="text-align: justify;"><font color="#000000"><span style="">				</span>klog.ErrorS(nil, "Event channel is full, discard this relist() cycle event")</font></div><div style="text-align: justify;"><font color="#000000"><span style="">			</span>}</font></div><div style="text-align: justify;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>...<br /></div><div style="text-align: justify;"><font color="#000000"><span style="">		</span>}</font></div><div style="text-align: justify;"><font color="#000000"><span style="">	</span>}</font></div><div style="text-align: justify;"><span style="white-space: pre;">	</span>...<br /></div><div style="text-align: justify;"><font color="#000000">}</font></div></pre></div></div></div></foreignObject><text x="1850" y="1809" fill="#7F00FF" font-family="Helvetica" font-size="12px" text-anchor="middle">// relist queries the container runtime for list of pods/containers, compare...</text></switch></g><path d="M 2690 1172 L 2690 1149 L 3410 1149 L 3410 1172" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2690 1172 L 2690 1849 L 3410 1849 L 3410 1172" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2690 1172 L 3410 1172" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="3049.5" y="1165">syncLoop (pkg/kubelet/kubelet.go)</text></g><rect x="2690" y="1172" width="720" height="677" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 718px; height: 1px; padding-top: 1511px; margin-left: 2691px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><font color="#7f00ff">// syncLoop is the main loop for processing changes. It watches for changes from</font><div style="text-align: justify;"><font color="#7f00ff">// three channels (file, apiserver, and http) and creates a union of them. For</font></div><div style="text-align: justify;"><font color="#7f00ff">// any new change seen, will run a sync against desired state and running state. If</font></div><div style="text-align: justify;"><font color="#7f00ff">// no changes are seen to the configuration, will synchronize the last known desired</font></div><div style="text-align: justify;"><font color="#7f00ff">// state every sync-frequency seconds. Never returns.</font></div><div style="text-align: justify;"><b>func (kl *Kubelet) syncLoop(updates &lt;-chan kubetypes.PodUpdate, handler SyncHandler)</b> {</div><div style="text-align: justify;"><span style="">	</span>klog.InfoS("Starting kubelet main sync loop")</div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// The syncTicker wakes up kubelet to checks if there are any pod workers</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span>// that need to be sync'd. A one-second period is sufficient because the</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span>// sync interval is defaulted to 10s.</font></div><div style="text-align: justify;"><span style="">	</span>syncTicker := time.NewTicker(time.Second)</div><div style="text-align: justify;"><span style="">	</span>defer syncTicker.Stop()</div><div style="text-align: justify;"><span style="">	</span>housekeepingTicker := time.NewTicker(housekeepingPeriod)</div><div style="text-align: justify;"><span style="">	</span>defer housekeepingTicker.Stop()</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">plegCh := kl.pleg.Watch()</font></b></div><div style="text-align: justify;"><span style="">	</span>const (</div><div style="text-align: justify;"><span style="">		</span>base   = 100 * time.Millisecond</div><div style="text-align: justify;"><span style="">		</span>max    = 5 * time.Second</div><div style="text-align: justify;"><span style="">		</span>factor   = 2</div><div style="text-align: justify;"><span style="">	</span>)</div><div style="text-align: justify;"><span style="">	</span>duration := base</div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// Responsible for checking limits in resolv.conf</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span>// The limits do not have anything to do with individual pods</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span>// Since this is called in syncLoop, we don't need to call it anywhere else</font></div><div style="text-align: justify;"><span style="">	</span>if kl.dnsConfigurer != nil &amp;&amp; kl.dnsConfigurer.ResolverConfig != "" {</div><div style="text-align: justify;"><span style="">		</span>kl.dnsConfigurer.CheckLimitsForResolvConf()</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>for {</div><div style="text-align: justify;"><span style="">		</span>if err := kl.runtimeState.runtimeErrors(); err != nil {</div><div style="text-align: justify;"><span style="">			</span>klog.ErrorS(err, "Skipping pod synchronization")</div><div style="text-align: justify;"><span style="">			</span><font color="#7f00ff">// exponential backoff</font></div><div style="text-align: justify;"><span style="">			</span>time.Sleep(duration)</div><div style="text-align: justify;"><span style="">			</span>duration = time.Duration(math.Min(float64(max), factor*float64(duration)))</div><div style="text-align: justify;"><span style="">			</span>continue</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">		</span><font color="#7f00ff">// reset backoff if we have a success</font></div><div style="text-align: justify;"><span style="">		</span>duration = base</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">		</span>kl.syncLoopMonitor.Store(kl.clock.Now())</div><div style="text-align: justify;"><span style="">		</span>if !<b><font color="#00994d">kl.syncLoopIteration(updates, handler, syncTicker.C, housekeepingTicker.C, plegCh)</font></b> {</div><div style="text-align: justify;"><span style="">			</span>break</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">		</span>kl.syncLoopMonitor.Store(kl.clock.Now())</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="3050" y="1514" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">// syncLoop is the main loop for processing changes. It watches for changes from...</text></switch></g><path d="M 2525 1963 L 2525 1940 L 3575 1940 L 3575 1963" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2525 1963 L 2525 4190 L 3575 4190 L 3575 1963" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2525 1963 L 3575 1963" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="3049.5" y="1956">syncLoopIteration (pkg/kubelet/kubelet.go)</text></g><rect x="2525" y="1960" width="1050" height="2230" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1048px; height: 1px; padding-top: 3075px; margin-left: 2526px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><font color="#7f00ff">// syncLoopIteration reads from various channels and dispatches pods to the</font><div style="text-align: justify;"><font color="#7f00ff">// given handler.</font></div><div style="text-align: justify;"><font color="#7f00ff">//</font></div><div style="text-align: justify;"><font color="#7f00ff">// Arguments:</font></div><div style="text-align: justify;"><font color="#7f00ff">// 1.  configCh:       a channel to read config events from</font></div><div style="text-align: justify;"><font color="#7f00ff">// 2.  handler:        the SyncHandler to dispatch pods to</font></div><div style="text-align: justify;"><font color="#7f00ff">// 3.  syncCh:         a channel to read periodic sync events from</font></div><div style="text-align: justify;"><font color="#7f00ff">// 4.  housekeepingCh: a channel to read housekeeping events from</font></div><div style="text-align: justify;"><font color="#7f00ff">// 5.  plegCh:         a channel to read PLEG updates from</font></div><div style="text-align: justify;"><font color="#7f00ff">//</font></div><div style="text-align: justify;"><font color="#7f00ff">// Events are also read from the kubelet liveness manager's update channel.</font></div><div style="text-align: justify;"><font color="#7f00ff">//</font></div><div style="text-align: justify;"><font color="#7f00ff">// The workflow is to read from one of the channels, handle that event, and</font></div><div style="text-align: justify;"><font color="#7f00ff">// update the timestamp in the sync loop monitor.</font></div><div style="text-align: justify;"><font color="#7f00ff">//</font></div><div style="text-align: justify;"><font color="#7f00ff">// Here is an appropriate place to note that despite the syntactical</font></div><div style="text-align: justify;"><font color="#7f00ff">// similarity to the switch statement, the case statements in a select are</font></div><div style="text-align: justify;"><font color="#7f00ff">// evaluated in a pseudorandom order if there are multiple channels ready to</font></div><div style="text-align: justify;"><font color="#7f00ff">// read from when the select is evaluated.  In other words, case statements</font></div><div style="text-align: justify;"><font color="#7f00ff">// are evaluated in random order, and you can not assume that the case</font></div><div style="text-align: justify;"><font color="#7f00ff">// statements evaluate in order if multiple channels have events.</font></div><div style="text-align: justify;"><font color="#7f00ff">//</font></div><div style="text-align: justify;"><font color="#7f00ff">// With that in mind, in truly no particular order, the different channels</font></div><div style="text-align: justify;"><font color="#7f00ff">// are handled as follows:</font></div><div style="text-align: justify;"><font color="#7f00ff">//</font></div><div style="text-align: justify;"><font color="#7f00ff">// * configCh: dispatch the pods for the config change to the appropriate</font></div><div style="text-align: justify;"><font color="#7f00ff">//             handler callback for the event type</font></div><div style="text-align: justify;"><font color="#7f00ff">// * plegCh: update the runtime cache; sync pod</font></div><div style="text-align: justify;"><font color="#7f00ff">// * syncCh: sync all pods waiting for sync</font></div><div style="text-align: justify;"><font color="#7f00ff">// * housekeepingCh: trigger cleanup of pods</font></div><div style="text-align: justify;"><font color="#7f00ff">// * health manager: sync pods that have failed or in which one or more</font></div><div style="text-align: justify;"><font color="#7f00ff">//                     containers have failed health checks</font></div><div style="text-align: justify;"><b>func (kl *Kubelet) syncLoopIteration</b>(configCh &lt;-chan kubetypes.PodUpdate, handler SyncHandler,</div><div style="text-align: justify;"><span style="">	</span>syncCh &lt;-chan time.Time, housekeepingCh &lt;-chan time.Time, plegCh &lt;-chan *pleg.PodLifecycleEvent) bool {</div><div style="text-align: justify;"><span style="">	</span>select {</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">case u, open := &lt;-configCh:</font></b></div><div style="text-align: justify;"><span style="">		</span><font color="#7f00ff">// Update from a config source; dispatch it to the right handler callback</font></div><div style="text-align: justify;"><span style="">		</span><font color="#7f00ff">// config source is created at </font><span style="background-color: initial;"><font color="#7f00ff">makePodSourceConfig() kubelet.go:249</font></span></div><div style="text-align: justify;"><span style="background-color: initial;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// config source contains: </font></span></div><div style="text-align: justify;"><span style="background-color: initial;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// file config source in default: </font></span><span style="background-color: initial;"><font color="#7f00ff">kubeCfg.StaticPodPath = DefaultManifestsDir = "/etc/kubernetes/manifests"</font></span></div><div style="text-align: justify;"><span style="background-color: initial;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// url config source: default is "", can be specified by --</font></span><span style="background-color: initial;"><font color="#7f00ff">manifest-url</font></span></div><div style="text-align: justify;"><span style="background-color: initial;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// apiserver source: created by </font></span><span style="background-color: initial;"><font color="#7f00ff">NewSourceApiserver() at pkg/kubelet/config/apiserver.go:37</font></span></div><div style="text-align: justify;"><span style="">		</span>if !open {</div><div style="text-align: justify;"><span style="">			</span>klog.ErrorS(nil, "Update channel is closed, exiting the sync loop")</div><div style="text-align: justify;"><span style="">			</span>return false</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">	</span><span style="">	</span><font color="#7f00ff">// call podManager to do corresponding action</font><br /></div><div style="text-align: justify;"><span style="">		</span>switch u.Op {</div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">case kubetypes.ADD:</font></b></div><div style="text-align: justify;"><span style="">			</span>klog.V(2).InfoS("SyncLoop ADD", "source", u.Source, "pods", klog.KObjs(u.Pods))</div><div style="text-align: justify;"><font color="#7f00ff"><span style="">			</span>// After restarting, kubelet will get all existing pods through</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">			</span>// ADD as if they are new pods. These pods will then go through the</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">			</span>// admission process and *may* be rejected. This can be resolved</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">			</span>// once we have checkpointing.</font></div><div style="text-align: justify;"><span style="">			</span>handler.HandlePodAdditions(u.Pods)</div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">case kubetypes.UPDATE:</font></b></div><div style="text-align: justify;"><span style="">			</span>klog.V(2).InfoS("SyncLoop UPDATE", "source", u.Source, "pods", klog.KObjs(u.Pods))</div><div style="text-align: justify;"><span style="">			</span>handler.HandlePodUpdates(u.Pods)</div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">case kubetypes.REMOVE:</font></b></div><div style="text-align: justify;"><span style="">			</span>klog.V(2).InfoS("SyncLoop REMOVE", "source", u.Source, "pods", klog.KObjs(u.Pods))</div><div style="text-align: justify;"><span style="">			</span>handler.HandlePodRemoves(u.Pods)</div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">case kubetypes.RECONCILE:</font></b></div><div style="text-align: justify;"><span style="">			</span>klog.V(4).InfoS("SyncLoop RECONCILE", "source", u.Source, "pods", klog.KObjs(u.Pods))</div><div style="text-align: justify;"><span style="">			</span>handler.HandlePodReconcile(u.Pods)</div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">case kubetypes.DELETE:</font></b></div><div style="text-align: justify;"><span style="">			</span>klog.V(2).InfoS("SyncLoop DELETE", "source", u.Source, "pods", klog.KObjs(u.Pods))</div><div style="text-align: justify;"><span style="">			</span><font color="#7f00ff">// DELETE is treated as a UPDATE because of graceful deletion.</font></div><div style="text-align: justify;"><span style="">			</span>handler.HandlePodUpdates(u.Pods)</div><div style="text-align: justify;"><span style="">		</span>case kubetypes.SET:</div><div style="text-align: justify;"><span style="">			</span><font color="#7f00ff">// TODO: Do we want to support this?</font></div><div style="text-align: justify;"><span style="">			</span>klog.ErrorS(nil, "Kubelet does not support snapshot update")</div><div style="text-align: justify;"><span style="">		</span>default:</div><div style="text-align: justify;"><span style="">			</span>klog.ErrorS(nil, "Invalid operation type received", "operation", u.Op)</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">		</span>kl.sourcesReady.AddSource(u.Source)</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">case e := &lt;-plegCh:</font></b></div><div style="text-align: justify;"><span style="">		</span>if e.Type == pleg.ContainerStarted {</div><div style="text-align: justify;"><span style="">			</span><font color="#7f00ff">// record the most recent time we observed a container start for this pod.</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">			</span>// this lets us selectively invalidate the runtimeCache when processing a delete for this pod</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">			</span>// to make sure we don't miss handling graceful termination for containers we reported as having started.</font></div><div style="text-align: justify;"><span style="">			</span>kl.lastContainerStartedTime.Add(e.ID, time.Now())</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">	</span><span style="">	</span><font color="#7f00ff">// e.Type != pleg.ContainerRemoved</font><br /></div><div style="text-align: justify;"><span style="">		</span>if <b><font color="#00994d">isSyncPodWorthy(e)</font></b> {</div><div style="text-align: justify;"><span style="">			</span><font color="#7f00ff">// PLEG event for a pod; sync it.</font></div><div style="text-align: justify;"><span style="">			</span>if pod, ok := kl.podManager.GetPodByUID(e.ID); ok {</div><div style="text-align: justify;"><span style="">				</span>klog.V(2).InfoS("SyncLoop (PLEG): event for pod", "pod", klog.KObj(pod), "event", e)</div><div style="text-align: justify;"><span style="">				</span><b><font color="#00994d">handler.HandlePodSyncs([]*v1.Pod{pod})</font></b></div><div style="text-align: justify;"><span style="">			</span>} else {</div><div style="text-align: justify;"><span style="">				</span><font color="#7f00ff">// If the pod no longer exists, ignore the event.</font></div><div style="text-align: justify;"><span style="">				</span>klog.V(4).InfoS("SyncLoop (PLEG): pod does not exist, ignore irrelevant event", "event", e)</div><div style="text-align: justify;"><span style="">			</span>}</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">		</span>if e.Type == pleg.ContainerDied {</div><div style="text-align: justify;"><span style="">			</span>if containerID, ok := e.Data.(string); ok {</div><div style="text-align: justify;"><span style="">				</span>kl.cleanUpContainersInPod(e.ID, containerID)</div><div style="text-align: justify;"><span style="">			</span>}</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">case &lt;-syncCh:</font></b></div><div style="text-align: justify;"><span style="">		</span><font color="#7f00ff">// syncCh is a timer</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// Sync pods waiting for sync</font></div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">podsToSync := kl.getPodsToSync()</font></b></div><div style="text-align: justify;"><span style="">		</span>if len(podsToSync) == 0 {</div><div style="text-align: justify;"><span style="">			</span>break</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">		</span>klog.V(4).InfoS("SyncLoop (SYNC) pods", "total", len(podsToSync), "pods", klog.KObjs(podsToSync))</div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">handler.HandlePodSyncs(podsToSync)</font></b></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// livenessManager, readinessManager, startupManager all are proberesults.NewManager() at pkg/kubelet/prober/results/results_manager.go:99</font><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">case update := &lt;-kl.livenessManager.Updates():</font></b></div><div style="text-align: justify;"><span style="">		</span>if update.Result == proberesults.Failure {</div><div style="text-align: justify;"><span style="">			</span>handleProbeSync(kl, update, handler, "liveness", "unhealthy")</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">case update := &lt;-kl.readinessManager.Updates():</font></b></div><div style="text-align: justify;"><span style="">		</span>ready := update.Result == proberesults.Success</div><div style="text-align: justify;"><span style="">		</span>kl.statusManager.SetContainerReadiness(update.PodUID, update.ContainerID, ready)</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">		</span>status := ""</div><div style="text-align: justify;"><span style="">		</span>if ready {</div><div style="text-align: justify;"><span style="">			</span>status = "ready"</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">		</span>handleProbeSync(kl, update, handler, "readiness", status)</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">case update := &lt;-kl.startupManager.Updates():</font></b></div><div style="text-align: justify;"><span style="">		</span>started := update.Result == proberesults.Success</div><div style="text-align: justify;"><span style="">		</span>kl.statusManager.SetContainerStartup(update.PodUID, update.ContainerID, started)</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">		</span>status := "unhealthy"</div><div style="text-align: justify;"><span style="">		</span>if started {</div><div style="text-align: justify;"><span style="">			</span>status = "started"</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">		</span>handleProbeSync(kl, update, handler, "startup", status)</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">case &lt;-housekeepingCh:</font></b></div><div style="text-align: justify;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// housekeepingCh is a timer</font><br /></div><div style="text-align: justify;"><span style="">		</span>if !kl.sourcesReady.AllReady() {</div><div style="text-align: justify;"><span style="">			</span><font color="#7f00ff">// If the sources aren't ready or volume manager has not yet synced the states,</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">			</span>// skip housekeeping, as we may accidentally delete pods from unready sources.</font></div><div style="text-align: justify;"><span style="">			</span>klog.V(4).InfoS("SyncLoop (housekeeping, skipped): sources aren't ready yet")</div><div style="text-align: justify;"><span style="">		</span>} else {</div><div style="text-align: justify;"><span style="">			</span>start := time.Now()</div><div style="text-align: justify;"><span style="">			</span>klog.V(4).InfoS("SyncLoop (housekeeping)")</div><div style="text-align: justify;"><span style="">			</span>if err := <b><font color="#00994d">handler.HandlePodCleanups()</font></b>; err != nil {</div><div style="text-align: justify;"><span style="">				</span>klog.ErrorS(err, "Failed cleaning pods")</div><div style="text-align: justify;"><span style="">			</span>}</div><div style="text-align: justify;"><span style="">			</span>duration := time.Since(start)</div><div style="text-align: justify;"><span style="">			</span>if duration &gt; housekeepingWarningDuration {</div><div style="text-align: justify;"><span style="">				</span>klog.ErrorS(fmt.Errorf("housekeeping took too long"), "Housekeeping took longer than 15s", "seconds", duration.Seconds())</div><div style="text-align: justify;"><span style="">			</span>}</div><div style="text-align: justify;"><span style="">			</span>klog.V(4).InfoS("SyncLoop (housekeeping) end")</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span>return true</div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="3050" y="3079" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">// syncLoopIteration reads from various channels and dispatches pods to the...</text></switch></g><path d="M 2405 1010 L 2405 1079.5 L 1850 1079.5 L 1850 1142.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1850 1147.88 L 1846.5 1140.88 L 1850 1142.63 L 1853.5 1140.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2405 1010 L 2405 1079.5 L 3050 1079.5 L 3050 1142.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3050 1147.88 L 3046.5 1140.88 L 3050 1142.63 L 3053.5 1140.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1850 1239 L 1850 1313.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1850 1318.88 L 1846.5 1311.88 L 1850 1313.63 L 1853.5 1311.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3050 1849 L 3050 1933.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3050 1938.88 L 3046.5 1931.88 L 3050 1933.63 L 3053.5 1931.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>