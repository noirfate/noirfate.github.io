<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than diagrams.net -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1871px" height="6855px" viewBox="-0.5 -0.5 1871 6855" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2022-08-01T01:35:19.095Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/19.0.3 Chrome/102.0.5005.63 Electron/19.0.3 Safari/537.36&quot; etag=&quot;MHnTlHZpOd2FGfCisQXS&quot; version=&quot;19.0.3&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;kQ7eeQuq1BGC1f7sF09_&quot; name=&quot;第 1 页&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs/><g><path d="M 712 23 L 712 0 L 1158 0 L 1158 23" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 712 23 L 712 290 L 1158 290 L 1158 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 712 23 L 1158 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="934.5" y="16">main (cmd/kubelet/kubelet.go)</text></g><rect x="712" y="20" width="446" height="270" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 444px; height: 1px; padding-top: 155px; margin-left: 713px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><b>func main()</b> {</pre><pre style="text-align: justify;">        <font color="#7f00ff" style="">// create cobra.Command</font><br /><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">command := app.NewKubeletCommand()</font></b></div><div style="text-align: justify;">        ...</div><div style="text-align: justify;">        <font color="#7f00ff">// run</font></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">code := run(command)</font></b></div><div style="text-align: justify;"><span style="">	</span>os.Exit(code)</div><div style="text-align: justify;">}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><b>func run(command *cobra.Command) int</b> {</div><div style="text-align: justify;">        ...</div><div style="text-align: justify;"><span style="">	</span>command.SetGlobalNormalizationFunc(cliflag.WordSepNormalizeFunc)</div><div style="text-align: justify;"><span style="">	</span>if err := <b><font color="#00994d">command.Execute()</font></b>; err != nil {</div><div style="text-align: justify;"><span style="">		</span>return 1</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span>return 0</div><div style="text-align: justify;">}</div><div style="text-align: justify;"><br /></div></pre></div></div></div></foreignObject><text x="935" y="159" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">func main() {...</text></switch></g><path d="M 935 1110 L 935 1163.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 935 1168.88 L 931.5 1161.88 L 935 1163.63 L 938.5 1161.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 525 363 L 525 340 L 1345 340 L 1345 363" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 525 363 L 525 1110 L 1345 1110 L 1345 363" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 525 363 L 1345 363" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="934.5" y="356">NewKubeletCommand (cmd/kubelet/app/server.go)</text></g><rect x="525" y="360" width="820" height="750" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 818px; height: 1px; padding-top: 735px; margin-left: 526px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><div><b>func NewKubeletCommand() *cobra.Command</b> {</div><div><span style="">	</span>...</div><div><span style="">	</span><b><font color="#00994d">cmd := &amp;cobra.Command</font></b>{</div><div><span style="">		</span>Use: componentKubelet,</div><div><span style="">		</span><b><font color="#00994d">RunE: func(cmd *cobra.Command, args []string) error</font></b> {</div><div><span style="">			</span>...</div><div><span style="">			</span><font color="#7f00ff" style="">// load kubelet config file, if provided</font></div><div><span style="">			</span>if configFile := kubeletFlags.KubeletConfigFile; len(configFile) &gt; 0 {</div><div><span style="">				</span><b><font color="#00994d">kubeletConfig, err = loadConfigFile(configFile)</font></b></div><div><span style="">				</span>if err != nil {</div><div><span style="">					</span>return fmt.Errorf("failed to load kubelet config file, error: %w, path: %s", err, configFile)</div><div><span style="">				</span>}</div><div><span style="">				</span>...</div><div><span style="">			</span>}</div><div><br /></div><div><span style="">			</span><font color="#7f00ff" style="">// We always validate the local configuration (command line + config file).</font></div><div><span style="">			</span><font color="#7f00ff">// This is the default "last-known-good" config for dynamic config, and must always remain valid.</font></div><div><span style="">			</span>if err := <b><font color="#00994d">kubeletconfigvalidation.ValidateKubeletConfiguration(kubeletConfig)</font></b>; err != nil {</div><div><span style="">				</span>return fmt.Errorf("failed to validate kubelet configuration, error: %w, path: %s", err, kubeletConfig)</div><div><span style="">			</span>}</div><div><br /></div><div><span style="">			</span>...</div><div><span style="">			</span><font color="#7f00ff">// Config and flags parsed, now we can initialize logging.</font></div><div><span style="">			</span><b><font color="#00994d">logs.InitLogs()</font></b></div><div><span style="">			</span>logOption := &amp;logs.Options{Config: kubeletConfig.Logging}</div><div><span style="">			</span>if err := logOption.ValidateAndApply(utilfeature.DefaultFeatureGate); err != nil {</div><div><span style="">				</span>klog.ErrorS(err, "Failed to initialize logging")</div><div><span style="">				</span>os.Exit(1)</div><div><span style="">			</span>}</div><div><span style="">			</span>cliflag.PrintFlags(cleanFlagSet)</div><div><br /></div><div><span style="">			</span><font color="#7f00ff">// construct a KubeletServer from kubeletFlags and kubeletConfig</font></div><div><span style="">			</span><b><font color="#00994d">kubeletServer := &amp;options.KubeletServer</font></b>{</div><div><span style="">				</span>KubeletFlags:         *kubeletFlags,</div><div><span style="">				</span>KubeletConfiguration: *kubeletConfig,</div><div><span style="">			</span>}</div><div><span style="">			</span>...</div><div><span style="">			</span><font color="#7f00ff">// run the kubelet</font></div><div><span style="">			</span>return <b><font color="#00994d">Run(ctx, kubeletServer, kubeletDeps, utilfeature.DefaultFeatureGate)</font></b></div><div><span style="">		</span>},</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// add command line arguments</font></div><div><span style="">	</span><b><font color="#00994d">kubeletFlags.AddFlags(cleanFlagSet)</font></b></div><div><span style="">	</span>options.AddKubeletConfigFlags(cleanFlagSet, kubeletConfig)</div><div><span style="">	</span>options.AddGlobalFlags(cleanFlagSet)</div><div><span style="">	</span>cleanFlagSet.BoolP("help", "h", false, fmt.Sprintf("help for %s", cmd.Name()))</div><div><span style="">	</span>...</div><div><span style="">	</span>return cmd</div><div>}</div></pre></div></div></div></foreignObject><text x="935" y="739" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">func NewKubeletCommand() *cobra.Command {...</text></switch></g><path d="M 430 1193 L 430 1170 L 1440 1170 L 1440 1193" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 430 1193 L 430 1660 L 1440 1660 L 1440 1193" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 430 1193 L 1440 1193" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="934.5" y="1186">run (cmd/kubelet/app/server.go)</text></g><rect x="430" y="1190" width="1010" height="470" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1008px; height: 1px; padding-top: 1425px; margin-left: 431px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><b>func run(ctx context.Context, s *options.KubeletServer, kubeDeps *kubelet.Dependencies, featureGate featuregate.FeatureGate) (err error)</b> {<div style="text-align: justify;"><span style="">	</span>...</div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// Register current configuration with /configz endpoint</font></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">err = initConfigz(&amp;s.KubeletConfiguration)</font></b></div><div style="text-align: justify;"><span style="">	</span>if err != nil {</div><div style="text-align: justify;"><span style="">		</span>klog.ErrorS(err, "Failed to register kubelet configuration with configz")</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>...</div><div style="text-align: justify;"><span style="white-space: pre;">	</span><font color="#7f00ff">// run kubelet server</font><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">if err := RunKubelet(s, kubeDeps, s.RunOnce)</font></b>; err != nil {</div><div style="text-align: justify;"><span style="">		</span>return err</div><div style="text-align: justify;"><span style="">	</span>}</div><div><span style="">	</span></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// create /healthz endpoint server</font></div><div style="text-align: justify;"><span style="">	</span>if s.HealthzPort &gt; 0 {</div><div style="text-align: justify;"><span style="">		</span>mux := http.NewServeMux()</div><div style="text-align: justify;"><span style="">		</span><font color="#7f00ff">// staging/src/k8s.io/apiserver/pkg/server/healthz/healthz.go</font></div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">healthz.InstallHandler(mux)</font></b></div><div style="text-align: justify;"><span style="">		</span>go wait.Until(func() {</div><div style="text-align: justify;"><span style="">			</span>err := http.ListenAndServe(net.JoinHostPort(s.HealthzBindAddress, strconv.Itoa(int(s.HealthzPort))), mux)</div><div style="text-align: justify;"><span style="">			</span>if err != nil {</div><div style="text-align: justify;"><span style="">				</span>klog.ErrorS(err, "Failed to start healthz server")</div><div style="text-align: justify;"><span style="">			</span>}</div><div style="text-align: justify;"><span style="">		</span>}, 5*time.Second, wait.NeverStop)</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="white-space: pre;">	</span>...<br /></div><div style="text-align: justify;"><span style="">	</span>return nil</div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="935" y="1429" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">func run(ctx context.Context, s *options.KubeletServer, kubeDeps *kubelet.Dependencies, featureGate featuregate.FeatureGate) (err error) {...</text></switch></g><path d="M 935 290 L 935 333.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 935 338.88 L 931.5 331.88 L 935 333.63 L 938.5 331.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 485 1743 L 485 1720 L 1385 1720 L 1385 1743" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 485 1743 L 485 2750 L 1385 2750 L 1385 1743" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 485 1743 L 1385 1743" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="934.5" y="1736">RunKubelet (cmd/kubelet/app/server.go)</text></g><rect x="485" y="1740" width="900" height="1010" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 898px; height: 1px; padding-top: 2245px; margin-left: 486px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><b>func RunKubelet(kubeServer *options.KubeletServer, kubeDeps *kubelet.Dependencies, runOnce bool) error</b> {<div style="text-align: justify;"><span style="white-space: pre;">	</span>...<br /></div><div style="text-align: justify;"><span style="white-space: pre;">	</span><font color="#7f00ff">// enable create privileged container</font><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">capabilities.Initialize(capabilities.Capabilities{</font></b></div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">AllowPrivileged: true,</font></b></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">})</font></b></div><div style="text-align: justify;"><span style="white-space: pre;">	</span><br /></div><div style="text-align: justify;"><span style="white-space: pre;">	</span><font color="#7f00ff">// check seccomp default profile</font><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">if kubeServer.KubeletConfiguration.SeccompDefault &amp;&amp; !utilfeature.DefaultFeatureGate.Enabled(features.SeccompDefault)</font></b> {</div><div style="text-align: justify;"><span style="">		</span>return fmt.Errorf("the SeccompDefault feature gate must be enabled in order to use the SeccompDefault configuration")</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="white-space: pre;">	</span><font color="#7f00ff">// create kubelet object</font><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">k, err := createAndInitKubelet(&amp;kubeServer.KubeletConfiguration</font></b>,</div><div style="text-align: justify;"><span style="">		</span>kubeDeps,</div><div style="text-align: justify;"><span style="">		</span>&amp;kubeServer.ContainerRuntimeOptions,</div><div style="text-align: justify;"><span style="">		</span>hostname,</div><div style="text-align: justify;"><span style="">		</span>hostnameOverridden,</div><div style="text-align: justify;"><span style="">		</span>nodeName,</div><div style="text-align: justify;"><span style="">		</span>nodeIPs,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.ProviderID,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.CloudProvider,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.CertDirectory,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.RootDirectory,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.ImageCredentialProviderConfigFile,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.ImageCredentialProviderBinDir,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.RegisterNode,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.RegisterWithTaints,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.AllowedUnsafeSysctls,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.ExperimentalMounterPath,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.KernelMemcgNotification,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.ExperimentalNodeAllocatableIgnoreEvictionThreshold,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.MinimumGCAge,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.MaxPerPodContainerCount,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.MaxContainerCount,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.MasterServiceNamespace,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.RegisterSchedulable,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.KeepTerminatedPodVolumes,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.NodeLabels,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.NodeStatusMaxImages,</div><div style="text-align: justify;"><span style="">		</span>kubeServer.KubeletFlags.SeccompDefault || kubeServer.KubeletConfiguration.SeccompDefault,</div><div style="text-align: justify;"><span style="">	</span>)</div><div style="text-align: justify;"><span style="">	</span>if err != nil {</div><div style="text-align: justify;"><span style="">		</span>return fmt.Errorf("failed to create kubelet: %w", err)</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// NewMainKubelet should have set up a pod source config if one didn't exist</font></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// when the builder was run. This is just a precaution.</font></div><div style="text-align: justify;"><span style="">	</span>if kubeDeps.PodConfig == nil {</div><div style="text-align: justify;"><span style="">		</span>return fmt.Errorf("failed to create kubelet, pod source config was nil")</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span>podCfg := kubeDeps.PodConfig</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>if err := rlimit.SetNumFiles(uint64(kubeServer.MaxOpenFiles)); err != nil {</div><div style="text-align: justify;"><span style="">		</span>klog.ErrorS(err, "Failed to set rlimit on max file handles")</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// process pods and exit.</font></div><div style="text-align: justify;"><span style="">	</span>if runOnce {</div><div style="text-align: justify;"><span style="">		</span>if _, err := k.RunOnce(podCfg.Updates()); err != nil {</div><div style="text-align: justify;"><span style="">			</span>return fmt.Errorf("runonce failed: %w", err)</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">		</span>klog.InfoS("Started kubelet as runonce")</div><div style="text-align: justify;"><span style="">	</span>} else {</div><div style="text-align: justify;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// start kubelet server</font><br /></div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">startKubelet(k, podCfg, &amp;kubeServer.KubeletConfiguration, kubeDeps, kubeServer.EnableServer)</font></b></div><div style="text-align: justify;"><span style="">		</span>klog.InfoS("Started kubelet")</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span>return nil</div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="935" y="2249" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">func RunKubelet(kubeServer *options.KubeletServer, kubeDeps *kubelet.Dependencies, runOnce bool) error {...</text></switch></g><path d="M 935 1660 L 935 1713.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 935 1718.88 L 931.5 1711.88 L 935 1713.63 L 938.5 1711.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 574.5 2823 L 574.5 2800 L 1295.5 2800 L 1295.5 2823" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 574.5 2823 L 574.5 3543 L 1295.5 3543 L 1295.5 2823" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 574.5 2823 L 1295.5 2823" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="934.5" y="2816">createAndInitKubelet (cmd/kubelet/app/server.go)</text></g><rect x="574.5" y="2823" width="721" height="720" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 719px; height: 1px; padding-top: 3183px; margin-left: 576px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><b>func createAndInitKubelet</b>(kubeCfg *kubeletconfiginternal.KubeletConfiguration,<div style="text-align: justify;"><span style="">	</span>kubeDeps *kubelet.Dependencies,</div><div style="text-align: justify;"><span style="">	</span>crOptions *config.ContainerRuntimeOptions,</div><div style="text-align: justify;"><span style="">	</span>...<br /></div><div style="text-align: justify;"><span style="">	</span>seccompDefault bool,</div><div style="text-align: justify;">) (k kubelet.Bootstrap, err error) {</div><div style="text-align: justify;"><span style="">	</span>// TODO: block until all sources have delivered at least one update to the channel, or break the sync loop</div><div style="text-align: justify;"><span style="">	</span>// up into "per source" synchronizations</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// create kubelet object</font><br /></div><div style="text-align: justify;"><span style="">	</span>k, err = <font color="#00994d"><b>kubelet.NewMainKubelet</b></font>(kubeCfg,</div><div style="text-align: justify;"><span style="">		</span>kubeDeps,</div><div style="text-align: justify;"><span style="">		</span>crOptions,</div><div style="text-align: justify;"><span style="">		</span>hostname,</div><div style="text-align: justify;"><span style="">		</span>hostnameOverridden,</div><div style="text-align: justify;"><span style="">		</span>nodeName,</div><div style="text-align: justify;"><span style="">		</span>nodeIPs,</div><div style="text-align: justify;"><span style="">		</span>providerID,</div><div style="text-align: justify;"><span style="">		</span>cloudProvider,</div><div style="text-align: justify;"><span style="">		</span>certDirectory,</div><div style="text-align: justify;"><span style="">		</span>rootDirectory,</div><div style="text-align: justify;"><span style="">		</span>imageCredentialProviderConfigFile,</div><div style="text-align: justify;"><span style="">		</span>imageCredentialProviderBinDir,</div><div style="text-align: justify;"><span style="">		</span>registerNode,</div><div style="text-align: justify;"><span style="">		</span>registerWithTaints,</div><div style="text-align: justify;"><span style="">		</span>allowedUnsafeSysctls,</div><div style="text-align: justify;"><span style="">		</span>experimentalMounterPath,</div><div style="text-align: justify;"><span style="">		</span>kernelMemcgNotification,</div><div style="text-align: justify;"><span style="">		</span>experimentalNodeAllocatableIgnoreEvictionThreshold,</div><div style="text-align: justify;"><span style="">		</span>minimumGCAge,</div><div style="text-align: justify;"><span style="">		</span>maxPerPodContainerCount,</div><div style="text-align: justify;"><span style="">		</span>maxContainerCount,</div><div style="text-align: justify;"><span style="">		</span>masterServiceNamespace,</div><div style="text-align: justify;"><span style="">		</span>registerSchedulable,</div><div style="text-align: justify;"><span style="">		</span>keepTerminatedPodVolumes,</div><div style="text-align: justify;"><span style="">		</span>nodeLabels,</div><div style="text-align: justify;"><span style="">		</span>nodeStatusMaxImages,</div><div style="text-align: justify;"><span style="">		</span>seccompDefault,</div><div style="text-align: justify;"><span style="">	</span>)</div><div style="text-align: justify;"><span style="">	</span>if err != nil {</div><div style="text-align: justify;"><span style="">		</span>return nil, err</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>k.BirthCry()</div><div style="text-align: justify;"><span style="">	</span><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// starts garbage collection threads</font><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#00994d"><b>k.StartGarbageCollection()</b></font></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>return k, nil</div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="935" y="3187" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">func createAndInitKubelet(kubeCfg *kubeletconfiginternal.KubeletConfiguration,...</text></switch></g><path d="M 935 2750 L 935 2793.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 935 2798.88 L 931.5 2791.88 L 935 2793.63 L 938.5 2791.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 3623 L 0 3600 L 1870 3600 L 1870 3623" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 3623 L 0 6850 L 1870 6850 L 1870 3623" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 3623 L 1870 3623" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="934.5" y="3616">NewMainKubelet (pkg/kubelet/kubelet.go)</text></g><rect x="0" y="3640" width="1870" height="3210" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1868px; height: 1px; padding-top: 5245px; margin-left: 1px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><b>func NewMainKubelet</b>(kubeCfg *kubeletconfiginternal.KubeletConfiguration,<div style="text-align: justify;"><span style="">	</span>kubeDeps *Dependencies,</div><div style="text-align: justify;"><span style="">	</span>crOptions *config.ContainerRuntimeOptions,</div><div style="text-align: justify;"><span style="">	</span>...</div><div style="text-align: justify;"><span style="">	</span>seccompDefault bool,</div><div style="text-align: justify;">) (*Kubelet, error) {</div><div style="text-align: justify;"><span style="">	</span>...</div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// If kubeClient == nil, we are running in standalone mode (i.e. no API servers)</font></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// If not nil, we are running as part of a cluster and should sync w/API</font></div><div style="text-align: justify;"><span style="">	</span>if kubeDeps.KubeClient != nil {</div><div style="text-align: justify;"><span style="">		</span>kubeInformers := informers.NewSharedInformerFactoryWithOptions(kubeDeps.KubeClient, 0, informers.WithTweakListOptions(func(options *metav1.ListOptions) {</div><div style="text-align: justify;"><span style="">			</span>options.FieldSelector = fields.Set{metav1.ObjectNameField: string(nodeName)}.String()</div><div style="text-align: justify;"><span style="">		</span>}))</div><div style="text-align: justify;"><span style="">		</span>nodeLister = kubeInformers.Core().V1().Nodes().Lister()</div><div style="text-align: justify;"><span style="">		</span>nodeHasSynced = func() bool {</div><div style="text-align: justify;"><span style="">			</span>return kubeInformers.Core().V1().Nodes().Informer().HasSynced()</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">		</span>kubeInformers.Start(wait.NeverStop)</div><div style="text-align: justify;"><span style="">		</span>klog.InfoS("Attempting to sync node with API server")</div><div style="text-align: justify;"><span style="">	</span>} else {</div><div style="text-align: justify;"><span style="">		</span>// we don't have a client to sync!</div><div style="text-align: justify;"><span style="">		</span>nodeIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{})</div><div style="text-align: justify;"><span style="">		</span>nodeLister = corelisters.NewNodeLister(nodeIndexer)</div><div style="text-align: justify;"><span style="">		</span>nodeHasSynced = func() bool { return true }</div><div style="text-align: justify;"><span style="">		</span>klog.InfoS("Kubelet is running in standalone mode, will skip API server sync")</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#00994d"><b>oomWatcher, err := oomwatcher.NewWatcher(kubeDeps.Recorder)</b></font></div><div style="text-align: justify;"><span style="">	</span>...<br /></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>klet := &amp;Kubelet{</div><div style="text-align: justify;"><span style="">		</span>hostname:                                hostname,</div><div style="text-align: justify;"><span style="">		</span>...</div><div style="text-align: justify;"><span style="">		</span>lastContainerStartedTime:                newTimeCache(),</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;">	...<br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// setup secrete manager</font><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#00994d"><b>klet.secretManager = secretManager</b></font></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// setup configmap manager</font><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#00994d"><b>klet.configMapManager = configMapManager</b></font></div><div style="text-align: justify;"><span style="">	</span>...<br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// setup liveness manager</font><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#00994d"><b>klet.livenessManager = proberesults.NewManager()</b></font></div><div style="text-align: justify;"><span style="color: rgb(127, 0, 255);"><span style="">	</span>// setup readiness manager</span><font color="#00994d"><b><br /></b></font></div><div style="text-align: justify;"><span style="">	</span><font color="#00994d"><b>klet.readinessManager = proberesults.NewManager()</b></font></div><div style="text-align: justify;"><span style="color: rgb(127, 0, 255);"><span style="">	</span>// setup startup manager</span><font color="#00994d"><b><br /></b></font></div><div style="text-align: justify;"><span style="">	</span><font color="#00994d"><b>klet.startupManager = proberesults.NewManager()</b></font></div><div style="text-align: justify;"><span style="">	</span><font color="#00994d"><b>klet.podCache = kubecontainer.NewCache()</b></font></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// podManager is also responsible for keeping secretManager and configMapManager contents up-to-date.</font></div><div style="text-align: justify;"><span style="">	</span>mirrorPodClient := kubepod.NewBasicMirrorClient(klet.kubeClient, string(nodeName), nodeLister)</div><div style="text-align: justify;"><span style="color: rgb(127, 0, 255);"><span style="">	</span>// setup pod manager</span><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#00994d"><b>klet.podManager = kubepod.NewBasicPodManager(mirrorPodClient, secretManager, configMapManager)</b></font></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#00994d"><b>klet.statusManager = status.NewManager(klet.kubeClient, klet.podManager, klet)</b></font></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">klet.resourceAnalyzer = serverstats.NewResourceAnalyzer(klet, kubeCfg.VolumeStatsAggPeriod.Duration, kubeDeps.Recorder)</font></b></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>...<br /></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// setup containerLogManager for CRI container runtime</font></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">containerLogManager, err := logs.NewContainerLogManager</font></b>(</div><div style="text-align: justify;"><span style="">		</span>klet.runtimeService,</div><div style="text-align: justify;"><span style="">		</span>kubeDeps.OSInterface,</div><div style="text-align: justify;"><span style="">		</span>kubeCfg.ContainerLogMaxSize,</div><div style="text-align: justify;"><span style="">		</span>int(kubeCfg.ContainerLogMaxFiles),</div><div style="text-align: justify;"><span style="">	</span>)</div><div style="text-align: justify;"><span style="">	</span>if err != nil {</div><div style="text-align: justify;"><span style="">		</span>return nil, fmt.Errorf("failed to initialize container log manager: %v", err)</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">klet.containerLogManager = containerLogManager</font></b></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>klet.reasonCache = NewReasonCache()</div><div style="text-align: justify;"><span style="">	</span>klet.workQueue = queue.NewBasicWorkQueue(klet.clock)</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style=""><span style="">	</span><font color="#7f00ff">// setup pod worker</font>	</span><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">klet.podWorkers = newPodWorkers</font></b>(</div><div style="text-align: justify;"><span style="">		</span>klet.syncPod,</div><div style="text-align: justify;"><span style="">		</span>klet.syncTerminatingPod,</div><div style="text-align: justify;"><span style="">		</span>klet.syncTerminatedPod,</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">		</span>kubeDeps.Recorder,</div><div style="text-align: justify;"><span style="">		</span>klet.workQueue,</div><div style="text-align: justify;"><span style="">		</span>klet.resyncInterval,</div><div style="text-align: justify;"><span style="">		</span>backOffPeriod,</div><div style="text-align: justify;"><span style="">		</span>klet.podCache,</div><div style="text-align: justify;"><span style="">	</span>)</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// setup runtime manager</font><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">runtime, err := kuberuntime.NewKubeGenericRuntimeManager</font></b>(</div><div style="text-align: justify;"><span style="">		</span>kubecontainer.FilterEventRecorder(kubeDeps.Recorder),</div><div style="text-align: justify;"><span style="">		</span>...</div><div style="text-align: justify;"><span style="">		</span>*kubeCfg.MemoryThrottlingFactor,</div><div style="text-align: justify;"><span style="">	</span>)</div><div style="text-align: justify;"><span style="">	</span>if err != nil {</div><div style="text-align: justify;"><span style="">		</span>return nil, err</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span>klet.containerRuntime = runtime</div><div style="text-align: justify;"><span style="">	</span>klet.streamingRuntime = runtime</div><div style="text-align: justify;"><span style="">	</span>klet.runner = runtime</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// setup PLEG</font><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">klet.pleg = pleg.NewGenericPLEG(klet.containerRuntime, plegChannelCapacity, plegRelistPeriod, klet.podCache, clock.RealClock{})</font></b></div><div style="text-align: justify;"><span style="">	</span>...<br /></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// setup containerGC</font></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">containerGC, err := kubecontainer.NewContainerGC(klet.containerRuntime, containerGCPolicy, klet.sourcesReady)</font></b></div><div style="text-align: justify;"><span style="">	</span>if err != nil {</div><div style="text-align: justify;"><span style="">		</span>return nil, err</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">klet.containerGC = containerGC</font></b></div><div style="text-align: justify;"><span style="">	</span>klet.containerDeletor = newPodContainerDeletor(klet.containerRuntime, integer.IntMax(containerGCPolicy.MaxPerPodContainer, minDeadContainerInPod))</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// setup imageManager</font></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">imageManager, err := images.NewImageGCManager(klet.containerRuntime, klet.StatsProvider, kubeDeps.Recorder, nodeRef, imageGCPolicy, crOptions.PodSandboxImage)</font></b></div><div style="text-align: justify;"><span style="">	</span>if err != nil {</div><div style="text-align: justify;"><span style="">		</span>return nil, fmt.Errorf("failed to initialize image manager: %v", err)</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">klet.imageManager = imageManager</font></b></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// setup probe manager</font><br /></div><div style="text-align: justify;"><span style="">	</span>if kubeDeps.ProbeManager != nil {</div><div style="text-align: justify;"><span style="">		</span>klet.probeManager = kubeDeps.ProbeManager</div><div style="text-align: justify;"><span style="">	</span>} else {</div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">klet.probeManager = prober.NewManager</font></b>(</div><div style="text-align: justify;"><span style="">			</span>klet.statusManager,</div><div style="text-align: justify;"><span style="">			</span>klet.livenessManager,</div><div style="text-align: justify;"><span style="">			</span>klet.readinessManager,</div><div style="text-align: justify;"><span style="">			</span>klet.startupManager,</div><div style="text-align: justify;"><span style="">			</span>klet.runner,</div><div style="text-align: justify;"><span style="">			</span>kubeDeps.Recorder)</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">tokenManager := token.NewManager(kubeDeps.KubeClient)</font></b></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// NewInitializedVolumePluginMgr initializes some storageErrors on the Kubelet runtimeState (in csi_plugin.go init)</font></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// which affects node ready status. This function must be called before Kubelet is initialized so that the Node</font></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// ReadyState is accurate with the storage state.</font></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">klet.volumePluginMgr, err =</font></b></div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">NewInitializedVolumePluginMgr(klet, secretManager, configMapManager, tokenManager, kubeDeps.VolumePlugins, kubeDeps.DynamicPluginProber)</font></b></div><div style="text-align: justify;"><span style="">	</span>if err != nil {</div><div style="text-align: justify;"><span style="">		</span>return nil, err</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// setup plugin manager</font><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">klet.pluginManager = pluginmanager.NewPluginManager(</font></b></div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">klet.getPluginsRegistrationDir(), /* sockDir */</font></b></div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">kubeDeps.Recorder,</font></b></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">)</font></b></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// setup volumeManager</font></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">klet.volumeManager = volumemanager.NewVolumeManager(</font></b></div><div style="text-align: justify;"><b><font color="#00994d"><span style="">		</span>kubeCfg.EnableControllerAttachDetach,</font></b></div><div style="text-align: justify;"><b><font color="#00994d"><span style="">		</span>nodeName,</font></b></div><div style="text-align: justify;"><b><font color="#00994d"><span style="">		</span>klet.podManager,</font></b></div><div style="text-align: justify;"><b><font color="#00994d"><span style="">		</span>klet.podWorkers,</font></b></div><div style="text-align: justify;"><b><font color="#00994d"><span style="">		</span>klet.kubeClient,</font></b></div><div style="text-align: justify;"><b><font color="#00994d"><span style="">		</span>klet.volumePluginMgr,</font></b></div><div style="text-align: justify;"><b><font color="#00994d"><span style="">		</span>klet.containerRuntime,</font></b></div><div style="text-align: justify;"><b><font color="#00994d"><span style="">		</span>kubeDeps.Mounter,</font></b></div><div style="text-align: justify;"><b><font color="#00994d"><span style="">		</span>kubeDeps.HostUtil,</font></b></div><div style="text-align: justify;"><b><font color="#00994d"><span style="">		</span>klet.getPodsDir(),</font></b></div><div style="text-align: justify;"><b><font color="#00994d"><span style="">		</span>kubeDeps.Recorder,</font></b></div><div style="text-align: justify;"><b><font color="#00994d"><span style="">		</span>keepTerminatedPodVolumes,</font></b></div><div style="text-align: justify;"><b><font color="#00994d"><span style="">		</span>volumepathhandler.NewBlockVolumePathHandler())</font></b></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// setup eviction manager</font></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">evictionManager, evictionAdmitHandler := eviction.NewManager(klet.resourceAnalyzer, evictionConfig, killPodNow(klet.podWorkers, kubeDeps.Recorder), klet.podManager.GetMirrorPodByPod, klet.imageManager, klet.containerGC, kubeDeps.Recorder, nodeRef, klet.clock)</font></b></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">klet.evictionManager = evictionManager</font></b></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">klet.admitHandlers.AddPodAdmitHandler(evictionAdmitHandler)</font></b></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// Safe, allowed sysctls can always be used as unsafe sysctls in the spec.</font></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// Hence, we concatenate those two lists.</font></div><div style="text-align: justify;"><span style="">	</span>safeAndUnsafeSysctls := append(sysctlallowlist.SafeSysctlAllowlist(), allowedUnsafeSysctls...)</div><div style="text-align: justify;"><span style="">	</span>sysctlsAllowlist, err := sysctl.NewAllowlist(safeAndUnsafeSysctls)</div><div style="text-align: justify;"><span style="">	</span>if err != nil {</div><div style="text-align: justify;"><span style="">		</span>return nil, err</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span><font color="#00994d"><b>klet.admitHandlers.AddPodAdmitHandler(sysctlsAllowlist)</b></font></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// enable active deadline handler</font></div><div style="text-align: justify;"><span style="">	</span>activeDeadlineHandler, err := newActiveDeadlineHandler(klet.statusManager, kubeDeps.Recorder, klet.clock)</div><div style="text-align: justify;"><span style="">	</span>if err != nil {</div><div style="text-align: justify;"><span style="">		</span>return nil, err</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">klet.AddPodSyncLoopHandler(activeDeadlineHandler)</font></b></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">klet.AddPodSyncHandler(activeDeadlineHandler)</font></b></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">klet.admitHandlers.AddPodAdmitHandler(klet.containerManager.GetAllocateResourcesPodAdmitHandler())</font></b></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>criticalPodAdmissionHandler := preemption.NewCriticalPodAdmissionHandler(klet.GetActivePods, killPodNow(klet.podWorkers, kubeDeps.Recorder), kubeDeps.Recorder)</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">klet.admitHandlers.AddPodAdmitHandler(lifecycle.NewPredicateAdmitHandler(klet.getNodeAnyWay, criticalPodAdmissionHandler, klet.containerManager.UpdatePluginResources))</font></b></div><div style="text-align: justify;"><span style="">	</span>...<br /></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>if sysruntime.GOOS == "linux" {</div><div style="text-align: justify;"><span style="">		</span>// AppArmor is a Linux kernel security module and it does not support other operating systems.</div><div style="text-align: justify;"><span style="">		</span>klet.appArmorValidator = apparmor.NewValidator()</div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">klet.softAdmitHandlers.AddPodAdmitHandler(lifecycle.NewAppArmorAdmitHandler(klet.appArmorValidator))</font></b></div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>...<br /></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// setup node shutdown manager</font></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">shutdownManager, shutdownAdmitHandler := nodeshutdown.NewManager</font></b>(&amp;nodeshutdown.Config{</div><div style="text-align: justify;"><span style="">		</span>ProbeManager:                     klet.probeManager,</div><div style="text-align: justify;"><span style="">		</span>Recorder:                         kubeDeps.Recorder,</div><div style="text-align: justify;"><span style="">		</span>NodeRef:                          nodeRef,</div><div style="text-align: justify;"><span style="">		</span>GetPodsFunc:                      klet.GetActivePods,</div><div style="text-align: justify;"><span style="">		</span>KillPodFunc:                      killPodNow(klet.podWorkers, kubeDeps.Recorder),</div><div style="text-align: justify;"><span style="">		</span>SyncNodeStatusFunc:               klet.syncNodeStatus,</div><div style="text-align: justify;"><span style="">		</span>ShutdownGracePeriodRequested:     kubeCfg.ShutdownGracePeriod.Duration,</div><div style="text-align: justify;"><span style="">		</span>ShutdownGracePeriodCriticalPods:  kubeCfg.ShutdownGracePeriodCriticalPods.Duration,</div><div style="text-align: justify;"><span style="">		</span>ShutdownGracePeriodByPodPriority: kubeCfg.ShutdownGracePeriodByPodPriority,</div><div style="text-align: justify;"><span style="">		</span>StateDirectory:                   rootDirectory,</div><div style="text-align: justify;"><span style="">	</span>})</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">klet.shutdownManager = shutdownManager</font></b></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">klet.admitHandlers.AddPodAdmitHandler(shutdownAdmitHandler)</font></b></div><div><span style="">	</span></div><div style="text-align: justify;"><span style="">	</span>...</div><div style="text-align: justify;"><span style="">	</span>return klet, nil</div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="935" y="5249" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">func NewMainKubelet(kubeCfg *kubeletconfiginternal.KubeletConfiguration,...</text></switch></g><path d="M 935 3543 L 935 3593.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 935 3598.88 L 931.5 3591.88 L 935 3593.63 L 938.5 3591.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>