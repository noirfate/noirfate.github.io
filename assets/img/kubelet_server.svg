<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than diagrams.net -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="2659px" height="2155px" viewBox="-0.5 -0.5 2659 2155" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2022-08-02T03:30:23.345Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/19.0.3 Chrome/102.0.5005.63 Electron/19.0.3 Safari/537.36&quot; etag=&quot;Vkl53TM62lNswrycF93q&quot; version=&quot;19.0.3&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;H4dcxaGc4bAsbVxPTQGx&quot; name=&quot;第 1 页&quot;&gt;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&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs/><g><path d="M 1233 200 L 1233 242.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1233 247.88 L 1229.5 240.88 L 1233 242.63 L 1236.5 240.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 1003 23 L 1003 0 L 1463 0 L 1463 23" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 1003 23 L 1003 200 L 1463 200 L 1463 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1003 23 L 1463 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1232.5" y="16">run (cmd/kubelet/app/server.go)</text></g><rect x="1003" y="20" width="460" height="180" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 458px; height: 1px; padding-top: 110px; margin-left: 1004px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><b>func run(ctx context.Context, ...) (err error)</b> {<div>	...</div><div><br /></div><div>	<font color="#7f00ff">// run kubelet server</font><br /></div><div>	<b><font color="#00994d">if err := RunKubelet(s, kubeDeps, s.RunOnce)</font></b>; err != nil {</div><div>		return err</div><div>	}</div><div><span style="white-space: pre;">	</span>...<br /></div><div><br /></div><div>	return nil</div><div>}</div></pre></div></div></div></foreignObject><text x="1233" y="114" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">func run(ctx context.Context, ...) (err error) {...</text></switch></g><path d="M 1233 529 L 1233 573.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1233 578.88 L 1229.5 571.88 L 1233 573.63 L 1236.5 571.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 858 272 L 858 249 L 1608 249 L 1608 272" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 858 272 L 858 529 L 1608 529 L 1608 272" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 858 272 L 1608 272" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1232.5" y="265">RunKubelet (cmd/kubelet/app/server.go)</text></g><rect x="858" y="269" width="750" height="260" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 748px; height: 1px; padding-top: 399px; margin-left: 859px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><b>func RunKubelet(kubeServer *options.KubeletServer, kubeDeps *kubelet.Dependencies, runOnce bool) error</b> {<div>	...<br /></div><div><br /></div><div>	<font color="#7f00ff">// process pods and exit.</font></div><div>	if runOnce {</div><div>		if _, err := k.RunOnce(podCfg.Updates()); err != nil {</div><div>			return fmt.Errorf("runonce failed: %w", err)</div><div>		}</div><div>		klog.InfoS("Started kubelet as runonce")</div><div>	} else {</div><div>		<font color="#7f00ff">// start kubelet server</font><br /></div><div>		<b><font color="#00994d">startKubelet(k, podCfg, &amp;kubeServer.KubeletConfiguration, kubeDeps, kubeServer.EnableServer)</font></b></div><div>		klog.InfoS("Started kubelet")</div><div>	}</div><div>	return nil</div><div>}</div></pre></div></div></div></foreignObject><text x="1233" y="403" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">func RunKubelet(kubeServer *options.KubeletServer, kubeDeps *kubelet.Dependencies, runOnce bool) error {...</text></switch></g><path d="M 848 720 L 766.37 720" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 761.12 720 L 768.12 716.5 L 766.37 720 L 768.12 723.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1618 720 L 1706.63 720" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1711.88 720 L 1704.88 723.5 L 1706.63 720 L 1704.88 716.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 848 603 L 848 580 L 1618 580 L 1618 603" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 848 603 L 848 860 L 1618 860 L 1618 603" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 848 603 L 1618 603" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1232.5" y="596">startKubelet (cmd/kubelet/app/server.go)</text></g><rect x="848" y="600" width="770" height="260" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 768px; height: 1px; padding-top: 730px; margin-left: 849px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><b>func startKubelet(k kubelet.Bootstrap, ...)</b> {<div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// start the kubelet</font></div><div style="text-align: justify;"><span style="">	</span>go k.Run(podCfg.Updates())</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// start the kubelet server</font></div><div style="text-align: justify;"><span style="">	</span>if enableServer {</div><div style="text-align: justify;"><span style="">		</span><font color="#00994d"><b>go k.ListenAndServe(kubeCfg, kubeDeps.TLSOptions, kubeDeps.Auth)</b></font></div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// listen on readonly port, default 10255</font></div><div style="text-align: justify;"><span style="">	</span>if kubeCfg.ReadOnlyPort &gt; 0 {</div><div style="text-align: justify;"><span style="">		</span><font color="#00994d"><b>go k.ListenAndServeReadOnly(netutils.ParseIPSloppy(kubeCfg.Address), uint(kubeCfg.ReadOnlyPort))</b></font></div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span><font color="#7f00ff">// start grpc server, default listen on /var/lib/kubelet/pod-resources/kubelet.sock, list pods, devices, cpus, memory</font></div><div style="text-align: justify;"><span style="">	</span>if utilfeature.DefaultFeatureGate.Enabled(features.KubeletPodResources) {</div><div style="text-align: justify;"><span style="">		</span><font color="#00994d"><b>go k.ListenAndServePodResources()</b></font></div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="1233" y="734" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">func startKubelet(k kubelet.Bootstrap, ...) {...</text></switch></g><path d="M 100 683 L 100 660 L 760 660 L 760 683" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 100 683 L 100 780 L 760 780 L 760 683" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 100 683 L 760 683" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="429.5" y="676">ListenAndServe (pkg/kubelet/kubelet.go)</text></g><rect x="100" y="680" width="660" height="100" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 658px; height: 1px; padding-top: 730px; margin-left: 101px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><font color="#7f00ff">// ListenAndServe runs the kubelet HTTP server.</font><div style="text-align: justify;"><b>func (kl *Kubelet) ListenAndServe</b>(kubeCfg *kubeletconfiginternal.KubeletConfiguration, </div><div style="text-align: justify;"><span style="white-space: pre;">	</span>tlsOptions *server.TLSOptions,</div><div style="text-align: justify;"><span style="">	</span>auth server.AuthInterface) {</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">server.ListenAndServeKubeletServer(kl, kl.resourceAnalyzer, kubeCfg, tlsOptions, auth)</font></b></div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="430" y="734" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">// ListenAndServe runs the kubelet HTTP server....</text></switch></g><path d="M 430 1358 L 430 1403.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 430 1408.88 L 426.5 1401.88 L 430 1403.63 L 433.5 1401.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 90 851 L 90 828 L 770 828 L 770 851" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 90 851 L 90 1358 L 770 1358 L 770 851" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 90 851 L 770 851" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="429.5" y="844">ListenAndServe (pkg/kubelet/server/server.go)</text></g><rect x="90" y="848" width="680" height="510" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 678px; height: 1px; padding-top: 1103px; margin-left: 91px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><font color="#7f00ff">// ListenAndServeKubeletServer initializes a server to respond to HTTP network requests on the Kubelet.</font><div style="text-align: justify;"><b>func ListenAndServeKubeletServer</b>(</div><div style="text-align: justify;"><span style="">	</span>host HostInterface,</div><div style="text-align: justify;"><span style="">	</span>resourceAnalyzer stats.ResourceAnalyzer,</div><div style="text-align: justify;"><span style="">	</span>kubeCfg *kubeletconfiginternal.KubeletConfiguration,</div><div style="text-align: justify;"><span style="">	</span>tlsOptions *TLSOptions,</div><div style="text-align: justify;"><span style="">	</span>auth AuthInterface) {</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>address := netutils.ParseIPSloppy(kubeCfg.Address)</div><div style="text-align: justify;"><span style="">	</span>port := uint(kubeCfg.Port)</div><div style="text-align: justify;"><span style="">	</span>klog.InfoS("Starting to listen", "address", address, "port", port)</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">handler := NewServer(host, resourceAnalyzer, auth, kubeCfg)</font></b></div><div style="text-align: justify;"><span style="">	</span>s := &amp;http.Server{</div><div style="text-align: justify;"><span style="">		</span>Addr:           net.JoinHostPort(address.String(), strconv.FormatUint(uint64(port), 10)),</div><div style="text-align: justify;"><span style="">		</span>Handler:        &amp;handler,</div><div style="text-align: justify;"><span style="">		</span>IdleTimeout:    90 * time.Second, // matches http.DefaultTransport keep-alive timeout</div><div style="text-align: justify;"><span style="">		</span>ReadTimeout:    4 * 60 * time.Minute,</div><div style="text-align: justify;"><span style="">		</span>WriteTimeout:   4 * 60 * time.Minute,</div><div style="text-align: justify;"><span style="">		</span>MaxHeaderBytes: 1 &lt;&lt; 20,</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span>if tlsOptions != nil {</div><div style="text-align: justify;"><span style="">		</span>s.TLSConfig = tlsOptions.Config</div><div style="text-align: justify;"><span style="">		</span><font color="#7f00ff">// Passing empty strings as the cert and key files means no</font></div><div style="text-align: justify;"><span style="">		</span><font color="#7f00ff">// cert/keys are specified and GetCertificate in the TLSConfig</font></div><div style="text-align: justify;"><span style="">		</span><font color="#7f00ff">// should be called instead.</font></div><div style="text-align: justify;"><span style="">		</span>if err := <b><font color="#00994d">s.ListenAndServeTLS(tlsOptions.CertFile, tlsOptions.KeyFile)</font></b>; err != nil {</div><div style="text-align: justify;"><span style="">			</span>klog.ErrorS(err, "Failed to listen and serve")</div><div style="text-align: justify;"><span style="">			</span>os.Exit(1)</div><div style="text-align: justify;"><span style="">		</span>}</div><div style="text-align: justify;"><span style="">	</span>} else if err := <b><font color="#00994d">s.ListenAndServe()</font></b>; err != nil {</div><div style="text-align: justify;"><span style="">		</span>klog.ErrorS(err, "Failed to listen and serve")</div><div style="text-align: justify;"><span style="">		</span>os.Exit(1)</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="430" y="1107" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">// ListenAndServeKubeletServer initializes a server to respond to HTTP network requests on the Kubelet....</text></switch></g><path d="M 430 780 L 430 821.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 430 826.88 L 426.5 819.88 L 430 821.63 L 433.5 819.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 1433 L 0 1410 L 860 1410 L 860 1433" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 1433 L 0 2150 L 860 2150 L 860 1433" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 1433 L 860 1433" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="429.5" y="1426">NewServer (pkg/kubelet/server/server.go)</text></g><rect x="0" y="1430" width="860" height="720" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 858px; height: 1px; padding-top: 1790px; margin-left: 1px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><font color="#7f00ff">// NewServer initializes and configures a kubelet.Server object to handle HTTP requests.</font><div style="text-align: justify;"><b>func NewServer</b>(</div><div style="text-align: justify;"><span style="">	</span>host HostInterface,</div><div style="text-align: justify;"><span style="">	</span>resourceAnalyzer stats.ResourceAnalyzer,</div><div style="text-align: justify;"><span style="">	</span>auth AuthInterface,</div><div style="text-align: justify;"><span style="">	</span>kubeCfg *kubeletconfiginternal.KubeletConfiguration) Server {</div><div style="text-align: justify;"><span style="">	</span>server := Server{</div><div style="text-align: justify;"><span style="">		</span>host:                 host,</div><div style="text-align: justify;"><span style="">		</span>resourceAnalyzer:     resourceAnalyzer,</div><div style="text-align: justify;"><span style="">		</span>auth:                 auth,</div><div style="text-align: justify;"><span style="">		</span>restfulCont:          &amp;filteringContainer{Container: restful.NewContainer()},</div><div style="text-align: justify;"><span style="">		</span>metricsBuckets:       sets.NewString(),</div><div style="text-align: justify;"><span style="">	</span><span style="">	</span><font color="#7f00ff">// support http methods</font><br /></div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">metricsMethodBuckets: sets.NewString("OPTIONS", "GET", "HEAD", "POST", "PUT", "DELETE", "TRACE", "CONNECT"),</font></b></div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span>if auth != nil {</div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">server.InstallAuthFilter()</font></b></div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span>// register default endpoints:</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span>// /healthz, /healthz/{ping, log, syncloop} (staging/src/k8s.io/apiserver/pkg/server/healthz/healthz.go)</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span>// /pods<br /></font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span>// /stats/summary (pkg/kubelet/server/stats/handler.go)<br /></font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span>// /metrics, /metrics/{cadvisor, probes, resource} (staging/src/k8s.io/component-base/metrics/registry.go)</font></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">server.InstallDefaultHandlers()</font></b></div><div style="text-align: justify;"><span style="">	</span>if kubeCfg != nil &amp;&amp; kubeCfg.EnableDebuggingHandlers {</div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// register debug endpoints:<br /></font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// /run/{podNamespace}/{podName}/{containerName} or /run/{podNamespace}/{podName}/{uid}/{containerName} (POST)<br /></font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// /exec/{podNamespace}/{podName}/{containerName} or /exec/{podNamespace}/{podName}/{uid}/{containerName} (GET/POST)<br /></font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// /attach/{podNamespace}/{podName}/{containerName} or /attach/{podNamespace}/{podName}/{uid}/{containerName} (GET/POST)<br /></font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// /portForward/{podNamespace}/{podName} or /portForward/{podNamespace}/{podName}/{uid} (GET/POST)<br /></font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// /containerLogs/{podNamespace}/{podName}/{containerName} (GET)<br /></font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// /configz (GET)<br /></font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// /runningpods/ (GET)</font><br /></div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">server.InstallDebuggingHandlers()</font></b></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// register log endpoint:<br /></font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// /logs/ (read host /var/log)</font><br /></div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">server.InstallSystemLogHandler(kubeCfg.EnableSystemLogHandler)</font></b></div><div style="text-align: justify;"><span style="color: rgb(0, 153, 77);">	</span><span style="color: rgb(0, 153, 77);">	</span><font color="#7f00ff">// register profile endpoints;</font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// /debug/pprof/{profile, symbol, cmdline, trace}<br /></font></div><div style="text-align: justify;"><font color="#00994d"><span style="">	</span><span style="">	</span><b>server.InstallProfilingHandler(kubeCfg.EnableProfilingHandler, kubeCfg.EnableContentionProfiling)</b></font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// register log level endpoints:<br /></font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="">	</span><span style="">	</span>// /debug/flags/v (PUT, set log level to 4 via curl -XPUT -d "4") </font><br /></div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">server.InstallDebugFlagsHandler(kubeCfg.EnableDebugFlagsHandler)</font></b></div><div style="text-align: justify;"><span style="">	</span>} else {</div><div style="text-align: justify;"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// register error message print handler for visiting /{run ,exec, attach, portForward, containerLogs,runningpods, logs, debug}</font><br /></div><div style="text-align: justify;"><span style="">		</span><b><font color="#00994d">server.InstallDebuggingDisabledHandlers()</font></b></div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span>return server</div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="430" y="1794" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">// NewServer initializes and configures a kubelet.Server object to handle HTTP requests....</text></switch></g><path d="M 920.5 923 L 920.5 900 L 1545.5 900 L 1545.5 923" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 920.5 923 L 920.5 990 L 1545.5 990 L 1545.5 923" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 920.5 923 L 1545.5 923" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1232.5" y="916">ListenAndServeReadOnly (pkg/kubelet/kubelet.go)</text></g><rect x="920.5" y="920" width="625" height="70" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 623px; height: 1px; padding-top: 955px; margin-left: 922px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><font color="#7f00ff">// ListenAndServeReadOnly runs the kubelet HTTP server in read-only mode.</font><div style="text-align: justify;"><b>func (kl *Kubelet) ListenAndServeReadOnly(address net.IP, port uint)</b> {</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">server.ListenAndServeKubeletReadOnlyServer(kl, kl.resourceAnalyzer, address, port)</font></b></div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="1233" y="959" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">// ListenAndServeReadOnly runs the kubelet HTTP server in read-only mode....</text></switch></g><path d="M 818 1053 L 818 1030 L 1648 1030 L 1648 1053" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 818 1053 L 818 1380 L 1648 1380 L 1648 1053" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 818 1053 L 1648 1053" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1232.5" y="1046">ListenAndServeKubeletReadOnlyServer (pkg/kubelet/server/server.go)</text></g><rect x="818" y="1050" width="830" height="330" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 828px; height: 1px; padding-top: 1215px; margin-left: 819px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><font color="#7f00ff">// ListenAndServeKubeletReadOnlyServer initializes a server to respond to HTTP network requests on the Kubelet.</font><div style="text-align: justify;"><b>func ListenAndServeKubeletReadOnlyServer</b>(host HostInterface, resourceAnalyzer stats.ResourceAnalyzer, address net.IP, port uint) {</div><div style="text-align: justify;"><span style="">	</span>klog.InfoS("Starting to listen read-only", "address", address, "port", port)</div><div style="text-align: justify;"><font color="#7f00ff"><span style="white-space: pre;">	</span>// the last two parameters, auth = nil and kubeCfg = nil<br /></font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="white-space: pre;">	</span>// auth = nil means no authentication required<br /></font></div><div style="text-align: justify;"><font color="#7f00ff"><span style="white-space: pre;">	</span>// kubeCfg = nil means only install default endpoints</font><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">s := NewServer(host, resourceAnalyzer, nil, nil)</font></b></div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>server := &amp;http.Server{</div><div style="text-align: justify;"><span style="">		</span>Addr:         net.JoinHostPort(address.String(), strconv.FormatUint(uint64(port), 10)),</div><div style="text-align: justify;"><span style="">		</span>Handler:       &amp;s,</div><div style="text-align: justify;"><span style="">		</span>IdleTimeout:    90 * time.Second, // matches http.DefaultTransport keep-alive timeout</div><div style="text-align: justify;"><span style="">		</span>ReadTimeout:    4 * 60 * time.Minute,</div><div style="text-align: justify;"><span style="">		</span>WriteTimeout:   4 * 60 * time.Minute,</div><div style="text-align: justify;"><span style="">		</span>MaxHeaderBytes:   1 &lt;&lt; 20,</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>if err := server.ListenAndServe(); err != nil {</div><div style="text-align: justify;"><span style="">		</span>klog.ErrorS(err, "Failed to listen and serve")</div><div style="text-align: justify;"><span style="">		</span>os.Exit(1)</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="1233" y="1219" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">// ListenAndServeKubeletReadOnlyServer initializes a server to respond to HTTP network requests on the Kubelet....</text></switch></g><path d="M 1233 990 L 1233 1023.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1233 1028.88 L 1229.5 1021.88 L 1233 1023.63 L 1236.5 1021.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1233 1380 L 1233 1790 L 866.37 1790" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 861.12 1790 L 868.12 1786.5 L 866.37 1790 L 868.12 1793.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1233 860 L 1233 893.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1233 898.88 L 1229.5 891.88 L 1233 893.63 L 1236.5 891.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1713 658 L 1713 635 L 2603 635 L 2603 658" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1713 658 L 1713 805 L 2603 805 L 2603 658" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1713 658 L 2603 658" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="2157.5" y="651">ListenAndServePodResources (pkg/kubelet/kubelet.go)</text></g><rect x="1713" y="655" width="890" height="150" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 888px; height: 1px; padding-top: 730px; margin-left: 1714px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><font color="#7f00ff">// ListenAndServePodResources runs the kubelet podresources grpc service</font><div style="text-align: justify;"><b>func (kl *Kubelet) ListenAndServePodResources()</b> {</div><div style="text-align: justify;"><span style="white-space: pre;">	</span><font color="#7f00ff">// getPodResourcesDir return /var/lig/kubelet/pod-resources/kubelet</font><br /></div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">socket, err := util.LocalEndpoint(kl.getPodResourcesDir(), podresources.Socket)</font></b></div><div style="text-align: justify;"><span style="">	</span>if err != nil {</div><div style="text-align: justify;"><span style="">		</span>klog.V(2).InfoS("Failed to get local endpoint for PodResources endpoint", "err", err)</div><div style="text-align: justify;"><span style="">		</span>return</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">server.ListenAndServePodResources(socket, kl.podManager, kl.containerManager, kl.containerManager, kl.containerManager)</font></b></div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="2158" y="734" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">// ListenAndServePodResources runs the kubelet podresources grpc service...</text></switch></g><path d="M 1658 873 L 1658 850 L 2658 850 L 2658 873" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1658 873 L 1658 1110 L 2658 1110 L 2658 873" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1658 873 L 2658 873" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="2157.5" y="866">ListenAndServePodResources (pkg/kubelet/server/server.go)</text></g><rect x="1658" y="870" width="1000" height="240" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 998px; height: 1px; padding-top: 990px; margin-left: 1659px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre style="text-align: justify;"><font color="#7f00ff">// ListenAndServePodResources initializes a gRPC server to serve the PodResources service</font><div style="text-align: justify;"><b>func ListenAndServePodResources</b>(socket string, podsProvider podresources.PodsProvider, ...) {</div><div style="text-align: justify;"><span style="">	</span><b><font color="#00994d">server := grpc.NewServer()</font></b></div><div style="text-align: justify;"><span style="">	</span>podresourcesapiv1alpha1.RegisterPodResourcesListerServer(server, podresources.NewV1alpha1PodResourcesServer(podsProvider, devicesProvider))</div><div style="text-align: justify;"><span style="">	</span>podresourcesapi.RegisterPodResourcesListerServer(server, podresources.NewV1PodResourcesServer(podsProvider, devicesProvider, cpusProvider, memoryProvider))</div><div style="text-align: justify;"><span style="">	</span>l, err := util.CreateListener(socket)</div><div style="text-align: justify;"><span style="">	</span>if err != nil {</div><div style="text-align: justify;"><span style="">		</span>klog.ErrorS(err, "Failed to create listener for podResources endpoint")</div><div style="text-align: justify;"><span style="">		</span>os.Exit(1)</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="">	</span>if err := server.Serve(l); err != nil {</div><div style="text-align: justify;"><span style="">		</span>klog.ErrorS(err, "Failed to serve")</div><div style="text-align: justify;"><span style="">		</span>os.Exit(1)</div><div style="text-align: justify;"><span style="">	</span>}</div><div style="text-align: justify;">}</div></pre></div></div></div></foreignObject><text x="2158" y="994" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">// ListenAndServePodResources initializes a gRPC server to serve the PodResources service...</text></switch></g><path d="M 2158 805 L 2158 843.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2158 848.88 L 2154.5 841.88 L 2158 843.63 L 2161.5 841.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>