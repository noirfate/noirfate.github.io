<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than diagrams.net -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="3261px" height="3290px" viewBox="-0.5 -0.5 3261 3290" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2022-08-19T08:01:26.310Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/19.0.3 Chrome/102.0.5005.63 Electron/19.0.3 Safari/537.36&quot; etag=&quot;QCzm1LxoaPib6bpzLciy&quot; version=&quot;19.0.3&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;pJl5-mdczoil5iY8ySmy&quot; name=&quot;ç¬¬ 1 é¡µ&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs/><g><path d="M 1090 23 L 1090 0 L 1670 0 L 1670 23" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 1090 23 L 1090 240 L 1670 240 L 1670 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1090 23 L 1670 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1379.5" y="16">Run (cmd/kube-apiserver/app/server.go)</text></g><rect x="1090" y="20" width="580" height="220" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 578px; height: 1px; padding-top: 130px; margin-left: 1092px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// Run runs the specified APIServer.Â  This should never exit.</font><div><b>func Run(completeOptions completedServerRunOptions, stopCh &lt;-chan struct{})</b> error {</div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span>server, err := CreateServerChain(completeOptions, stopCh)</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return err</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><b><font color="#00994d">prepared, err := server.PrepareRun()</font></b></div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return err</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>return <b><font color="#00994d">prepared.Run(stopCh)</font></b></div><div>}</div></pre></div></div></div></foreignObject><text x="1092" y="134" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">// Run runs the specified APIServer.Â  This should never exit....</text></switch></g><path d="M 950 303 L 950 280 L 1810 280 L 1810 303" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 950 303 L 950 750 L 1810 750 L 1810 303" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 950 303 L 1810 303" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1379.5" y="296">PrepareRun (staging/src/k8s.io/apiserver/pkg/server/genericapiserver.go)</text></g><rect x="950" y="303" width="860" height="450" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 858px; height: 1px; padding-top: 528px; margin-left: 952px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// PrepareRun does post API installation setup steps. It calls recursively the same function of the delegates.</font><div><b>func (s *GenericAPIServer) PrepareRun() preparedGenericAPIServer</b> {</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// call previous server's PrepareRun in the delegate chain</font><br /></div><div><span style="">	</span><b><font color="#00994d">s.delegationTarget.PrepareRun()</font></b></div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// install Healthz, Livez handlers</font><br /></div><div><b><font color="#00994d"><span style="">	</span>s.installHealthz()</font></b></div><div><b><font color="#00994d"><span style="">	</span>s.installLivez()</font></b></div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// as soon as shutdown is initiated, readiness should start failing</font></div><div><span style="">	</span>readinessStopCh := s.lifecycleSignals.ShutdownInitiated.Signaled()</div><div><span style="">	</span>err := s.addReadyzShutdownCheck(readinessStopCh)</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>klog.Errorf("Failed to install readyz shutdown check %s", err)</div><div><span style="">	</span>}</div><div><span style="">	</span><b><font color="#00994d">s.installReadyz()</font></b></div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// Register audit backend preShutdownHook.</font></div><div><span style="">	</span>if s.AuditBackend != nil {</div><div><span style="">		</span>err := s.AddPreShutdownHook("audit-backend", func() error {</div><div><span style="">			</span>s.AuditBackend.Shutdown()</div><div><span style="">			</span>return nil</div><div><span style="">		</span>})</div><div><span style="">		</span>if err != nil {</div><div><span style="">			</span>klog.Errorf("Failed to add pre-shutdown hook for audit-backend %s", err)</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>return preparedGenericAPIServer{s}</div><div>}</div></pre></div></div></div></foreignObject><text x="952" y="532" fill="#000000" font-family="Helvetica" font-size="12px">// PrepareRun does post API installation setup steps. It calls recursively the same function of the delegates....</text></switch></g><path d="M 1035 813 L 1035 790 L 1725 790 L 1725 813" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1035 813 L 1035 1240 L 1725 1240 L 1725 813" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1035 813 L 1725 813" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1379.5" y="806">Run (staging/src/k8s.io/apiserver/pkg/server/genericapiserver.go)</text></g><rect x="1035" y="810" width="690" height="430" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 688px; height: 1px; padding-top: 1025px; margin-left: 1037px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// Run spawns the secure http server. It only returns if stopCh is closed</font><div><font color="#7f00ff">// or the secure port cannot be listened on initially.</font></div><div><b>func (s preparedGenericAPIServer) Run(stopCh &lt;-chan struct{})</b> error {</div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// run http server</font><br /></div><div><span style="">	</span><b><font color="#00994d">stoppedCh, listenerStoppedCh, err := s.NonBlockingRun(stopHttpServerCh, shutdownTimeout)</font></b></div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return err</div><div><span style="">	</span>}</div><div><span style="white-space: pre;">	</span>...<br /></div><div><br /></div><div><span style="">	</span>klog.V(1).Info("[graceful-termination] waiting for shutdown to be initiated")</div><div><span style="">	</span>&lt;-stopCh</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// run shutdown hooks directly. This includes deregistering from</font></div><div><font color="#7f00ff"><span style="">	</span>// the kubernetes endpoint in case of kube-apiserver.</font></div><div><span style="">	</span>func() {</div><div><span style="">		</span>defer close(preShutdownHooksHasStoppedCh)</div><div><span style="">		</span>err = s.RunPreShutdownHooks()</div><div><span style="">	</span>}()</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return err</div><div><span style="">	</span>}</div><div><span style="">	</span>klog.V(1).Info("[graceful-termination] RunPreShutdownHooks has completed")</div><div><span style="white-space: pre;">	</span>...<br /></div><div><br /></div><div><span style="">	</span>klog.V(1).Info("[graceful-termination] apiserver is exiting")</div><div><span style="">	</span>return nil</div><div>}</div></pre></div></div></div></foreignObject><text x="1037" y="1029" fill="#000000" font-family="Helvetica" font-size="12px">// Run spawns the secure http server. It only returns if stopCh is closed...</text></switch></g><path d="M 905 1303 L 905 1280 L 1855 1280 L 1855 1303" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 905 1303 L 905 1920 L 1855 1920 L 1855 1303" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 905 1303 L 1855 1303" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1379.5" y="1296">NonBlockingRun (staging/src/k8s.io/apiserver/pkg/server/genericapiserver.go)</text></g><rect x="904" y="1300" width="951" height="620" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 949px; height: 1px; padding-top: 1610px; margin-left: 906px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// NonBlockingRun spawns the secure http server. An error is</font><div><font color="#7f00ff">// returned if the secure port cannot be listened on.</font></div><div><font color="#7f00ff">// The returned channel is closed when the (asynchronous) termination is finished.</font></div><div><b>func (s preparedGenericAPIServer) NonBlockingRun</b>(stopCh &lt;-chan struct{}, shutdownTimeout time.Duration) (&lt;-chan struct{}, &lt;-chan struct{}, error) {</div><div><font color="#7f00ff"><span style="">	</span>// Use an stop channel to allow graceful shutdown without dropping audit events</font></div><div><font color="#7f00ff"><span style="">	</span>// after http server shutdown.</font></div><div><span style="">	</span>auditStopCh := make(chan struct{})</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// Start the audit backend before any request comes in. This means we must call Backend.Run</font></div><div><font color="#7f00ff"><span style="">	</span>// before http server start serving. Otherwise the Backend.ProcessEvents call might block.</font></div><div><span style="">	</span>if s.AuditBackend != nil {</div><div><span style="">		</span>if err := s.AuditBackend.Run(auditStopCh); err != nil {</div><div><span style="">			</span>return nil, nil, fmt.Errorf("failed to run the audit backend: %v", err)</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// Use an internal stop channel to allow cleanup of the listeners on error.</font></div><div><span style="">	</span>internalStopCh := make(chan struct{})</div><div><span style="">	</span>var stoppedCh &lt;-chan struct{}</div><div><span style="">	</span>var listenerStoppedCh &lt;-chan struct{}</div><div><span style="">	</span>if s.SecureServingInfo != nil &amp;&amp; s.Handler != nil {</div><div><span style="">		</span>var err error</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// run http server (staging/src/k8s.io/pkg/server/secure_serving.go)</font><br /></div><div><font color="#7f00ff"><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>// handle http requests in ServeHTTP<br /></font></div><div><span style="">		</span><b><font color="#00994d">stoppedCh, listenerStoppedCh, err = s.SecureServingInfo.Serve(s.Handler, shutdownTimeout, internalStopCh)</font></b></div><div><span style="">		</span>if err != nil {</div><div><span style="">			</span>close(internalStopCh)</div><div><span style="">			</span>close(auditStopCh)</div><div><span style="">			</span>return nil, nil, err</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div><span style="white-space: pre;">	</span>...<br /></div><div><br /></div><div><span style="">	</span><b><font color="#00994d">s.RunPostStartHooks(stopCh)</font></b></div><div><br /></div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// notify systemd</font><br /></div><div><span style="">	</span>if _, err := <b><font color="#00994d">systemd.SdNotify</font></b>(true, "READY=1\n"); err != nil {</div><div><span style="">		</span>klog.Errorf("Unable to send systemd daemon successful start message: %v\n", err)</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>return stoppedCh, listenerStoppedCh, nil</div><div>}</div></pre></div></div></div></foreignObject><text x="906" y="1614" fill="#000000" font-family="Helvetica" font-size="12px">// NonBlockingRun spawns the secure http server. An error is...</text></switch></g><path d="M 955 1983 L 955 1960 L 1805 1960 L 1805 1983" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 955 1983 L 955 2870 L 1805 2870 L 1805 1983" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 955 1983 L 1805 1983" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1379.5" y="1976">ServeHTTP (staging/src/k8s.io/kube-aggregator/pkg/apiserver/handler_proxy.go)</text></g><rect x="955" y="1980" width="850" height="890" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 848px; height: 1px; padding-top: 2425px; margin-left: 957px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><b>func (r *proxyHandler) ServeHTTP(w http.ResponseWriter, req *http.Request)</b> {<div><span style="">	</span>value := r.handlingInfo.Load()</div><div><span style="">	</span>if value == nil {</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// handle local api</font><br /></div><div><span style="">		</span><b><font color="#00994d">r.localDelegate.ServeHTTP(w, req)</font></b></div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><span style="">	</span>handlingInfo := value.(proxyHandlingInfo)</div><div><span style="">	</span>if handlingInfo.local {</div><div><span style="">		</span>if r.localDelegate == nil {</div><div><span style="">			</span>http.Error(w, "", http.StatusNotFound)</div><div><span style="">			</span>return</div><div><span style="">		</span>}</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// handle local api</font><br /></div><div><span style="">		</span><b><font color="#00994d">r.localDelegate.ServeHTTP(w, req)</font></b></div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><span style="white-space: pre;">	</span>...<br /></div><div><br /></div><div><span style="">	</span>user, ok := genericapirequest.UserFrom(req.Context())</div><div><span style="">	</span>if !ok {</div><div><span style="">		</span>proxyError(w, req, "missing user", http.StatusInternalServerError)</div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// write a new location based on the existing request pointed at the target service</font></div><div><span style="">	</span>location := &amp;url.URL{}</div><div><span style="">	</span>location.Scheme = "https"</div><div><span style="">	</span>rloc, err := r.serviceResolver.ResolveEndpoint(handlingInfo.serviceNamespace, handlingInfo.serviceName, handlingInfo.servicePort)</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>klog.Errorf("error resolving %s/%s: %v", handlingInfo.serviceNamespace, handlingInfo.serviceName, err)</div><div><span style="">		</span>proxyError(w, req, "service unavailable", http.StatusServiceUnavailable)</div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><span style="">	</span>location.Host = rloc.Host</div><div><span style="">	</span>location.Path = req.URL.Path</div><div><span style="">	</span>location.RawQuery = req.URL.Query().Encode()</div><div><br /></div><div><span style="">	</span><b><font color="#00994d">newReq, cancelFn := newRequestForProxy(location, req)</font></b></div><div><span style="">	</span>defer cancelFn()</div><div><br /></div><div><span style="">	</span>if handlingInfo.proxyRoundTripper == nil {</div><div><span style="">		</span>proxyError(w, req, "", http.StatusNotFound)</div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>proxyRoundTripper := handlingInfo.proxyRoundTripper</div><div><span style="">	</span>upgrade := httpstream.IsUpgradeRequest(req)</div><div><br /></div><div><span style="">	</span>proxyRoundTripper = transport.NewAuthProxyRoundTripper(user.GetName(), user.GetGroups(), user.GetExtra(), proxyRoundTripper)</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// If we are upgrading, then the upgrade path tries to use this request with the TLS config we provide, but it does</font></div><div><font color="#7f00ff"><span style="">	</span>// NOT use the proxyRoundTripper.Â  It's a direct dial that bypasses the proxyRoundTripper.Â  This means that we have to</font></div><div><font color="#7f00ff"><span style="">	</span>// attach the "correct" user headers to the request ahead of time.</font></div><div><span style="">	</span>if upgrade {</div><div><span style="">		</span>transport.SetAuthProxyHeaders(newReq, user.GetName(), user.GetGroups(), user.GetExtra())</div><div><span style="">	</span>}</div><div><span style="">	</span>handler := proxy.NewUpgradeAwareHandler(location, proxyRoundTripper, true, upgrade, &amp;responder{w: w})</div><div><span style="">	</span>utilflowcontrol.RequestDelegated(req.Context())</div><div><span style="">	</span><b><font color="#00994d">handler.ServeHTTP(w, newReq)</font></b></div><div>}</div></pre></div></div></div></foreignObject><text x="957" y="2429" fill="#000000" font-family="Helvetica" font-size="12px">func (r *proxyHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {...</text></switch></g><path d="M 0 2163 L 0 2140 L 890 2140 L 890 2163" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 2163 L 0 2690 L 890 2690 L 890 2163" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 2163 L 890 2163" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="444.5" y="2156">ServeHTTP (staging/src/k8s.io/apiserver/pkg/server/handler.go)</text></g><rect x="0" y="2160" width="890" height="530" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 888px; height: 1px; padding-top: 2425px; margin-left: 2px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// goRestfulContainer: handle restful requests<br />// nonGoRestfulMux: handle non restful requests</font><br /><b>func (d director) ServeHTTP(w http.ResponseWriter, req *http.Request)</b> {<br />	path := req.URL.Path<br /><br />	<font color="#7f00ff">// check to see if our webservices want to claim this path</font><br />	<b><font color="#00994d">for _, ws := range d.goRestfulContainer.RegisteredWebServices()</font></b> {<br />		switch {<br />		case ws.RootPath() == "/apis":<br /><font color="#7f00ff">			// if we are exactly /apis or /apis/, then we need special handling in loop.<br />			// normally these are passed to the nonGoRestfulMux, but if discovery is enabled, it will go directly.<br />			// We can't rely on a prefix match since /apis matches everything (see the big comment on Director above)</font><br />			if path == "/apis" || path == "/apis/" {<br />				klog.V(5).Infof("%v: %v %q satisfied by gorestful with webservice %v", d.name, req.Method, path, ws.RootPath())<br /><font color="#7f00ff">				// don't use servemux here because gorestful servemuxes get messed up when removing webservices<br />				// TODO fix gorestful, remove TPRs, or stop using gorestful</font><br />				<b><font color="#00994d">d.goRestfulContainer.Dispatch(w, req)</font></b><br />				return<br />			}<br /><br />		case strings.HasPrefix(path, ws.RootPath()):<br />			<font color="#7f00ff">// ensure an exact match or a path boundary match</font><br />			if len(path) == len(ws.RootPath()) || path[len(ws.RootPath())] == '/' {<br />				klog.V(5).Infof("%v: %v %q satisfied by gorestful with webservice %v", d.name, req.Method, path, ws.RootPath())<br /><font color="#7f00ff">				// don't use servemux here because gorestful servemuxes get messed up when removing webservices<br />				// TODO fix gorestful, remove TPRs, or stop using gorestful</font><br />				<b><font color="#00994d">d.goRestfulContainer.Dispatch(w, req)</font></b><br />				return<br />			}<br />		}<br />	}<br /><br /><font color="#7f00ff">	// if we didn't find a match, then we just skip gorestful altogether</font><br />	klog.V(5).Infof("%v: %v %q satisfied by nonGoRestful", d.name, req.Method, path)<br />	<b><font color="#00994d">d.nonGoRestfulMux.ServeHTTP(w, req)</font></b><br />}<br /></pre></div></div></div></foreignObject><text x="2" y="2429" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">// goRestfulContainer: handle restful requests...</text></switch></g><path d="M 2030 1588 L 2030 1565 L 3260 1565 L 3260 1588" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2030 1588 L 2030 3285 L 3260 3285 L 3260 1588" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2030 1588 L 3260 1588" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="2644.5" y="1581">ServeHTTP (staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/customresource_handler.go)</text></g><rect x="2030" y="1585" width="1230" height="1700" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1228px; height: 1px; padding-top: 2435px; margin-left: 2032px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><b>func (r *crdHandler) ServeHTTP(w http.ResponseWriter, req *http.Request)</b> {<div><span style="">	</span>ctx := req.Context()</div><div><span style="">	</span><b><font color="#00994d">requestInfo, ok := apirequest.RequestInfoFrom(ctx)</font></b></div><div><span style="">	</span>if !ok {</div><div><span style="">		</span>responsewriters.ErrorNegotiated(</div><div><span style="">			</span>apierrors.NewInternalError(fmt.Errorf("no RequestInfo found in the context")),</div><div><span style="">			</span>Codecs, schema.GroupVersion{}, w, req,</div><div><span style="">		</span>)</div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// not crd request, pass it to other handler</font><br /></div><div><span style="">	</span>if !requestInfo.IsResourceRequest {</div><div><span style="">		</span>pathParts := splitPath(requestInfo.Path)</div><div><span style="">		</span>// only match /apis/&lt;group&gt;/&lt;version&gt;</div><div><span style="">		</span>// only registered under /apis</div><div><span style="">		</span>if len(pathParts) == 3 {</div><div><span style="">			</span>r.versionDiscoveryHandler.ServeHTTP(w, req)</div><div><span style="">			</span>return</div><div><span style="">		</span>}</div><div><span style="">		</span>// only match /apis/&lt;group&gt;</div><div><span style="">		</span>if len(pathParts) == 2 {</div><div><span style="">			</span>r.groupDiscoveryHandler.ServeHTTP(w, req)</div><div><span style="">			</span>return</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span>r.delegate.ServeHTTP(w, req)</div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>crdName := requestInfo.Resource + "." + requestInfo.APIGroup</div><div><span style="">	</span>crd, err := r.crdLister.Get(crdName)</div><div><span style="white-space: pre;">	</span>...<br /></div><div><br /></div><div><span style="">	</span>// if the scope in the CRD and the scope in request differ (with exception of the verbs in possiblyAcrossAllNamespacesVerbs</div><div><span style="">	</span>// for namespaced resources), pass request to the delegate, which is supposed to lead to a 404.</div><div><span style="">	</span>namespacedCRD, namespacedReq := crd.Spec.Scope == apiextensionsv1.NamespaceScoped, len(requestInfo.Namespace) &gt; 0</div><div><span style="">	</span>if !namespacedCRD &amp;&amp; namespacedReq {</div><div><span style="">		</span>r.delegate.ServeHTTP(w, req)</div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><span style="">	</span>if namespacedCRD &amp;&amp; !namespacedReq &amp;&amp; !possiblyAcrossAllNamespacesVerbs.Has(requestInfo.Verb) {</div><div><span style="">		</span>r.delegate.ServeHTTP(w, req)</div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>if !apiextensionshelpers.HasServedCRDVersion(crd, requestInfo.APIVersion) {</div><div><span style="">		</span>r.delegate.ServeHTTP(w, req)</div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>// There is a small chance that a CRD is being served because NamesAccepted condition is true,</div><div><span style="">	</span>// but it becomes "unserved" because another names update leads to a conflict</div><div><span style="">	</span>// and EstablishingController wasn't fast enough to put the CRD into the Established condition.</div><div><span style="">	</span>// We accept this as the problem is small and self-healing.</div><div><span style="">	</span>if !apiextensionshelpers.IsCRDConditionTrue(crd, apiextensionsv1.NamesAccepted) &amp;&amp;</div><div><span style="">		</span>!apiextensionshelpers.IsCRDConditionTrue(crd, apiextensionsv1.Established) {</div><div><span style="">		</span>r.delegate.ServeHTTP(w, req)</div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>terminating := apiextensionshelpers.IsCRDConditionTrue(crd, apiextensionsv1.Terminating)</div><div><br /></div><div><span style="">	</span><b><font color="#00994d">crdInfo, err := r.getOrCreateServingInfoFor(crd.UID, crd.Name)</font></b></div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span>if !hasServedCRDVersion(crdInfo.spec, requestInfo.APIVersion) {</div><div><span style="">		</span>r.delegate.ServeHTTP(w, req)</div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>deprecated := crdInfo.deprecated[requestInfo.APIVersion]</div><div><span style="">	</span>for _, w := range crdInfo.warnings[requestInfo.APIVersion] {</div><div><span style="">		</span>warning.AddWarning(req.Context(), "", w)</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>verb := strings.ToUpper(requestInfo.Verb)</div><div><span style="">	</span>resource := requestInfo.Resource</div><div><span style="">	</span>subresource := requestInfo.Subresource</div><div><span style="">	</span>scope := metrics.CleanScope(requestInfo)</div><div><span style="">	</span>supportedTypes := []string{</div><div><span style="">		</span>string(types.JSONPatchType),</div><div><span style="">		</span>string(types.MergePatchType),</div><div><span style="">	</span>}</div><div><span style="">	</span>if utilfeature.DefaultFeatureGate.Enabled(features.ServerSideApply) {</div><div><span style="">		</span>supportedTypes = append(supportedTypes, string(types.ApplyPatchType))</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>var handlerFunc http.HandlerFunc</div><div><span style="">	</span>subresources, err := apiextensionshelpers.GetSubresourcesForVersion(crd, requestInfo.APIVersion)</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>utilruntime.HandleError(err)</div><div><span style="">		</span>responsewriters.ErrorNegotiated(</div><div><span style="">			</span>apierrors.NewInternalError(fmt.Errorf("could not properly serve the subresource")),</div><div><span style="">			</span>Codecs, schema.GroupVersion{Group: requestInfo.APIGroup, Version: requestInfo.APIVersion}, w, req,</div><div><span style="">		</span>)</div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><span style="">	</span>switch {</div><div><span style="">	</span>case subresource == "status" &amp;&amp; subresources != nil &amp;&amp; subresources.Status != nil:</div><div><span style="">		</span>handlerFunc = r.serveStatus(w, req, requestInfo, crdInfo, terminating, supportedTypes)</div><div><span style="">	</span>case subresource == "scale" &amp;&amp; subresources != nil &amp;&amp; subresources.Scale != nil:</div><div><span style="">		</span>handlerFunc = r.serveScale(w, req, requestInfo, crdInfo, terminating, supportedTypes)</div><div><span style="">	</span>case len(subresource) == 0:</div><div><span style="">		</span>handlerFunc = r.serveResource(w, req, requestInfo, crdInfo, crd, terminating, supportedTypes)</div><div><span style="">	</span>default:</div><div><span style="">		</span>responsewriters.ErrorNegotiated(</div><div><span style="">			</span>apierrors.NewNotFound(schema.GroupResource{Group: requestInfo.APIGroup, Resource: requestInfo.Resource}, requestInfo.Name),</div><div><span style="">			</span>Codecs, schema.GroupVersion{Group: requestInfo.APIGroup, Version: requestInfo.APIVersion}, w, req,</div><div><span style="">		</span>)</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>if handlerFunc != nil {</div><div><span style="">		</span>handlerFunc = metrics.InstrumentHandlerFunc(verb, requestInfo.APIGroup, requestInfo.APIVersion, resource, subresource, scope, metrics.APIServerComponent, deprecated, "", handlerFunc)</div><div><span style="">		</span>handler := genericfilters.WithWaitGroup(handlerFunc, longRunningFilter, crdInfo.waitGroup)</div><div><span style="">		</span><b><font color="#00994d">handler.ServeHTTP(w, req)</font></b></div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div>}</div></pre></div></div></div></foreignObject><text x="2032" y="2439" fill="#000000" font-family="Helvetica" font-size="12px">func (r *crdHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {...</text></switch></g><path d="M 1805 2425 L 2023.63 2425" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2028.88 2425 L 2021.88 2428.5 L 2023.63 2425 L 2021.88 2421.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1380 240 L 1380 273.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1380 278.88 L 1376.5 271.88 L 1380 273.63 L 1383.5 271.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1380 753 L 1380 783.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1380 788.88 L 1376.5 781.88 L 1380 783.63 L 1383.5 781.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1380 1240 L 1380 1273.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1380 1278.88 L 1376.5 1271.88 L 1380 1273.63 L 1383.5 1271.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1379.5 1920 L 1379.5 1940 L 1379.84 1953.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1379.97 1958.88 L 1376.3 1951.97 L 1379.84 1953.63 L 1383.3 1951.8 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 955 2425 L 896.37 2425" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 891.12 2425 L 898.12 2421.5 L 896.37 2425 L 898.12 2428.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>