<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than diagrams.net -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="2281px" height="3941px" viewBox="-0.5 -0.5 2281 3941" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2022-09-20T06:37:48.025Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/19.0.3 Chrome/102.0.5005.63 Electron/19.0.3 Safari/537.36&quot; etag=&quot;yxQCX7zy6DOeSegdZXPs&quot; version=&quot;19.0.3&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;rWxG2E4ponfb4l1Yx8Aa&quot; name=&quot;第 1 页&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs/><g><path d="M 890 23 L 890 0 L 1240 0 L 1240 23" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 890 23 L 890 100 L 1240 100 L 1240 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 890 23 L 1240 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1064.5" y="16">main (cmd/kube-scheduler/scheduler.go)</text></g><rect x="890" y="20" width="350" height="80" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 348px; height: 1px; padding-top: 60px; margin-left: 892px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><b>func main()</b> {<div><span style="">	</span><b><font color="#00994d">command := app.NewSchedulerCommand()</font></b></div><div><span style="">	</span><b><font color="#00994d">code := cli.Run(command)</font></b></div><div><span style="">	</span>os.Exit(code)</div><div>}</div></pre></div></div></div></foreignObject><text x="892" y="64" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">func main() {...</text></switch></g><path d="M 767 153 L 767 130 L 1363 130 L 1363 153" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 767 153 L 767 370 L 1363 370 L 1363 153" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 767 153 L 1363 153" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1064.5" y="146">NewSchedulerCommand (cmd/kube-scheduler/app/server.go)</text></g><rect x="767" y="150" width="596" height="220" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 594px; height: 1px; padding-top: 260px; margin-left: 769px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// NewSchedulerCommand creates a *cobra.Command object with default parameters and registryOptions</font><div><b>func NewSchedulerCommand</b>(registryOptions ...Option) *cobra.Command {</div><div><span style="">	</span>opts := options.NewOptions()</div><div><br /></div><div><span style="">	</span>cmd := &amp;cobra.Command{</div><div><span style="">		</span>Use: "kube-scheduler",</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>...<br /></div><div><span style="">		</span>RunE: func(cmd *cobra.Command, args []string) error {</div><div><span style="">			</span><b><font color="#00994d">return runCommand(cmd, opts, registryOptions...)</font></b></div><div><span style="">		</span>},</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span>}</div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span>return cmd</div><div>}</div></pre></div></div></div></foreignObject><text x="769" y="264" fill="#000000" font-family="Helvetica" font-size="12px">// NewSchedulerCommand creates a *cobra.Command object with default parameters and registryOptions...</text></switch></g><path d="M 760 423 L 760 400 L 1370 400 L 1370 423" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 760 423 L 760 570 L 1370 570 L 1370 423" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 760 423 L 1370 423" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1064.5" y="416">runCommand (cmd/kube-scheduler/app/server.go)</text></g><rect x="760" y="420" width="610" height="150" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 608px; height: 1px; padding-top: 495px; margin-left: 762px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// runCommand runs the scheduler.</font><div><b>func runCommand</b>(cmd *cobra.Command, opts *options.Options, registryOptions ...Option) error {</div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span><b><font color="#00994d">cc, sched, err := Setup(ctx, opts, registryOptions...)</font></b></div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return err</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><b><font color="#00994d">return Run(ctx, cc, sched)</font></b></div><div>}</div></pre></div></div></div></foreignObject><text x="762" y="499" fill="#000000" font-family="Helvetica" font-size="12px">// runCommand runs the scheduler....</text></switch></g><path d="M 0 633 L 0 610 L 990 610 L 990 633" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 633 L 0 1070 L 990 1070 L 990 633" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 633 L 990 633" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="494.5" y="626">Setup (cmd/kube-scheduler/app/server.go)</text></g><rect x="0" y="630" width="990" height="440" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 988px; height: 1px; padding-top: 850px; margin-left: 2px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// Setup creates a completed config and a scheduler based on the command args and options</font><div><b>func Setup</b>(ctx context.Context, opts *options.Options, outOfTreeRegistryOptions ...Option) (*schedulerserverconfig.CompletedConfig, *scheduler.Scheduler, error) {</div><div><span style="white-space: pre;">	</span>...</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// create event broadcaster, send schedule event to nodes</font><br /></div><div><span style="">	</span>recorderFactory := getRecorderFactory(&amp;cc)</div><div><span style="">	</span>completedProfiles := make([]kubeschedulerconfig.KubeSchedulerProfile, 0)</div><div><span style="">	</span><font color="#7f00ff">// Create the scheduler.</font></div><div><span style="">	</span><b><font color="#00994d">sched, err := scheduler.New</font></b>(cc.Client,</div><div><span style="">		</span>cc.InformerFactory,</div><div><span style="">		</span>cc.DynInformerFactory,</div><div><span style="">		</span>recorderFactory,</div><div><span style="">		</span>ctx.Done(),</div><div><span style="">		</span>scheduler.WithComponentConfigVersion(cc.ComponentConfig.TypeMeta.APIVersion),</div><div><span style="">		</span>scheduler.WithKubeConfig(cc.KubeConfig),</div><div><span style="">		</span>scheduler.WithProfiles(cc.ComponentConfig.Profiles...),</div><div><span style="">		</span>scheduler.WithPercentageOfNodesToScore(cc.ComponentConfig.PercentageOfNodesToScore),</div><div><span style="">		</span>scheduler.WithFrameworkOutOfTreeRegistry(outOfTreeRegistry),</div><div><span style="">		</span>scheduler.WithPodMaxBackoffSeconds(cc.ComponentConfig.PodMaxBackoffSeconds),</div><div><span style="">		</span>scheduler.WithPodInitialBackoffSeconds(cc.ComponentConfig.PodInitialBackoffSeconds),</div><div><span style="">		</span>scheduler.WithPodMaxInUnschedulablePodsDuration(cc.PodMaxInUnschedulablePodsDuration),</div><div><span style="">		</span>scheduler.WithExtenders(cc.ComponentConfig.Extenders...),</div><div><span style="">		</span>scheduler.WithParallelism(cc.ComponentConfig.Parallelism),</div><div><span style="">		</span>scheduler.WithBuildFrameworkCapturer(func(profile kubeschedulerconfig.KubeSchedulerProfile) {</div><div><span style="">			</span>// Profiles are processed during Framework instantiation to set default plugins and configurations. Capturing them for logging</div><div><span style="">			</span>completedProfiles = append(completedProfiles, profile)</div><div><span style="">		</span>}),</div><div><span style="">	</span>)</div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span>return &amp;cc, sched, nil</div><div>}</div></pre></div></div></div></foreignObject><text x="2" y="854" fill="#000000" font-family="Helvetica" font-size="12px">// Setup creates a completed config and a scheduler based on the command args and options...</text></switch></g><path d="M 110 1122 L 110 1099 L 880 1099 L 880 1122" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 110 1122 L 110 1969 L 880 1969 L 880 1122" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 110 1122 L 880 1122" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="494.5" y="1115">New (pkg/scheduler/scheduler.go)</text></g><rect x="110" y="1119" width="770" height="850" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 768px; height: 1px; padding-top: 1544px; margin-left: 112px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// New returns a Scheduler</font><div><b>func New</b>(client clientset.Interface,</div><div><span style="">	</span>informerFactory informers.SharedInformerFactory,</div><div><span style="">	</span>dynInformerFactory dynamicinformer.DynamicSharedInformerFactory,</div><div><span style="">	</span>recorderFactory profile.RecorderFactory,</div><div><span style="">	</span>stopCh &lt;-chan struct{},</div><div><span style="">	</span>opts ...Option) (*Scheduler, error) {</div><div><br /></div><div><span style="">	</span>...</div><div><span style="">	</span><font color="#7f00ff">// The nominator will be passed all the way to framework instantiation.</font></div><div><span style="">	</span>nominator := internalqueue.NewPodNominator(podLister)</div><div><span style="">	</span>snapshot := internalcache.NewEmptySnapshot()</div><div><span style="">	</span>clusterEventMap := make(map[framework.ClusterEvent]sets.String)</div><div><span style="">	</span><font color="#7f00ff">// create schedule framework</font><br /></div><div><span style="">	</span><b><font color="#00994d">profiles, err := profile.NewMap</font></b>(options.profiles, registry, recorderFactory,</div><div><span style="">		</span>frameworkruntime.WithComponentConfigVersion(options.componentConfigVersion),</div><div><span style="">		</span>frameworkruntime.WithClientSet(client),</div><div><span style="">		</span>frameworkruntime.WithKubeConfig(options.kubeConfig),</div><div><span style="">		</span>frameworkruntime.WithInformerFactory(informerFactory),</div><div><span style="">		</span>frameworkruntime.WithSnapshotSharedLister(snapshot),</div><div><span style="">		</span>frameworkruntime.WithPodNominator(nominator),</div><div><span style="">		</span>frameworkruntime.WithCaptureProfile(frameworkruntime.CaptureProfile(options.frameworkCapturer)),</div><div><span style="">		</span>frameworkruntime.WithClusterEventMap(clusterEventMap),</div><div><span style="">		</span>frameworkruntime.WithParallelism(int(options.parallelism)),</div><div><span style="">		</span>frameworkruntime.WithExtenders(extenders),</div><div><span style="">	</span>)</div><div><span style="">	</span><br /></div><div><span style="">	</span>...<br /></div><div><span style="">	</span><font color="#7f00ff">// create pod scheduling queue</font><br /></div><div><span style="">	</span><b><font color="#00994d">podQueue := internalqueue.NewSchedulingQueue</font></b>(</div><div><span style="">		</span>profiles[options.profiles[0].SchedulerName].QueueSortFunc(),</div><div><span style="">		</span>informerFactory,</div><div><span style="">		</span>internalqueue.WithPodInitialBackoffDuration(time.Duration(options.podInitialBackoffSeconds)*time.Second),</div><div><span style="">		</span>internalqueue.WithPodMaxBackoffDuration(time.Duration(options.podMaxBackoffSeconds)*time.Second),</div><div><span style="">		</span>internalqueue.WithPodNominator(nominator),</div><div><span style="">		</span>internalqueue.WithClusterEventMap(clusterEventMap),</div><div><span style="">		</span>internalqueue.WithPodMaxInUnschedulablePodsDuration(options.podMaxInUnschedulablePodsDuration),</div><div><span style="">	</span>)</div><div><br /></div><div><span style="">	</span>schedulerCache := internalcache.New(durationToExpireAssumedPod, stopEverything)</div><div><span style="">	</span>...<br /></div><div><span style="">	</span><font color="#7f00ff">// craete scheduler</font><br /></div><div><span style="">	</span><b><font color="#00994d">sched := newScheduler</font></b>(</div><div><span style="">		</span>schedulerCache,</div><div><span style="">		</span>extenders,</div><div><span style="">		</span>internalqueue.MakeNextPodFunc(podQueue),</div><div><span style="">		</span>MakeDefaultErrorFunc(client, podLister, podQueue, schedulerCache),</div><div><span style="">		</span>stopEverything,</div><div><span style="">		</span>podQueue,</div><div><span style="">		</span>profiles,</div><div><span style="">		</span>client,</div><div><span style="">		</span>snapshot,</div><div><span style="">		</span>options.percentageOfNodesToScore,</div><div><span style="">	</span>)</div><div><span style="">	</span><font color="#7f00ff">// add event handlers for various informers</font><br /></div><div><span style="">	</span><b><font color="#00994d">addAllEventHandlers(sched, informerFactory, dynInformerFactory, unionedGVKs(clusterEventMap))</font></b></div><div><br /></div><div><span style="">	</span>return sched, nil</div><div>}</div></pre></div></div></div></foreignObject><text x="112" y="1548" fill="#000000" font-family="Helvetica" font-size="12px">// New returns a Scheduler...</text></switch></g><path d="M 63.5 2023 L 63.5 2000 L 926.5 2000 L 926.5 2023" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 63.5 2023 L 63.5 3080 L 926.5 3080 L 926.5 2023" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 63.5 2023 L 926.5 2023" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="494.5" y="2016">addAllEventHandlers (pkg/scheduler/eventhandlers.go)</text></g><rect x="63.5" y="2020" width="863" height="1060" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 861px; height: 1px; padding-top: 2550px; margin-left: 66px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// addAllEventHandlers is a helper function used in tests and in Scheduler</font><div><font color="#7f00ff">// to add event handlers for various informers.</font></div><div><b>func addAllEventHandlers</b>(</div><div><span style="">	</span>sched *Scheduler,</div><div><span style="">	</span>informerFactory informers.SharedInformerFactory,</div><div><span style="">	</span>dynInformerFactory dynamicinformer.DynamicSharedInformerFactory,</div><div><span style="">	</span>gvkMap map[framework.GVK]framework.ActionType,</div><div>) {</div><div><span style="">	</span><font color="#7f00ff">// scheduled pod cache</font></div><div><span style="">	</span><b><font color="#00994d">informerFactory.Core().V1().Pods().Informer().AddEventHandler</font></b>(</div><div><span style="">		</span>cache.FilteringResourceEventHandler{</div><div><span style="">			</span>FilterFunc: func(obj interface{}) bool {</div><div><span style="">				</span>switch t := obj.(type) {</div><div><span style="">				</span>case *v1.Pod:</div><div><span style="">					</span>return assignedPod(t)</div><div><span style="">				</span>case cache.DeletedFinalStateUnknown:</div><div><span style="">					</span>if _, ok := t.Obj.(*v1.Pod); ok {</div><div><span style="">						</span>// The carried object may be stale, so we don't use it to check if</div><div><span style="">						</span>// it's assigned or not. Attempting to cleanup anyways.</div><div><span style="">						</span>return true</div><div><span style="">					</span>}</div><div><span style="">					</span>utilruntime.HandleError(fmt.Errorf("unable to convert object %T to *v1.Pod in %T", obj, sched))</div><div><span style="">					</span>return false</div><div><span style="">				</span>default:</div><div><span style="">					</span>utilruntime.HandleError(fmt.Errorf("unable to handle object in %T: %T", sched, obj))</div><div><span style="">					</span>return false</div><div><span style="">				</span>}</div><div><span style="">			</span>},</div><div><span style="">			</span>Handler: cache.ResourceEventHandlerFuncs{</div><div><span style="">				</span>AddFunc:    <b><font color="#00994d">sched.addPodToCache,</font></b></div><div><span style="">				</span>UpdateFunc:   <b><font color="#00994d">sched.updatePodInCache,</font></b></div><div><span style="">				</span>DeleteFunc:   <b><font color="#00994d">sched.deletePodFromCache,</font></b></div><div><span style="">			</span>},</div><div><span style="">		</span>},</div><div><span style="">	</span>)</div><div><span style="">	</span><font color="#7f00ff">// unscheduled pod queue</font></div><div><span style="">	</span><b><font color="#00994d">informerFactory.Core().V1().Pods().Informer().AddEventHandler</font></b>(</div><div><span style="">		</span>cache.FilteringResourceEventHandler{</div><div><span style="">			</span>FilterFunc: func(obj interface{}) bool {</div><div><span style="">				</span>switch t := obj.(type) {</div><div><span style="">				</span>case *v1.Pod:</div><div><span style="">					</span>return !assignedPod(t) &amp;&amp; responsibleForPod(t, sched.Profiles)</div><div><span style="">				</span>case cache.DeletedFinalStateUnknown:</div><div><span style="">					</span>if pod, ok := t.Obj.(*v1.Pod); ok {</div><div><span style="">						</span>// The carried object may be stale, so we don't use it to check if</div><div><span style="">						</span>// it's assigned or not.</div><div><span style="">						</span>return responsibleForPod(pod, sched.Profiles)</div><div><span style="">					</span>}</div><div><span style="">					</span>utilruntime.HandleError(fmt.Errorf("unable to convert object %T to *v1.Pod in %T", obj, sched))</div><div><span style="">					</span>return false</div><div><span style="">				</span>default:</div><div><span style="">					</span>utilruntime.HandleError(fmt.Errorf("unable to handle object in %T: %T", sched, obj))</div><div><span style="">					</span>return false</div><div><span style="">				</span>}</div><div><span style="">			</span>},</div><div><span style="">			</span>Handler: cache.ResourceEventHandlerFuncs{</div><div><span style="">				</span>AddFunc:    <b><font color="#00994d">sched.addPodToSchedulingQueue,</font></b></div><div><span style="">				</span>UpdateFunc:   <b><font color="#00994d">sched.updatePodInSchedulingQueue,</font></b></div><div><span style="">				</span>DeleteFunc:   <b><font color="#00994d">sched.deletePodFromSchedulingQueue,</font></b></div><div><span style="">			</span>},</div><div><span style="">		</span>},</div><div><span style="">	</span>)</div><div><br /></div><div><span style="">	</span><b><font color="#00994d">informerFactory.Core().V1().Nodes().Informer().AddEventHandler</font></b>(</div><div><span style="">		</span>cache.ResourceEventHandlerFuncs{</div><div><span style="">			</span>AddFunc:    <b><font color="#00994d">sched.addNodeToCache,</font></b></div><div><span style="">			</span>UpdateFunc:   <b><font color="#00994d">sched.updateNodeInCache,</font></b></div><div><span style="">			</span>DeleteFunc:   <b><font color="#00994d">sched.deleteNodeFromCache,</font></b></div><div><span style="">		</span>},</div><div><span style="">	</span>)</div><div><br /></div><div><span style="white-space: pre;">	</span>...<br /></div><div>}</div></pre></div></div></div></foreignObject><text x="66" y="2554" fill="#000000" font-family="Helvetica" font-size="12px">// addAllEventHandlers is a helper function used in tests and in Scheduler...</text></switch></g><path d="M 1080 633 L 1080 610 L 2280 610 L 2280 633" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1080 633 L 1080 1590 L 2280 1590 L 2280 633" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1080 633 L 2280 633" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1679.5" y="626">Run (cmd/kube-scheduler/app/server.go)</text></g><rect x="1080" y="630" width="1200" height="960" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1198px; height: 1px; padding-top: 1110px; margin-left: 1082px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// Run executes the scheduler based on the given configuration. It only returns on error or when context is done.</font><div><b>func Run</b>(ctx context.Context, cc *schedulerserverconfig.CompletedConfig, sched *scheduler.Scheduler) error {</div><div><span style="">	</span><font color="#7f00ff">// To help debugging, immediately log version</font></div><div><span style="">	</span>klog.InfoS("Starting Kubernetes Scheduler", "version", version.Get())</div><div><span style="white-space: pre;">	</span>...<br /></div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// Start up the healthz server</font>.</div><div><span style="">	</span>if cc.SecureServing != nil {</div><div><span style="">		</span>handler := buildHandlerChain(newHealthzAndMetricsHandler(&amp;cc.ComponentConfig, cc.InformerFactory, isLeader, checks...), cc.Authentication.Authenticator, cc.Authorization.Authorizer)</div><div><span style="">		</span>// TODO: handle stoppedCh and listenerStoppedCh returned by c.SecureServing.Serve</div><div><span style="">		</span>if _, _, err := <b><font color="#00994d">cc.SecureServing.Serve(handler, 0, ctx.Done())</font></b>; err != nil {</div><div><span style="">			</span>// fail early for secure handlers, removing the old error loop from above</div><div><span style="">			</span>return fmt.Errorf("failed to start secure server: %v", err)</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// Start all informers.</font></div><div><span style="">	</span>cc.InformerFactory.Start(ctx.Done())</div><div><span style="">	</span><font color="#7f00ff">// DynInformerFactory can be nil in tests.</font></div><div><span style="">	</span>if cc.DynInformerFactory != nil {</div><div><span style="">		</span>cc.DynInformerFactory.Start(ctx.Done())</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// Wait for all caches to sync before scheduling.</font></div><div><span style="">	</span>cc.InformerFactory.WaitForCacheSync(ctx.Done())</div><div><span style="">	</span><font color="#7f00ff">// DynInformerFactory can be nil in tests.</font></div><div><span style="">	</span>if cc.DynInformerFactory != nil {</div><div><span style="">		</span>cc.DynInformerFactory.WaitForCacheSync(ctx.Done())</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// If leader election is enabled, runCommand via LeaderElector until done and exit.</font></div><div><span style="">	</span>if cc.LeaderElection != nil {</div><div><span style="">		</span>cc.LeaderElection.Callbacks = leaderelection.LeaderCallbacks{</div><div><span style="">			</span>OnStartedLeading: func(ctx context.Context) {</div><div><span style="">				</span>close(waitingForLeader)</div><div><span style="">				</span>sched.Run(ctx)</div><div><span style="">			</span>},</div><div><span style="">			</span>OnStoppedLeading: func() {</div><div><span style="">				</span>select {</div><div><span style="">				</span>case &lt;-ctx.Done():</div><div><span style="">					</span>// We were asked to terminate. Exit 0.</div><div><span style="">					</span>klog.InfoS("Requested to terminate, exiting")</div><div><span style="">					</span>os.Exit(0)</div><div><span style="">				</span>default:</div><div><span style="">					</span>// We lost the lock.</div><div><span style="">					</span>klog.ErrorS(nil, "Leaderelection lost")</div><div><span style="">					</span>klog.FlushAndExit(klog.ExitFlushTimeout, 1)</div><div><span style="">				</span>}</div><div><span style="">			</span>},</div><div><span style="">		</span>}</div><div><span style="">		</span>leaderElector, err := leaderelection.NewLeaderElector(*cc.LeaderElection)</div><div><span style="">		</span>if err != nil {</div><div><span style="">			</span>return fmt.Errorf("couldn't create leader elector: %v", err)</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span>leaderElector.Run(ctx)</div><div><br /></div><div><span style="">		</span>return fmt.Errorf("lost lease")</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// Leader election is disabled, so runCommand inline until done.</font></div><div><span style="">	</span>close(waitingForLeader)</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// run scheduler</font><br /></div><div><span style="">	</span><b><font color="#00994d">sched.Run(ctx)</font></b></div><div><span style="">	</span>return fmt.Errorf("finished without leader elect")</div><div>}</div></pre></div></div></div></foreignObject><text x="1082" y="1114" fill="#000000" font-family="Helvetica" font-size="12px">// Run executes the scheduler based on the given configuration. It only returns on error or when context is done....</text></switch></g><path d="M 1385 1647 L 1385 1624 L 1975 1624 L 1975 1647" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1385 1647 L 1385 1744 L 1975 1744 L 1975 1647" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1385 1647 L 1975 1647" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1679.5" y="1640">Run (pkg/scheduler/scheduler.go)</text></g><rect x="1385" y="1644" width="590" height="100" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 588px; height: 1px; padding-top: 1694px; margin-left: 1387px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// Run begins watching and scheduling. It starts scheduling and blocked until the context is done.</font><div><b>func (sched *Scheduler) Run</b>(ctx context.Context) {</div><div><span style="">	</span><font color="#7f00ff">// pump from podBackoffQ to activeQ</font><br /></div><div><span style="">	</span><b><font color="#00994d">sched.SchedulingQueue.Run()</font></b></div><div><span style="">	</span>wait.UntilWithContext(ctx, <b><font color="#00994d">sched.scheduleOne</font></b>, 0)</div><div><span style="">	</span>sched.SchedulingQueue.Close()</div><div>}</div></pre></div></div></div></foreignObject><text x="1387" y="1698" fill="#000000" font-family="Helvetica" font-size="12px">// Run begins watching and scheduling. It starts scheduling and blocked until the context is done....</text></switch></g><path d="M 1220 1803 L 1220 1780 L 2140 1780 L 2140 1803" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1220 1803 L 1220 3100 L 2140 3100 L 2140 1803" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1220 1803 L 2140 1803" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1679.5" y="1796">scheduleOne (pkg/scheduler/schedule_one.go)</text></g><rect x="1220" y="1800" width="920" height="1300" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 918px; height: 1px; padding-top: 2450px; margin-left: 1222px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// scheduleOne does the entire scheduling workflow for a single pod. It is serialized on the scheduling algorithm's host fitting.</font><div><b>func (sched *Scheduler) scheduleOne</b>(ctx context.Context) {</div><div><font color="#7f00ff"><span style="">	</span>// NextPod function initialized at NewScheduler via internalqueue.MakeNextPodFunc<br /></font></div><div><font color="#7f00ff"><span style="">	</span>// MakeNextPodFunc returns a function to retrieve the next pod from a given scheduling queue (pkg/scheduler/internal/queue/scheduling_queue.go)</font><br /></div><div><span style="">	</span><b><font color="#00994d">podInfo := sched.NextPod()</font></b></div><div><span style="">	</span>...<br /></div><div><br /></div><div><span style="">	</span>klog.V(3).InfoS("Attempting to schedule pod", "pod", klog.KObj(pod))</div><div><span style="">	</span>...<br /></div><div><font color="#7f00ff"><span style="">	</span>// schedulePod tries to schedule the given pod to one of the nodes in the node list<br /></font></div><div><font color="#7f00ff"><span style="">	</span>// If it succeeds, it will return the name of the node, else it will return a FitError with reasons<br /></font></div><div><font color="#7f00ff"><span style="">	</span>// SchedulePod at pkg/scheduler/schedule_one.go</font><br /></div><div><span style="">	</span><b><font color="#00994d">scheduleResult, err := sched.SchedulePod(schedulingCycleCtx, fwk, state, pod)</font></b></div><div><span style="">	</span>if err != nil {</div><div><font color="#7f00ff"><span style="">		</span>// SchedulePod() may have failed because the pod would not fit on any host, so we try to</font></div><div><font color="#7f00ff"><span style="">		</span>// preempt, with the expectation that the next time the pod is tried for scheduling it</font></div><div><font color="#7f00ff"><span style="">		</span>// will fit due to the preemption. It is also possible that a different pod will schedule</font></div><div><font color="#7f00ff"><span style="">		</span>// into the resources that were preempted, but this is harmless.</font></div><div><span style="">		</span>var nominatingInfo *framework.NominatingInfo</div><div><span style="">		</span>if fitError, ok := err.(*framework.FitError); ok {</div><div><span style="">			</span>if !fwk.HasPostFilterPlugins() {</div><div><span style="">				</span>klog.V(3).InfoS("No PostFilter plugins are registered, so no preemption will be performed")</div><div><span style="">			</span>} else {</div><div><span style="">				</span><font color="#7f00ff">// Run PostFilter plugins to try to make the pod schedulable in a future scheduling cycle.</font></div><div><span style="">				</span><b><font color="#00994d">result, status := fwk.RunPostFilterPlugins(ctx, state, pod, fitError.Diagnosis.NodeToStatusMap)</font></b></div><div><span style="">				</span>if status.Code() == framework.Error {</div><div><span style="">					</span>klog.ErrorS(nil, "Status after running PostFilter plugins for pod", "pod", klog.KObj(pod), "status", status)</div><div><span style="">				</span>} else {</div><div><span style="">					</span>fitError.Diagnosis.PostFilterMsg = status.Message()</div><div><span style="">					</span>klog.V(5).InfoS("Status after running PostFilter plugins for pod", "pod", klog.KObj(pod), "status", status)</div><div><span style="">				</span>}</div><div><span style="">				</span>if result != nil {</div><div><span style="">					</span>nominatingInfo = result.NominatingInfo</div><div><span style="">				</span>}</div><div><span style="">			</span>}</div><div><font color="#7f00ff"><span style="">			</span>// Pod did not fit anywhere, so it is counted as a failure. If preemption</font></div><div><font color="#7f00ff"><span style="">			</span>// succeeds, the pod should get counted as a success the next time we try to</font></div><div><font color="#7f00ff"><span style="">			</span>// schedule it. (hopefully)</font></div><div><span style="">			</span>metrics.PodUnschedulable(fwk.ProfileName(), metrics.SinceInSeconds(start))</div><div><span style="">		</span>}</div><div><span style="">	</span><span style="">	</span>...<br /></div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><span style="">	</span>metrics.SchedulingAlgorithmLatency.Observe(metrics.SinceInSeconds(start))</div><div><font color="#7f00ff"><span style="">	</span>// Tell the cache to assume that a pod now is running on a given node, even though it hasn't been bound yet.</font></div><div><font color="#7f00ff"><span style="">	</span>// This allows us to keep scheduling without waiting on binding to occur.</font></div><div><span style="">	</span>assumedPodInfo := podInfo.DeepCopy()</div><div><span style="">	</span>assumedPod := assumedPodInfo.Pod</div><div><font color="#7f00ff"><span style="">	</span>// assume modifies `assumedPod` by setting NodeName=scheduleResult.SuggestedHost</font></div><div><font color="#7f00ff"><span style="">	</span>// assumed pod has selected node, but not bind, use sched.Cache.AssumePod to save it in cache<br /></font></div><div><span style="">	</span><b><font color="#00994d">err = sched.assume(assumedPod, scheduleResult.SuggestedHost)</font></b></div><div><span style="">	</span>...<br /></div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// Run the Reserve method of reserve plugins.</font></div><div><span style="background-color: initial;"><span style="white-space: pre;">	</span>if sts := <b><font color="#00994d">fwk.RunReservePluginsReserve(schedulingCycleCtx, state, assumedPod, scheduleResult.SuggestedHost)</font></b>; !sts.IsSuccess() {</span><b style="color: rgb(0, 153, 77);"><br /></b></div><div><span style="">	</span>...<br /></div><div><span style="">	</span>}<br /></div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// Run "permit" plugins.</font></div><div><span style="">	</span><span style="background-color: initial;"><b><font color="#00994d">runPermitStatus := fwk.RunPermitPlugins(schedulingCycleCtx, state, assumedPod, scheduleResult.SuggestedHost)</font></b></span><br /></div><div><span style="">	</span>...<br /></div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// At the end of a successful scheduling cycle, pop and move up Pods if needed.</font></div><div><span style="">	</span>if len(podsToActivate.Map) != 0 {</div><div><span style="">		</span>sched.SchedulingQueue.Activate(podsToActivate.Map)</div><div><span style="">		</span>// Clear the entries after activation.</div><div><span style="">		</span>podsToActivate.Map = make(map[string]*v1.Pod)</div><div><span style="">	</span>}</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// bind the pod to its host asynchronously (we can do this b/c of the assumption step above).</font></div><div><span style="">	</span>go func() {</div><div><span style="">	</span><span style="">	</span>...<br /></div><div><font color="#7f00ff"><span style="">		</span>// Run "prebind" plugins.</font></div><div><span style="">		</span><b><font color="#00994d">preBindStatus := fwk.RunPreBindPlugins(bindingCycleCtx, state, assumedPod, scheduleResult.SuggestedHost)</font></b></div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>...<br /></div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// bind pod to node</font><br /></div><div><span style="">		</span><b><font color="#00994d">err := sched.bind(bindingCycleCtx, fwk, assumedPod, scheduleResult.SuggestedHost, state)</font></b></div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>...</div><div><span style="">		</span><font color="#7f00ff">// Run "postbind" plugins.</font></div><div><span style="">		</span><b><font color="#00994d">fwk.RunPostBindPlugins(bindingCycleCtx, state, assumedPod, scheduleResult.SuggestedHost)</font></b></div><div><br /></div><div><span style="">		</span><font color="#7f00ff">// At the end of a successful binding cycle, move up Pods if needed.</font></div><div><span style="">		</span>if len(podsToActivate.Map) != 0 {</div><div><span style="">			</span>sched.SchedulingQueue.Activate(podsToActivate.Map)</div><div><span style="">			</span>// Unlike the logic in scheduling cycle, we don't bother deleting the entries</div><div><span style="">			</span>// as `podsToActivate.Map` is no longer consumed.</div><div><span style="">		</span>}</div><div><span style="">	</span>}()</div><div>}</div></pre></div></div></div></foreignObject><text x="1222" y="2454" fill="#000000" font-family="Helvetica" font-size="12px">// scheduleOne does the entire scheduling workflow for a single pod. It is serialized on the scheduling algorithm's host fitting....</text></switch></g><path d="M 1065 100 L 1065 123.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1065 128.88 L 1061.5 121.88 L 1065 123.63 L 1068.5 121.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1065 370 L 1065 393.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1065 398.88 L 1061.5 391.88 L 1065 393.63 L 1068.5 391.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1065 570 L 1065 590 L 495 590 L 495 603.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 495 608.88 L 491.5 601.88 L 495 603.63 L 498.5 601.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1065 570 L 1065 590 L 1680 590 L 1680 603.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1680 608.88 L 1676.5 601.88 L 1680 603.63 L 1683.5 601.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 495 1070 L 495 1092.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 495 1097.88 L 491.5 1090.88 L 495 1092.63 L 498.5 1090.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 495 1969 L 495 1993.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 495 1998.88 L 491.5 1991.88 L 495 1993.63 L 498.5 1991.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1680 1590 L 1680 1617.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1680 1622.88 L 1676.5 1615.88 L 1680 1617.63 L 1683.5 1615.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1680 1744 L 1680 1773.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1680 1778.88 L 1676.5 1771.88 L 1680 1773.63 L 1683.5 1771.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1176.5 3163 L 1176.5 3140 L 2183.5 3140 L 2183.5 3163" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1176.5 3163 L 1176.5 3932 L 2183.5 3932 L 2183.5 3163" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1176.5 3163 L 2183.5 3163" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1679.5" y="3156">schedulePod (pkg/scheduler/schedule_one.go)</text></g><rect x="1176.5" y="3162" width="1007" height="770" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1005px; height: 1px; padding-top: 3547px; margin-left: 1179px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// schedulePod tries to schedule the given pod to one of the nodes in the node list.</font><div><font color="#7f00ff">// If it succeeds, it will return the name of the node.</font></div><div><font color="#7f00ff">// If it fails, it will return a FitError with reasons.</font></div><div><b>func (sched *Scheduler) schedulePod</b>(ctx context.Context, fwk framework.Framework, state *framework.CycleState, pod *v1.Pod) (result ScheduleResult, err error) {</div><div><span style="">	</span>trace := utiltrace.New("Scheduling", utiltrace.Field{Key: "namespace", Value: pod.Namespace}, utiltrace.Field{Key: "name", Value: pod.Name})</div><div><span style="">	</span>defer trace.LogIfLong(100 * time.Millisecond)</div><div><br /></div><div><span style="">	</span>if err := sched.Cache.UpdateSnapshot(sched.nodeInfoSnapshot); err != nil {</div><div><span style="">		</span>return result, err</div><div><span style="">	</span>}</div><div><span style="">	</span>trace.Step("Snapshotting scheduler cache and node infos done")</div><div><br /></div><div><span style="">	</span>if sched.nodeInfoSnapshot.NumNodes() == 0 {</div><div><span style="">		</span>return result, ErrNoNodesAvailable</div><div><span style="">	</span>}</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// findout suitable nodes for the pod</font><br /></div><div><span style="">	</span><b><font color="#00994d">feasibleNodes, diagnosis, err := sched.findNodesThatFitPod(ctx, fwk, state, pod)</font></b></div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return result, err</div><div><span style="">	</span>}</div><div><span style="">	</span>trace.Step("Computing predicates done")</div><div><br /></div><div><span style="">	</span>if len(feasibleNodes) == 0 {</div><div><span style="">		</span>return result, &amp;framework.FitError{</div><div><span style="">			</span>Pod:         pod,</div><div><span style="">			</span>NumAllNodes: sched.nodeInfoSnapshot.NumNodes(),</div><div><span style="">			</span>Diagnosis:   diagnosis,</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// When only one node after predicate, just use it.</font></div><div><span style="">	</span>if len(feasibleNodes) == 1 {</div><div><span style="">		</span>return ScheduleResult{</div><div><span style="">			</span>SuggestedHost:  feasibleNodes[0].Name,</div><div><span style="">			</span>EvaluatedNodes: 1 + len(diagnosis.NodeToStatusMap),</div><div><span style="">			</span>FeasibleNodes:  1,</div><div><span style="">		</span>}, nil</div><div><span style="">	</span>}</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// calculate node score</font><br /></div><div><span style="">	</span><b><font color="#00994d">priorityList, err := prioritizeNodes(ctx, sched.Extenders, fwk, state, pod, feasibleNodes)</font></b></div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return result, err</div><div><span style="">	</span>}</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// select the node which has the highest score</font><br /></div><div><span style="">	</span><b><font color="#00994d">host, err := selectHost(priorityList)</font></b></div><div><span style="">	</span>trace.Step("Prioritizing done")</div><div><br /></div><div><span style="">	</span>return ScheduleResult{</div><div><span style="">		</span>SuggestedHost:  host,</div><div><span style="">		</span>EvaluatedNodes: len(feasibleNodes) + len(diagnosis.NodeToStatusMap),</div><div><span style="">		</span>FeasibleNodes:  len(feasibleNodes),</div><div><span style="">	</span>}, err</div><div>}</div></pre></div></div></div></foreignObject><text x="1179" y="3551" fill="#000000" font-family="Helvetica" font-size="12px">// schedulePod tries to schedule the given pod to one of the nodes in the node list....</text></switch></g><path d="M 1680 3100 L 1680 3133.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1680 3138.88 L 1676.5 3131.88 L 1680 3133.63 L 1683.5 3131.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>