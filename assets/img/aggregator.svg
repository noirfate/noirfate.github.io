<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than diagrams.net -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="2461px" height="3839px" viewBox="-0.5 -0.5 2461 3839" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2022-08-19T03:17:00.301Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/19.0.3 Chrome/102.0.5005.63 Electron/19.0.3 Safari/537.36&quot; etag=&quot;NV4pX4lYN9FzvoG6tufa&quot; version=&quot;19.0.3&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;4LEvewqzYpgVIstiUmHd&quot; name=&quot;第 1 页&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs/><g><path d="M 520 223 L 520 200 L 1993 200 L 1993 223" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 520 223 L 520 820 L 1993 820 L 1993 223" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 520 223 L 1993 223" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1256" y="216">createAggregatorServer (cmd/kube-apiserver/app/aggregator.go)</text></g><rect x="520" y="220" width="1473" height="600" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1471px; height: 1px; padding-top: 520px; margin-left: 522px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><b>func createAggregatorServer</b>(aggregatorConfig *aggregatorapiserver.Config, delegateAPIServer genericapiserver.DelegationTarget, apiExtensionInformers apiextensionsinformers.SharedInformerFactory) (*aggregatorapiserver.APIAggregator, error) {<br />	<font color="#7f00ff">// create APIAggregator, apiserviceRegistrationController</font><br />	<b><font color="#00994d">aggregatorServer, err := aggregatorConfig.Complete().NewWithDelegate(delegateAPIServer)</font></b><br />	if err != nil {<br />		return nil, err<br />	}<br /><br />	<font color="#7f00ff">// create controllers for auto-registration</font><br />	apiRegistrationClient, err := apiregistrationclient.NewForConfig(aggregatorConfig.GenericConfig.LoopbackClientConfig)<br />	if err != nil {<br />		return nil, err<br />	}<br /><span style="">	</span><font color="#7f00ff">// create autoRegistrationController to add/remove APIService</font><br />	<b><font color="#00994d">autoRegistrationController := autoregister.NewAutoRegisterController(aggregatorServer.APIRegistrationInformers.Apiregistration().V1().APIServices(), apiRegistrationClient)</font></b><br /><span style="white-space: pre;">	</span><font color="#7f00ff">// convert kubeAPIServer's API to APIServices and add to autoRegistrationController</font><br />	<b><font color="#00994d">apiServices := apiServicesToRegister(delegateAPIServer, autoRegistrationController)</font></b><br /><span style="white-space: pre;">	</span><font color="#7f00ff">// unlike kubeAPIServer, CRD is dynamic resources, can be modified on the fly, so need a controller to sync status </font><br />	<b><font color="#00994d">crdRegistrationController := crdregistration.NewCRDRegistrationController</font></b>(<br />		apiExtensionInformers.Apiextensions().V1().CustomResourceDefinitions(),<br />		autoRegistrationController)<br /><span style="white-space: pre;">	</span><font color="#7f00ff">// run autoRegistrationController via PostStartHook</font><br />	<b><font color="#00994d">err = aggregatorServer.GenericAPIServer.AddPostStartHook("kube-apiserver-autoregistration", func(context genericapiserver.PostStartHookContext)</font></b> error {<br /><span style="white-space: pre;"> <span style="white-space: pre;">	</span><span style="white-space: pre;">	</span></span><font color="#7f00ff">// pkg/controlplane/controller/crdregistrattion/crdregistration_controller.go</font><br />		<font style="" color="#00994d"><b>go crdRegistrationController.Run(5, context.StopCh)</b></font><br />		go func() {<br /><font color="#7f00ff">			// let the CRD controller process the initial set of CRDs before starting the autoregistration controller.<br />			// this prevents the autoregistration controller's initial sync from deleting APIServices for CRDs that still exist.<br />			// we only need to do this if CRDs are enabled on this server.  We can't use discovery because we are the source for discovery.</font><br />			if aggregatorConfig.GenericConfig.MergedResourceConfig.ResourceEnabled(apiextensionsv1.SchemeGroupVersion.WithResource("customresourcedefinitions")) {<br />				crdRegistrationController.WaitForInitialSync()<br />			}<br />			<b><font color="#00994d">autoRegistrationController.Run(5, context.StopCh)</font></b><br />		}()<br />		return nil<br />	})<br />	if err != nil {<br />		return nil, err<br />	}<br /><span style="white-space: pre;">	</span>...<br /><br />	return aggregatorServer, nil<br />}<br /></pre></div></div></div></foreignObject><text x="522" y="524" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">func createAggregatorServer(aggregatorConfig *aggregatorapiserver.Config, delegateAPIServer genericapiserver.DelegationTarget, apiExtensionInformers apiextensionsinformers.SharedInformerFactory) (*aggregatorapiserver.APIAggregator, error) {...</text></switch></g><path d="M 0 903 L 0 880 L 1110 880 L 1110 903" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 903 L 0 2410 L 1110 2410 L 1110 903" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 903 L 1110 903" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="554.5" y="896">NewWithDelegate (staging/src/k8s.io/kube-aggregator/pkg/apiserver/apiserver.go)</text></g><rect x="0" y="903" width="1110" height="1507" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1108px; height: 1px; padding-top: 1657px; margin-left: 2px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// NewWithDelegate returns a new instance of APIAggregator from the given config.</font><div><b>func (c completedConfig) NewWithDelegate(delegationTarget genericapiserver.DelegationTarget) (*APIAggregator, error)</b> {</div><div><span style="">	</span><b><font color="#00994d">genericServer, err := c.GenericConfig.New("kube-aggregator", delegationTarget)</font></b></div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return nil, err</div><div><span style="">	</span>}</div><div><span style="">	</span><br /></div><div><span style="">	</span>apiregistrationClient, err := clientset.NewForConfig(c.GenericConfig.LoopbackClientConfig)</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return nil, err</div><div><span style="">	</span>}</div><div><span style="">	</span>informerFactory := informers.NewSharedInformerFactory(</div><div><span style="">		</span>apiregistrationClient,</div><div><span style="">		</span>5*time.Minute, // this is effectively used as a refresh interval right now.  Might want to do something nicer later on.</div><div><span style="">	</span>)</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// apiServiceRegistrationControllerInitiated is closed when APIServiceRegistrationController has finished "installing" all known APIServices.</font></div><div><font color="#7f00ff"><span style="">	</span>// At this point we know that the proxy handler knows about APIServices and can handle client requests.</font></div><div><font color="#7f00ff"><span style="">	</span>// Before it might have resulted in a 404 response which could have serious consequences for some controllers like  GC and NS</font></div><div><font color="#7f00ff"><span style="">	</span>//</font></div><div><font color="#7f00ff"><span style="">	</span>// Note that the APIServiceRegistrationController waits for APIServiceInformer to synced before doing its work.</font></div><div><span style="">	</span>apiServiceRegistrationControllerInitiated := make(chan struct{})</div><div><span style="">	</span>if err := genericServer.RegisterMuxAndDiscoveryCompleteSignal("APIServiceRegistrationControllerInitiated", apiServiceRegistrationControllerInitiated); err != nil {</div><div><span style="">		</span>return nil, err</div><div><span style="">	</span>}</div><div><span style="">	</span><font color="#7f00ff">// create APIAggregator</font><br /></div><div><span style="">	</span><b><font color="#00994d">s := &amp;APIAggregator</font></b>{</div><div><span style="">		</span>GenericAPIServer:             genericServer,</div><div><span style="">		</span>delegateHandler:              delegationTarget.UnprotectedHandler(),</div><div><span style="">		</span>proxyTransport:              c.ExtraConfig.ProxyTransport,</div><div><span style="">		</span>proxyHandlers:               map[string]*proxyHandler{},</div><div><span style="">		</span>handledGroups:               sets.String{},</div><div><span style="">		</span>lister:                   informerFactory.Apiregistration().V1().APIServices().Lister(),</div><div><span style="">		</span>APIRegistrationInformers:         informerFactory,</div><div><span style="">		</span>serviceResolver:              c.ExtraConfig.ServiceResolver,</div><div><span style="">		</span>openAPIConfig:               c.GenericConfig.OpenAPIConfig,</div><div><span style="">		</span>openAPIV3Config:              c.GenericConfig.OpenAPIV3Config,</div><div><span style="">		</span>egressSelector:              c.GenericConfig.EgressSelector,</div><div><span style="">		</span>proxyCurrentCertKeyContent:         func() (bytes []byte, bytes2 []byte) { return nil, nil },</div><div><span style="">	</span>}</div><div><span style="">	</span><br /></div><div><span style="">	</span><font color="#7f00ff">// used later to filter the served resource by those that have expired.</font></div><div><span style="">	</span>resourceExpirationEvaluator, err := genericapiserver.NewResourceExpirationEvaluator(*c.GenericConfig.Version)</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return nil, err</div><div><span style="">	</span>}</div><div><span style="">	</span><font color="#7f00ff">// register aggregator v1/v1beta1 api to apiregistration.k8s.io group (staging/src/k8s.io/kube-aggregator/pkg/apis/apiregistration/registor.go)</font><br /></div><div><span style="">	</span>apiGroupInfo := apiservicerest.NewRESTStorage(c.GenericConfig.MergedResourceConfig, c.GenericConfig.RESTOptionsGetter, resourceExpirationEvaluator.ShouldServeForVersion(1, 22))</div><div><span style="">	</span>if err := <b><font color="#00994d">s.GenericAPIServer.InstallAPIGroup(&amp;apiGroupInfo)</font></b>; err != nil {</div><div><span style="">		</span>return nil, err</div><div><span style="">	</span>}</div><div><span style="">	</span>...<br /></div><div><br /></div><div><span style="">	</span>apisHandler := &amp;apisHandler{</div><div><span style="">		</span>codecs:         aggregatorscheme.Codecs,</div><div><span style="">		</span>lister:         s.lister,</div><div><span style="">		</span>discoveryGroup:      discoveryGroup(enabledVersions),</div><div><span style="">	</span>}</div><div><span style="">	</span>s.GenericAPIServer.Handler.NonGoRestfulMux.Handle("/apis", apisHandler)</div><div><span style="">	</span>s.GenericAPIServer.Handler.NonGoRestfulMux.UnlistedHandle("/apis/", apisHandler)</div><div><span style="">	</span><font color="#7f00ff">// apiserviceRegistrationController create proxy handler for non local api (apiService.Spec.Service = nil) and add the handler to GenericAPIServer</font><br /></div><div><span style="">	</span><b><font color="#00994d">apiserviceRegistrationController := NewAPIServiceRegistrationController(informerFactory.Apiregistration().V1().APIServices(), s)</font></b></div><div><span style="">	</span>...<br /></div><div><br /></div><div><span style="">	</span>availableController, err := statuscontrollers.NewAvailableConditionController(</div><div><span style="">		</span>informerFactory.Apiregistration().V1().APIServices(),</div><div><span style="">		</span>c.GenericConfig.SharedInformerFactory.Core().V1().Services(),</div><div><span style="">		</span>c.GenericConfig.SharedInformerFactory.Core().V1().Endpoints(),</div><div><span style="">		</span>apiregistrationClient.ApiregistrationV1(),</div><div><span style="">		</span>c.ExtraConfig.ProxyTransport,</div><div><span style="">		</span>(func() ([]byte, []byte))(s.proxyCurrentCertKeyContent),</div><div><span style="">		</span>s.serviceResolver,</div><div><span style="">		</span>c.GenericConfig.EgressSelector,</div><div><span style="">	</span>)</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return nil, err</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>s.GenericAPIServer.AddPostStartHookOrDie("start-kube-aggregator-informers", func(context genericapiserver.PostStartHookContext) error {</div><div><span style="">		</span>informerFactory.Start(context.StopCh)</div><div><span style="">		</span>c.GenericConfig.SharedInformerFactory.Start(context.StopCh)</div><div><span style="">		</span>return nil</div><div><span style="">	</span>})</div><div><span style="">	</span><b><font color="#00994d">s.GenericAPIServer.AddPostStartHookOrDie("apiservice-registration-controller", func(context genericapiserver.PostStartHookContext)</font></b> error {</div><div><span style="">	</span><span style="">	</span><font color="#7f00ff">// start apiserviceRegistrationController (staging/src/k8s.io/kube-aggregator/pkg/apiserver/apiserver_controller.go)</font><br /></div><div><span style="">		</span><b><font color="#00994d">go apiserviceRegistrationController.Run(context.StopCh, apiServiceRegistrationControllerInitiated)</font></b></div><div><span style="">		</span>select {</div><div><span style="">		</span>case &lt;-context.StopCh:</div><div><span style="">		</span>case &lt;-apiServiceRegistrationControllerInitiated:</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span>return nil</div><div><span style="">	</span>})</div><div><span style="">	</span>s.GenericAPIServer.AddPostStartHookOrDie("apiservice-status-available-controller", func(context genericapiserver.PostStartHookContext) error {</div><div><span style="">		</span>// if we end up blocking for long periods of time, we may need to increase workers.</div><div><span style="">		</span>go availableController.Run(5, context.StopCh)</div><div><span style="">		</span>return nil</div><div><span style="">	</span>})</div><div><span style="">	</span>...<br /></div><div><br /></div><div><span style="">	</span>return s, nil</div><div>}</div></pre></div></div></div></foreignObject><text x="2" y="1660" fill="#000000" font-family="Helvetica" font-size="12px">// NewWithDelegate returns a new instance of APIAggregator from the given config....</text></switch></g><path d="M 1510 903 L 1510 880 L 2460 880 L 2460 903" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1510 903 L 1510 1350 L 2460 1350 L 2460 903" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1510 903 L 2460 903" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1984.5" y="896">apiServicesToRegister (cmd/kube-apiserver/app/aggregator.go)</text></g><rect x="1510" y="900" width="950" height="450" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 948px; height: 1px; padding-top: 1125px; margin-left: 1512px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><b>func apiServicesToRegister</b>(delegateAPIServer genericapiserver.DelegationTarget, registration autoregister.AutoAPIServiceRegistration) []*v1.APIService {<div><span style="">	</span>apiServices := []*v1.APIService{}</div><div><span style="">	</span><font color="#7f00ff">// convert api to apiService and add to autoRegistrationController</font><br /></div><div><span style="">	</span>for _, curr := range delegateAPIServer.ListedPaths() {</div><div><span style="">		</span>if curr == "/api/v1" {</div><div><span style="">			</span><b><font color="#00994d">apiService := makeAPIService(schema.GroupVersion{Group: "", Version: "v1"})</font></b></div><div><span style="">			</span><b><font color="#00994d">registration.AddAPIServiceToSyncOnStart(apiService)</font></b></div><div><span style="">			</span>apiServices = append(apiServices, apiService)</div><div><span style="">			</span>continue</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span>if !strings.HasPrefix(curr, "/apis/") {</div><div><span style="">			</span>continue</div><div><span style="">		</span>}</div><div><span style="">		</span>// this comes back in a list that looks like /apis/rbac.authorization.k8s.io/v1alpha1</div><div><span style="">		</span>tokens := strings.Split(curr, "/")</div><div><span style="">		</span>if len(tokens) != 4 {</div><div><span style="">			</span>continue</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span><b><font color="#00994d">apiService := makeAPIService(schema.GroupVersion{Group: tokens[2], Version: tokens[3]})</font></b></div><div><span style="">		</span>if apiService == nil {</div><div><span style="">			</span>continue</div><div><span style="">		</span>}</div><div><span style="">		</span><b><font color="#00994d">registration.AddAPIServiceToSyncOnStart(apiService)</font></b></div><div><span style="">		</span>apiServices = append(apiServices, apiService)</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>return apiServices</div><div>}</div></pre></div></div></div></foreignObject><text x="1512" y="1129" fill="#000000" font-family="Helvetica" font-size="12px">func apiServicesToRegister(delegateAPIServer genericapiserver.DelegationTarget, registration autoregister.AutoAPIServiceRegistration) []*v1.APIService {...</text></switch></g><path d="M 1565 1423 L 1565 1400 L 2405 1400 L 2405 1423" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1565 1423 L 1565 1730 L 2405 1730 L 2405 1423" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1565 1423 L 2405 1423" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1984.5" y="1416">makeAPIService (cmd/kube-apiserver/app/aggregator.go)</text></g><rect x="1565" y="1420" width="840" height="310" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 838px; height: 1px; padding-top: 1575px; margin-left: 1567px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><b>func makeAPIService(gv schema.GroupVersion) *v1.APIService</b> {<div><span style="">	</span>apiServicePriority, ok := apiVersionPriorities[gv]</div><div><span style="">	</span>if !ok {</div><div><font color="#7f00ff"><span style="">		</span>// if we aren't found, then we shouldn't register ourselves because it could result in a CRD group version</font></div><div><font color="#7f00ff"><span style="">		</span>// being permanently stuck in the APIServices list.</font></div><div><span style="">		</span>klog.Infof("Skipping APIService creation for %v", gv)</div><div><span style="">		</span>return nil</div><div><span style="">	</span>}</div><div><font color="#7f00ff"><span style="white-space: pre;">	</span>// convert to APIService</font></div><div><font color="#7f00ff"><span style="white-space: pre;">	</span>// v1.APIServiceSpec is defined at staging/src/k8s.io/kube-aggregator/pkg/apis/apiregistration/v1/types.go<br /></font></div><div><font color="#7f00ff"><span style="white-space: pre;">	</span>// for local api, do not init v1.APIServiceSpec.Service field, let it to be nil, so aggregator will not proxy it to other services</font><br /></div><div><span style="">	</span>return &amp;<b><font color="#00994d">v1.APIService</font></b>{</div><div><span style="">		</span>ObjectMeta: metav1.ObjectMeta{Name: gv.Version + "." + gv.Group},</div><div><span style="">		</span><b><font color="#00994d">Spec: v1.APIServiceSpec</font></b>{</div><div><span style="">			</span>Group:             gv.Group,</div><div><span style="">			</span>Version:            gv.Version,</div><div><span style="">			</span>GroupPriorityMinimum:     apiServicePriority.group,</div><div><span style="">			</span>VersionPriority:       apiServicePriority.version,</div><div><span style="">		</span>},</div><div><span style="">	</span>}</div><div>}</div></pre></div></div></div></foreignObject><text x="1567" y="1579" fill="#000000" font-family="Helvetica" font-size="12px">func makeAPIService(gv schema.GroupVersion) *v1.APIService {...</text></switch></g><path d="M 170 2483 L 170 2460 L 940 2460 L 940 2483" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 170 2483 L 170 2952 L 940 2952 L 940 2483" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 170 2483 L 940 2483" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="554.5" y="2476">Run (staging/src/k8s.io/kube-aggregator/pkg/apiserver/apiservice_controller.go)</text></g><rect x="170" y="2482" width="770" height="470" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 768px; height: 1px; padding-top: 2717px; margin-left: 172px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// Run starts APIServiceRegistrationController which will process all registration requests until stopCh is closed.</font><div><b>func (c *APIServiceRegistrationController) Run(stopCh &lt;-chan struct{}, handlerSyncedCh chan&lt;- struct{})</b> {</div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span><font color="#7f00ff">// initially sync all APIServices to make sure the proxy handler is complete</font></div><div><span style="">	</span>if err := wait.PollImmediateUntil(time.Second, func() (bool, error) {</div><div><span style="">		</span>services, err := c.apiServiceLister.List(labels.Everything())</div><div><span style="">		</span>if err != nil {</div><div><span style="">			</span>utilruntime.HandleError(fmt.Errorf("failed to initially list APIServices: %v", err))</div><div><span style="">			</span>return false, nil</div><div><span style="">		</span>}</div><div><span style="">		</span>for _, s := range services {</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// apiHandlerManager is APIAggregator</font><br /></div><div><span style="">			</span>if err := <b><font color="#00994d">c.apiHandlerManager.AddAPIService(s)</font></b>; err != nil {</div><div><span style="">				</span>utilruntime.HandleError(fmt.Errorf("failed to initially sync APIService %s: %v", s.Name, err))</div><div><span style="">				</span>return false, nil</div><div><span style="">			</span>}</div><div><span style="">		</span>}</div><div><span style="">		</span>return true, nil</div><div><span style="">	</span>}, stopCh); err == wait.ErrWaitTimeout {</div><div><span style="">		</span>utilruntime.HandleError(fmt.Errorf("timed out waiting for proxy handler to initialize"))</div><div><span style="">		</span>return</div><div><span style="">	</span>} else if err != nil {</div><div><span style="">		</span>panic(fmt.Errorf("unexpected error: %v", err))</div><div><span style="">	</span>}</div><div><span style="">	</span>close(handlerSyncedCh)</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// only start one worker thread since its a slow moving API and the aggregation server adding bits</font></div><div><font color="#7f00ff"><span style="">	</span>// aren't threadsafe</font></div><div><span style="">	</span>go wait.Until(c.runWorker, time.Second, stopCh)</div><div><br /></div><div><span style="">	</span>&lt;-stopCh</div><div>}</div></pre></div></div></div></foreignObject><text x="172" y="2721" fill="#000000" font-family="Helvetica" font-size="12px">// Run starts APIServiceRegistrationController which will process all registration requests until stopCh is closed....</text></switch></g><path d="M 200 3033 L 200 3010 L 910 3010 L 910 3033" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 200 3033 L 200 3830 L 910 3830 L 910 3033" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 200 3033 L 910 3033" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="554.5" y="3026">AddAPIService (staging/src/k8s.io/kube-aggregator/pkg/apiserver/apiserver.go)</text></g><rect x="200" y="3031" width="710" height="800" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 708px; height: 1px; padding-top: 3431px; margin-left: 202px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// AddAPIService adds an API service.  It is not thread-safe, so only call it on one thread at a time please.</font><div><font color="#7f00ff">// It's a slow moving API, so its ok to run the controller on a single thread</font></div><div><b>func (s *APIAggregator) AddAPIService(apiService *v1.APIService) error</b> {</div><div><span style="">	</span><font color="#7f00ff">// if the proxyHandler already exists, it needs to be updated. The aggregation bits do not</font></div><div><font color="#7f00ff"><span style="">	</span>// since they are wired against listers because they require multiple resources to respond</font></div><div><span style="">	</span>if proxyHandler, exists := s.proxyHandlers[apiService.Name]; exists {</div><div><span style="">		</span><b><font color="#00994d">proxyHandler.updateAPIService(apiService)</font></b></div><div><span style="">	</span><span style="">	</span>...<br /></div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><b><font color="#00994d">proxyPath := "/apis/" + apiService.Spec.Group + "/" + apiService.Spec.Version</font></b></div><div><span style="">	</span><font color="#7f00ff">// v1. is a special case for the legacy API. It proxies to a wider set of endpoints.</font></div><div><span style="">	</span>if apiService.Name == legacyAPIServiceName {</div><div><span style="">		</span><b><font color="#00994d">proxyPath = "/api"</font></b></div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>// register the proxy handler</div><div><span style="">	</span>proxyHandler := &amp;proxyHandler{</div><div><span style="">		</span>localDelegate:              s.delegateHandler, <font color="#7f00ff">// KubeAPIServer's APIServerHandler</font></div><div><span style="">		</span>proxyCurrentCertKeyContent:        s.proxyCurrentCertKeyContent,</div><div><span style="">		</span>proxyTransport:             s.proxyTransport,</div><div><span style="">		</span>serviceResolver:             s.serviceResolver,</div><div><span style="">		</span>egressSelector:             s.egressSelector,</div><div><span style="">	</span>}</div><div><span style="">	</span><font color="#7f00ff">// create proxy client to non local api</font><br /></div><div><span style="">	</span><b><font color="#00994d">proxyHandler.updateAPIService(apiService)</font></b></div><div><span style="">	</span>...<br /></div><div><span style="">	</span><span style="background-color: initial;"><b><font color="#00994d">s.proxyHandlers[apiService.Name] = proxyHandler</font></b></span></div><div><span style="">	</span><b><font color="#00994d">s.GenericAPIServer.Handler.NonGoRestfulMux.Handle(proxyPath, proxyHandler)</font></b></div><div><span style="">	</span><b><font color="#00994d">s.GenericAPIServer.Handler.NonGoRestfulMux.UnlistedHandlePrefix(proxyPath+"/", proxyHandler)</font></b></div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// if we're dealing with the legacy group, we're done here</font></div><div><span style="">	</span>if apiService.Name == legacyAPIServiceName {</div><div><span style="">		</span>return nil</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// if we've already registered the path with the handler, we don't want to do it again.</font></div><div><span style="">	</span>if s.handledGroups.Has(apiService.Spec.Group) {</div><div><span style="">		</span>return nil</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// it's time to register the group aggregation endpoint</font></div><div><span style="">	</span>groupPath := "/apis/" + apiService.Spec.Group</div><div><span style="">	</span>groupDiscoveryHandler := &amp;apiGroupHandler{</div><div><span style="">		</span>codecs:    aggregatorscheme.Codecs,</div><div><span style="">		</span>groupName:   apiService.Spec.Group,</div><div><span style="">		</span>lister:    s.lister,</div><div><span style="">		</span>delegate:   s.delegateHandler,</div><div><span style="">	</span>}</div><div><span style="">	</span>// aggregation is protected</div><div><span style="">	</span>s.GenericAPIServer.Handler.NonGoRestfulMux.Handle(groupPath, groupDiscoveryHandler)</div><div><span style="">	</span>s.GenericAPIServer.Handler.NonGoRestfulMux.UnlistedHandle(groupPath+"/", groupDiscoveryHandler)</div><div><span style="">	</span>s.handledGroups.Insert(apiService.Spec.Group)</div><div><span style="">	</span>return nil</div><div>}</div></pre></div></div></div></foreignObject><text x="202" y="3435" fill="#000000" font-family="Helvetica" font-size="12px">// AddAPIService adds an API service.  It is not thread-safe, so only call it on one thread at a time please....</text></switch></g><path d="M 980 3184 L 980 3161 L 1800 3161 L 1800 3184" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 980 3184 L 980 3681 L 1800 3681 L 1800 3184" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 980 3184 L 1800 3184" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1389.5" y="3177">updateAPIService (staging/src/k8s.io/kube-aggregator/pkg/apiserver/handler_proxy.go)</text></g><rect x="980" y="3181" width="820" height="500" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 818px; height: 1px; padding-top: 3431px; margin-left: 982px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><b>func (r *proxyHandler) updateAPIService(apiService *apiregistrationv1api.APIService)</b> {<div><span style="">	</span>if apiService.Spec.Service == nil {</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// this is local api, no need to proxy</font><br /></div><div><span style="">		</span><b><font color="#00994d">r.handlingInfo.Store(proxyHandlingInfo{local: true})</font></b></div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>proxyClientCert, proxyClientKey := r.proxyCurrentCertKeyContent()</div><div><br /></div><div><span style="">	</span>clientConfig := &amp;restclient.Config{</div><div><span style="">		</span>TLSClientConfig: restclient.TLSClientConfig{</div><div><span style="">			</span>Insecure:   apiService.Spec.InsecureSkipTLSVerify,</div><div><span style="">			</span>ServerName:   apiService.Spec.Service.Name + "." + apiService.Spec.Service.Namespace + ".svc",</div><div><span style="">			</span>CertData:   proxyClientCert,</div><div><span style="">			</span>KeyData:    proxyClientKey,</div><div><span style="">			</span>CAData:     apiService.Spec.CABundle,</div><div><span style="">		</span>},</div><div><span style="">	</span>}</div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span>newInfo := proxyHandlingInfo{</div><div><span style="">		</span>name:           apiService.Name,</div><div><span style="">		</span>restConfig:       clientConfig,</div><div><span style="">		</span>serviceName:      apiService.Spec.Service.Name,</div><div><span style="">		</span>serviceNamespace:    apiService.Spec.Service.Namespace,</div><div><span style="">		</span>servicePort:      *apiService.Spec.Service.Port,</div><div><span style="">		</span>serviceAvailable:    apiregistrationv1apihelper.IsAPIServiceConditionTrue(apiService, apiregistrationv1api.Available),</div><div><span style="">	</span>}</div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span>newInfo.proxyRoundTripper, newInfo.transportBuildingError = restclient.TransportFor(newInfo.restConfig)</div><div><span style="">	</span>if newInfo.transportBuildingError != nil {</div><div><span style="">		</span>klog.Warning(newInfo.transportBuildingError.Error())</div><div><span style="">	</span>}</div><div><span style="">	</span><b><font color="#00994d">r.handlingInfo.Store(newInfo)</font></b></div><div>}</div></pre></div></div></div></foreignObject><text x="982" y="3435" fill="#000000" font-family="Helvetica" font-size="12px">func (r *proxyHandler) updateAPIService(apiService *apiregistrationv1api.APIService) {...</text></switch></g><path d="M 781.5 23 L 781.5 0 L 1731.5 0 L 1731.5 23" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 781.5 23 L 781.5 150 L 1731.5 150 L 1731.5 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 781.5 23 L 1731.5 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1256" y="16">CreateServerChain (cmd/kube-apiserver/app/server.go)</text></g><rect x="781.5" y="20" width="950" height="130" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 948px; height: 1px; padding-top: 85px; margin-left: 784px;"><div data-drawio-colors="color: #00994D; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 153, 77); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// CreateServerChain creates the apiservers connected via delegation.</font><div><font color="#000000"><b>func CreateServerChain(completedOptions completedServerRunOptions, stopCh &lt;-chan struct{})</b> (*aggregatorapiserver.APIAggregator, error) {</font></div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="color: rgb(0, 0, 0);">	</span><b style="">aggregatorServer, err := createAggregatorServer(aggregatorConfig, kubeAPIServer.GenericAPIServer, apiExtensionsServer.Informers)</b></div><div><span style="white-space: pre;">	</span>...<br /></div><div><font color="#000000"><br /></font></div><div><font color="#000000"><span style="">	</span>return aggregatorServer, nil</font></div><div><font color="#000000">}</font></div></pre></div></div></div></foreignObject><text x="784" y="89" fill="#00994D" font-family="Helvetica" font-size="12px">// CreateServerChain creates the apiservers connected via delegation....</text></switch></g><path d="M 1256.5 150 L 1256.5 193.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1256.5 198.88 L 1253 191.88 L 1256.5 193.63 L 1260 191.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1256.5 820 L 1256.5 850 L 555 850 L 555 873.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 555 878.88 L 551.5 871.88 L 555 873.63 L 558.5 871.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1256.5 820 L 1256.5 850 L 1985 850 L 1985 873.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1985 878.88 L 1981.5 871.88 L 1985 873.63 L 1988.5 871.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1985 1350 L 1985 1393.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1985 1398.88 L 1981.5 1391.88 L 1985 1393.63 L 1988.5 1391.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 555 2410 L 555 2453.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 555 2458.88 L 551.5 2451.88 L 555 2453.63 L 558.5 2451.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 555 2952 L 555 3003.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 555 3008.88 L 551.5 3001.88 L 555 3003.63 L 558.5 3001.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 910 3431 L 973.63 3431" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 978.88 3431 L 971.88 3434.5 L 973.63 3431 L 971.88 3427.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>