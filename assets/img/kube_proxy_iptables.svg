<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than diagrams.net -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1817px" height="9250px" viewBox="-0.5 -0.5 1817 9250" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2022-11-23T08:13:37.681Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/19.0.3 Chrome/102.0.5005.63 Electron/19.0.3 Safari/537.36&quot; etag=&quot;ft3tI7CyFVAAPVLNUAfG&quot; version=&quot;19.0.3&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;Y-uGvrcz6t8PJfiE86A7&quot; name=&quot;第 1 页&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs/><g><path d="M 396 23 L 396 0 L 1366 0 L 1366 23" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 396 23 L 396 720 L 1366 720 L 1366 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 396 23 L 1366 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="880.5" y="16">cmd/kube-proxy/app/server.go</text></g><rect x="396" y="20" width="970" height="700" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 968px; height: 1px; padding-top: 370px; margin-left: 398px;"><div data-drawio-colors="color: #00994D; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 153, 77); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><font color="#7f00ff">// Run runs the specified ProxyServer.  This should never exit (unless CleanupAndExit is set).</font></div><div><font color="#7f00ff">// TODO: At the moment, Run() cannot return a nil error, otherwise it's caller will never exit. Update callers of Run to handle nil errors.</font></div><div><font color="#000000"><b>func (s *ProxyServer) Run()</b> error {</font></div><div><span style="white-space: pre;">	</span>...<br /></div><div><font color="#7f00ff">	// Create configs (i.e. Watches for Services and Endpoints or EndpointSlices)</font></div><div><font color="#7f00ff"><span style="">	</span>// Note: RegisterHandler() calls need to happen before creation of Sources because sources</font></div><div><font color="#7f00ff"><span style="">	</span>// only notify on changes, and the initial update (on process start) may be lost if no handlers</font></div><div><font color="#7f00ff">	// are registered yet.</font></div><div><span style="color: rgb(0, 0, 0);">	</span><b style="">serviceConfig := config.NewServiceConfig(informerFactory.Core().V1().Services(), s.ConfigSyncPeriod)</b></div><div><span style="color: rgb(0, 0, 0);">	</span><b style="">serviceConfig.RegisterEventHandler(s.Proxier)</b></div><div><span style="color: rgb(0, 0, 0);">	</span><b>go serviceConfig.Run(wait.NeverStop)</b></div><div><font color="#000000"><br /></font></div><div><font color="#000000"><span style="">	</span>if endpointsHandler, ok := s.Proxier.(config.EndpointsHandler); ok &amp;&amp; !s.UseEndpointSlices {</font></div><div><span style="color: rgb(0, 0, 0);">		</span><b style="">endpointsConfig := config.NewEndpointsConfig(informerFactory.Core().V1().Endpoints(), s.ConfigSyncPeriod)</b></div><div><span style="color: rgb(0, 0, 0);">		</span><b>endpointsConfig.RegisterEventHandler(endpointsHandler)</b></div><div><span style="color: rgb(0, 0, 0);">		</span><b>go endpointsConfig.Run(wait.NeverStop)</b></div><div><font color="#000000"><span style="">	</span>} else {</font></div><div><span style="color: rgb(0, 0, 0);">		</span><b style="">endpointSliceConfig := config.NewEndpointSliceConfig(informerFactory.Discovery().V1().EndpointSlices(), s.ConfigSyncPeriod)</b></div><div><span style="color: rgb(0, 0, 0);">		</span><b style="">endpointSliceConfig.RegisterEventHandler(s.Proxier)</b></div><div><span style="color: rgb(0, 0, 0);">		</span><b style="">go endpointSliceConfig.Run(wait.NeverStop)</b></div><div><font color="#000000"><span style="">	</span>}</font></div><div><font color="#000000"><br /></font></div><div><font color="#7f00ff">	// This has to start after the calls to NewServiceConfig and NewEndpointsConfig because those</font></div><div><font color="#7f00ff">	// functions must configure their shared informer event handlers first.</font></div><div><font color="#000000"><span style="">	</span>informerFactory.Start(wait.NeverStop)</font></div><div><font color="#000000"><br /></font></div><div><font color="#000000"><span style="">	</span>if utilfeature.DefaultFeatureGate.Enabled(features.TopologyAwareHints) {</font></div><div><span style="color: rgb(0, 0, 0);">		</span><font color="#7f00ff">// Make an informer that selects for our nodename.</font></div><div><font color="#000000"><span style="">		</span>currentNodeInformerFactory := informers.NewSharedInformerFactoryWithOptions(s.Client, s.ConfigSyncPeriod,</font></div><div><font color="#000000"><span style="">			</span>informers.WithTweakListOptions(func(options *metav1.ListOptions) {</font></div><div><font color="#000000"><span style="">				</span>options.FieldSelector = fields.OneTermEqualSelector("metadata.name", s.NodeRef.Name).String()</font></div><div><font color="#000000"><span style="">			</span>}))</font></div><div><span style="color: rgb(0, 0, 0);">		</span><b style="">nodeConfig := config.NewNodeConfig(currentNodeInformerFactory.Core().V1().Nodes(), s.ConfigSyncPeriod)</b></div><div><span style="color: rgb(0, 0, 0);">		</span><b style="">nodeConfig.RegisterEventHandler(s.Proxier)</b></div><div><span style="color: rgb(0, 0, 0);">		</span><b style="">go nodeConfig.Run(wait.NeverStop)</b></div><div><font color="#000000"><br /></font></div><div><font color="#7f00ff">		// This has to start after the calls to NewNodeConfig because that must</font></div><div><font color="#7f00ff">		// configure the shared informer event handler first.</font></div><div><font color="#000000"><span style="">		</span>currentNodeInformerFactory.Start(wait.NeverStop)</font></div><div><font color="#000000"><span style="">	</span>}</font></div><div><font color="#000000"><br /></font></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#7f00ff">// Birth Cry after the birth is successful</font></div><div><font color="#000000"><span style="">	</span>s.birthCry()</font></div><div><font color="#000000"><br /></font></div><div><font color="#000000"><span style="">	</span>go s.Proxier.SyncLoop()</font></div><div><font color="#000000"><br /></font></div><div><font color="#000000"><span style="">	</span>return &lt;-errCh</font></div><div><font color="#000000">}</font></div></pre></div></div></div></foreignObject><text x="398" y="374" fill="#00994D" font-family="Helvetica" font-size="12px">// Run runs the specified ProxyServer.  This should never exit (unless CleanupAndExit is set)....</text></switch></g><path d="M 526 783 L 526 760 L 1236 760 L 1236 783" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 526 783 L 526 1030 L 1236 1030 L 1236 783" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 526 783 L 1236 783" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="880.5" y="776">pkg/proxy/config/config.go</text></g><rect x="526" y="780" width="710" height="250" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 708px; height: 1px; padding-top: 905px; margin-left: 528px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><font color="#7f00ff">// NewServiceConfig creates a new ServiceConfig.</font></div><div><b>func NewServiceConfig</b>(serviceInformer coreinformers.ServiceInformer, resyncPeriod time.Duration) *ServiceConfig {</div><div><span style="">	</span>result := &amp;ServiceConfig{</div><div><span style="">		</span>listerSynced: serviceInformer.Informer().HasSynced,</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>serviceInformer.Informer().AddEventHandlerWithResyncPeriod(</div><div><span style="">		</span>cache.ResourceEventHandlerFuncs{</div><div><span style="">			</span>AddFunc:    <b><font color="#00994d">result.handleAddService</font></b>,</div><div><span style="">			</span>UpdateFunc:   <b><font color="#00994d">result.handleUpdateService</font></b>,</div><div><span style="">			</span>DeleteFunc:   <b><font color="#00994d">result.handleDeleteService</font></b>,</div><div><span style="">		</span>},</div><div><span style="">		</span>resyncPeriod,</div><div><span style="">	</span>)</div><div><br /></div><div><span style="">	</span>return result</div><div>}</div></pre></div></div></div></foreignObject><text x="528" y="909" fill="#000000" font-family="Helvetica" font-size="12px">// NewServiceConfig creates a new ServiceConfig....</text></switch></g><path d="M 0 1103 L 0 1080 L 526 1080 L 526 1103" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 1103 L 0 1260 L 526 1260 L 526 1103" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 1103 L 526 1103" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="262.5" y="1096">pkg/proxy/config/config.go</text></g><rect x="0" y="1100" width="526" height="160" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 524px; height: 1px; padding-top: 1180px; margin-left: 2px;"><div data-drawio-colors="color: #00994D; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 153, 77); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><font color="#000000"><b>func (c *ServiceConfig) handleAddService</b>(obj interface{}) {</font></div><div><font color="#000000"><span style="">	</span>service, ok := obj.(*v1.Service)</font></div><div><font color="#000000"><span style="">	</span>if !ok {</font></div><div><font color="#000000"><span style="">		</span>utilruntime.HandleError(fmt.Errorf("unexpected object type: %v", obj))</font></div><div><font color="#000000"><span style="">		</span>return</font></div><div><font color="#000000"><span style="">	</span>}</font></div><div><font color="#000000"><span style="">	</span>for i := range c.eventHandlers {</font></div><div><font color="#000000"><span style="">		</span>klog.V(4).InfoS("Calling handler.OnServiceAdd")</font></div><div><span style="color: rgb(0, 0, 0);">		</span><b style="">c.eventHandlers[i].OnServiceAdd(service)</b></div><div><font color="#000000"><span style="">	</span>}</font></div><div><font color="#000000">}</font></div></pre></div></div></div></foreignObject><text x="2" y="1184" fill="#00994D" font-family="Helvetica" font-size="12px">func (c *ServiceConfig) handleAddService(obj interface{}) {...</text></switch></g><path d="M 606 1103 L 606 1080 L 1156 1080 L 1156 1103" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 606 1103 L 606 1330 L 1156 1330 L 1156 1103" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 606 1103 L 1156 1103" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="880.5" y="1096">pkg/proxy/config/config.go</text></g><rect x="606" y="1100" width="550" height="230" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 548px; height: 1px; padding-top: 1215px; margin-left: 608px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><b>func (c *ServiceConfig) handleUpdateService</b>(oldObj, newObj interface{}) {</div><div><span style="">	</span>oldService, ok := oldObj.(*v1.Service)</div><div><span style="">	</span>if !ok {</div><div><span style="">		</span>utilruntime.HandleError(fmt.Errorf("unexpected object type: %v", oldObj))</div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><span style="">	</span>service, ok := newObj.(*v1.Service)</div><div><span style="">	</span>if !ok {</div><div><span style="">		</span>utilruntime.HandleError(fmt.Errorf("unexpected object type: %v", newObj))</div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><span style="">	</span>for i := range c.eventHandlers {</div><div><span style="">		</span>klog.V(4).InfoS("Calling handler.OnServiceUpdate")</div><div><span style="">		</span><b><font color="#00994d">c.eventHandlers[i].OnServiceUpdate(oldService, service)</font></b></div><div><span style="">	</span>}</div><div>}</div></pre></div></div></div></foreignObject><text x="608" y="1219" fill="#000000" font-family="Helvetica" font-size="12px">func (c *ServiceConfig) handleUpdateService(oldObj, newObj interface{}) {...</text></switch></g><path d="M 1236 1103 L 1236 1080 L 1816 1080 L 1816 1103" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1236 1103 L 1236 1360 L 1816 1360 L 1816 1103" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1236 1103 L 1816 1103" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1525.5" y="1096">pkg/proxy/config/config.go</text></g><rect x="1236" y="1100" width="580" height="260" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 578px; height: 1px; padding-top: 1230px; margin-left: 1238px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><b>func (c *ServiceConfig) handleDeleteService</b>(obj interface{}) {</div><div><span style="">	</span>service, ok := obj.(*v1.Service)</div><div><span style="">	</span>if !ok {</div><div><span style="">		</span>tombstone, ok := obj.(cache.DeletedFinalStateUnknown)</div><div><span style="">		</span>if !ok {</div><div><span style="">			</span>utilruntime.HandleError(fmt.Errorf("unexpected object type: %v", obj))</div><div><span style="">			</span>return</div><div><span style="">		</span>}</div><div><span style="">		</span>if service, ok = tombstone.Obj.(*v1.Service); !ok {</div><div><span style="">			</span>utilruntime.HandleError(fmt.Errorf("unexpected object type: %v", obj))</div><div><span style="">			</span>return</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div><span style="">	</span>for i := range c.eventHandlers {</div><div><span style="">		</span>klog.V(4).InfoS("Calling handler.OnServiceDelete")</div><div><span style="">		</span><b><font color="#00994d">c.eventHandlers[i].OnServiceDelete(service)</font></b></div><div><span style="">	</span>}</div><div>}</div></pre></div></div></div></foreignObject><text x="1238" y="1234" fill="#000000" font-family="Helvetica" font-size="12px">func (c *ServiceConfig) handleDeleteService(obj interface{}) {...</text></switch></g><path d="M 53 1456 L 53 1433 L 473 1433 L 473 1456" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 53 1456 L 53 1533 L 473 1533 L 473 1456" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 53 1456 L 473 1456" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="262.5" y="1449">pkg/proxy/iptables/proxier.go</text></g><rect x="53" y="1453" width="420" height="80" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 418px; height: 1px; padding-top: 1493px; margin-left: 55px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><font color="#7f00ff">// OnServiceAdd is called whenever creation of new service object</font></div><div><font color="#7f00ff">// is observed.</font></div><div>func (proxier *Proxier) OnServiceAdd(service *v1.Service) {</div><div><span style="">	</span><b><font color="#00994d">proxier.OnServiceUpdate(nil, service)</font></b></div><div>}</div></pre></div></div></div></foreignObject><text x="55" y="1497" fill="#000000" font-family="Helvetica" font-size="12px">// OnServiceAdd is called whenever creation of new service object...</text></switch></g><path d="M 606 1446 L 606 1423 L 1156 1423 L 1156 1446" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 606 1446 L 606 1543 L 1156 1543 L 1156 1446" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 606 1446 L 1156 1446" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="880.5" y="1439">pkg/proxy/iptables/proxier.go</text></g><rect x="606" y="1443" width="550" height="100" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 548px; height: 1px; padding-top: 1493px; margin-left: 608px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><font color="#7f00ff">// OnServiceUpdate is called whenever modification of an existing</font></div><div><font color="#7f00ff">// service object is observed.</font></div><div><b>func (proxier *Proxier) OnServiceUpdate</b>(oldService, service *v1.Service) {</div><div><span style="">	</span>if proxier.serviceChanges.Update(oldService, service) &amp;&amp; proxier.isInitialized() {</div><div><span style="">		</span><font color="#00994d"><b>proxier.Sync()</b></font></div><div><span style="">	</span>}</div><div>}</div></pre></div></div></div></foreignObject><text x="608" y="1497" fill="#000000" font-family="Helvetica" font-size="12px">// OnServiceUpdate is called whenever modification of an existing...</text></switch></g><path d="M 1311.5 1434 L 1311.5 1411 L 1740.5 1411 L 1740.5 1434" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1311.5 1434 L 1311.5 1533 L 1740.5 1533 L 1740.5 1434" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1311.5 1434 L 1740.5 1434" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1525.5" y="1427">pkg/proxy/iptables/proxier.go</text></g><rect x="1311.5" y="1433" width="429" height="100" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 427px; height: 1px; padding-top: 1483px; margin-left: 1314px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><font color="#7f00ff">// OnServiceDelete is called whenever deletion of an existing service</font></div><div><font color="#7f00ff">// object is observed.</font></div><div><b>func (proxier *Proxier) OnServiceDelete</b>(service *v1.Service) {</div><div><span style="">	</span><b><font color="#00994d">proxier.OnServiceUpdate(service, nil)</font></b></div><div><br /></div><div>}</div></pre></div></div></div></foreignObject><text x="1314" y="1487" fill="#000000" font-family="Helvetica" font-size="12px">// OnServiceDelete is called whenever deletion of an existing service...</text></switch></g><path d="M 626 1643 L 626 1620 L 1136 1620 L 1136 1643" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 626 1643 L 626 1830 L 1136 1830 L 1136 1643" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 626 1643 L 1136 1643" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="880.5" y="1636">pkg/proxy/config/config.go</text></g><rect x="626" y="1640" width="510" height="190" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 508px; height: 1px; padding-top: 1735px; margin-left: 628px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><font color="#7f00ff">// Run waits for cache synced and invokes handlers after syncing.</font></div><div><b>func (c *ServiceConfig) Run</b>(stopCh &lt;-chan struct{}) {</div><div><span style="">	</span>klog.InfoS("Starting service config controller")</div><div><br /></div><div><span style="">	</span>if !cache.WaitForNamedCacheSync("service config", stopCh, c.listerSynced) {</div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>for i := range c.eventHandlers {</div><div><span style="">		</span>klog.V(3).InfoS("Calling handler.OnServiceSynced()")</div><div><span style="">		</span><b><font color="#00994d">c.eventHandlers[i].OnServiceSynced()</font></b></div><div><span style="">	</span>}</div><div>}</div></pre></div></div></div></foreignObject><text x="628" y="1739" fill="#000000" font-family="Helvetica" font-size="12px">// Run waits for cache synced and invokes handlers after syncing....</text></switch></g><path d="M 881 720 L 881 753.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 881 758.88 L 877.5 751.88 L 881 753.63 L 884.5 751.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 881 1030 L 881 1073.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 881 1078.88 L 877.5 1071.88 L 881 1073.63 L 884.5 1071.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 881 1030 L 881 1055 L 263 1055 L 263 1073.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 263 1078.88 L 259.5 1071.88 L 263 1073.63 L 266.5 1071.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 881 1030 L 881 1055 L 1526 1055 L 1526 1073.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1526 1078.88 L 1522.5 1071.88 L 1526 1073.63 L 1529.5 1071.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1526 1360 L 1526 1404.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1526 1409.88 L 1522.5 1402.88 L 1526 1404.63 L 1529.5 1402.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 881 1330 L 881 1416.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 881 1421.88 L 877.5 1414.88 L 881 1416.63 L 884.5 1414.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 881 1543 L 881 1613.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 881 1618.88 L 877.5 1611.88 L 881 1613.63 L 884.5 1611.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1311.5 1483 L 1162.37 1483" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1157.12 1483 L 1164.12 1479.5 L 1162.37 1483 L 1164.12 1486.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 473 1493 L 599.63 1493" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 604.88 1493 L 597.88 1496.5 L 599.63 1493 L 597.88 1489.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 263 1260 L 263 1426.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 263 1431.88 L 259.5 1424.88 L 263 1426.63 L 266.5 1424.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 621 1893 L 621 1870 L 1141 1870 L 1141 1893" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 621 1893 L 621 2060 L 1141 2060 L 1141 1893" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 621 1893 L 1141 1893" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="880.5" y="1886">pkg/proxy/iptables/proxier.go</text></g><rect x="621" y="1890" width="520" height="170" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 518px; height: 1px; padding-top: 1975px; margin-left: 623px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><font color="#7f00ff">// OnServiceSynced is called once all the initial event handlers were</font></div><div><font color="#7f00ff">// called and the state is fully propagated to local cache.</font></div><div><b>func (proxier *Proxier) OnServiceSynced</b>() {</div><div><span style="">	</span>proxier.mu.Lock()</div><div><span style="">	</span>proxier.servicesSynced = true</div><div><span style="">	</span>proxier.setInitialized(proxier.endpointSlicesSynced)</div><div><span style="">	</span>proxier.mu.Unlock()</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// Sync unconditionally - this is called once per lifetime.</font></div><div><span style="">	</span><b><font color="#00994d">proxier.syncProxyRules()</font></b></div><div>}</div></pre></div></div></div></foreignObject><text x="623" y="1979" fill="#000000" font-family="Helvetica" font-size="12px">// OnServiceSynced is called once all the initial event handlers were...</text></switch></g><path d="M 881 1830 L 881 1863.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 881 1868.88 L 877.5 1861.88 L 881 1863.63 L 884.5 1861.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 381 2123 L 381 2100 L 1381 2100 L 1381 2123" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 381 2123 L 381 9243 L 1381 9243 L 1381 2123" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 381 2123 L 1381 2123" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="880.5" y="2116">pkg/proxy/iptables/proxier.go</text></g><rect x="381" y="2123" width="1000" height="7120" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 998px; height: 1px; padding-top: 5683px; margin-left: 383px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><font color="#7f00ff">// This is where all of the iptables-save/restore calls happen.</font></div><div><font color="#7f00ff">// The only other iptables rules are those that are setup in iptablesInit()</font></div><div><font color="#7f00ff">// This assumes proxier.mu is NOT held</font></div><div><b>func (proxier *Proxier) syncProxyRules</b>() {</div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span>klog.V(2).InfoS("Syncing iptables rules")</div><div><br /></div><div><span style="">	</span>success := false</div><div><span style="">	</span>defer func() {</div><div><span style="">		</span>if !success {</div><div><span style="">			</span>klog.InfoS("Sync failed", "retryingTime", proxier.syncPeriod)</div><div><span style="">			</span>proxier.syncRunner.RetryAfter(proxier.syncPeriod)</div><div><span style="">		</span>}</div><div><span style="">	</span>}()</div><div><span style="white-space: pre;">	</span>...<br /></div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>//</font></div><div><font color="#7f00ff"><span style="">	</span>// Below this point we will not return until we try to write the iptables rules.</font></div><div><font color="#7f00ff"><span style="">	</span>//</font></div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// Get iptables-save output so we can check for existing chains and rules.</font></div><div><font color="#7f00ff"><span style="">	</span>// This will be a map of chain name to chain with rules as stored in iptables-save/iptables-restore</font></div><div><span style="">	</span>existingFilterChains := make(map[utiliptables.Chain][]byte)</div><div><span style="">	</span>proxier.existingFilterChainsData.Reset()</div><div><span style="">	</span>err := <b><font color="#00994d">proxier.iptables.SaveInto(utiliptables.TableFilter, proxier.existingFilterChainsData)</font></b></div><div><span style="">	</span>if err != nil { // if we failed to get any rules</div><div><span style="">		</span>klog.ErrorS(err, "Failed to execute iptables-save, syncing all rules")</div><div><span style="">	</span>} else { // otherwise parse the output</div><div><span style="">		</span>existingFilterChains = utiliptables.GetChainLines(utiliptables.TableFilter, proxier.existingFilterChainsData.Bytes())</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// IMPORTANT: existingNATChains may share memory with proxier.iptablesData.</font></div><div><span style="">	</span>existingNATChains := make(map[utiliptables.Chain][]byte)</div><div><span style="">	</span>proxier.iptablesData.Reset()</div><div><span style="">	</span>err = <b><font color="#00994d">proxier.iptables.SaveInto(utiliptables.TableNAT, proxier.iptablesData)</font></b></div><div><span style="">	</span>if err != nil { // if we failed to get any rules</div><div><span style="">		</span>klog.ErrorS(err, "Failed to execute iptables-save, syncing all rules")</div><div><span style="">	</span>} else { // otherwise parse the output</div><div><span style="">		</span>existingNATChains = utiliptables.GetChainLines(utiliptables.TableNAT, proxier.iptablesData.Bytes())</div><div><span style="">	</span>}</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// Reset all buffers used later.(implement via LineBuffer located at pkg/proxy/util/utils.go)</font></div><div><font color="#7f00ff"><span style="">	</span>// This is to avoid memory reallocations and thus improve performance.</font></div><div><span style="">	</span><b><font color="#00994d">proxier.filterChains.Reset()</font></b></div><div><span style="">	</span><b><font color="#00994d">proxier.filterRules.Reset()</font></b></div><div><span style="">	</span><b><font color="#00994d">proxier.natChains.Reset()</font></b></div><div><span style="">	</span><b><font color="#00994d">proxier.natRules.Reset()</font></b></div><div><br /></div><div><span style="white-space: pre;">	</span>...<br /></div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// Build rules for each service-port.</font></div><div><span style="">	</span>for svcName, svc := range proxier.serviceMap {</div><div><span style="">		</span>svcInfo, ok := svc.(*serviceInfo)</div><div><span style="">		</span>if !ok {</div><div><span style="">			</span>klog.ErrorS(nil, "Failed to cast serviceInfo", "serviceName", svcName)</div><div><span style="">			</span>continue</div><div><span style="">		</span>}</div><div><span style="">		</span>protocol := strings.ToLower(string(svcInfo.Protocol()))</div><div><span style="">		</span>svcNameString := svcInfo.nameString</div><div><br /></div><div><span style="">		</span>allEndpoints := proxier.endpointsMap[svcName]</div><div><br /></div><div><font color="#7f00ff"><span style="">		</span>// Figure out the endpoints for Cluster and Local traffic policy.</font></div><div><font color="#7f00ff"><span style="">		</span>// allLocallyReachableEndpoints is the set of all endpoints that can be routed to</font></div><div><font color="#7f00ff"><span style="">		</span>// from this node, given the service's traffic policies. hasEndpoints is true</font></div><div><font color="#7f00ff"><span style="">		</span>// if the service has any usable endpoints on any node, not just this one.</font></div><div><span style="">		</span>clusterEndpoints, localEndpoints, allLocallyReachableEndpoints, hasEndpoints := proxy.CategorizeEndpoints(allEndpoints, svcInfo, proxier.nodeLabels)</div><div><br /></div><div><span style="">		</span><font color="#7f00ff">// Generate the per-endpoint chains.</font></div><div><span style="">		</span>for _, ep := range allLocallyReachableEndpoints {</div><div><span style="">			</span>epInfo, ok := ep.(*endpointsInfo)</div><div><span style="">			</span>if !ok {</div><div><span style="">				</span>klog.ErrorS(err, "Failed to cast endpointsInfo", "endpointsInfo", ep)</div><div><span style="">				</span>continue</div><div><span style="">			</span>}</div><div><br /></div><div><span style="">			</span>endpointChain := epInfo.ChainName</div><div><br /></div><div><span style="">			</span><font color="#7f00ff">// Create the endpoint chain, retaining counters if possible.</font></div><div><span style="">			</span>if chain, ok := existingNATChains[endpointChain]; ok {</div><div><span style="">				</span>proxier.natChains.WriteBytes(chain)</div><div><span style="">			</span>} else {</div><div><span style="">				</span>proxier.natChains.Write(utiliptables.MakeChainLine(endpointChain))</div><div><span style="">			</span>}</div><div><span style="">			</span>activeNATChains[endpointChain] = true</div><div><br /></div><div><span style="">			</span>args = append(args[:0], "-A", string(endpointChain))</div><div><span style="">			</span>args = proxier.appendServiceCommentLocked(args, svcNameString)</div><div><span style="">			</span><font color="#7f00ff">// Handle traffic that loops back to the originator with SNAT.</font></div><div><span style="">			</span>proxier.natRules.Write(</div><div><span style="">				</span>args,</div><div><span style="">				</span>"-s", epInfo.IP(),</div><div><span style="">				</span>"-j", string(KubeMarkMasqChain))</div><div><span style="">			</span><font color="#7f00ff">// Update client-affinity lists.</font></div><div><span style="">			</span>if svcInfo.SessionAffinityType() == v1.ServiceAffinityClientIP {</div><div><span style="">				</span>args = append(args, "-m", "recent", "--name", string(endpointChain), "--set")</div><div><span style="">			</span>}</div><div><span style="">			</span><font color="#7f00ff">// DNAT to final destination.</font></div><div><span style="">			</span>args = append(args, "-m", protocol, "-p", protocol, "-j", "DNAT", "--to-destination", epInfo.Endpoint)</div><div><span style="">			</span>proxier.natRules.Write(args)</div><div><span style="">		</span>}</div><div><br /></div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>...<br /></div><div><br /></div><div><font color="#7f00ff"><span style="">		</span>// If any "external" destinations are enabled, set up external traffic</font></div><div><font color="#7f00ff"><span style="">		</span>// handling.  All captured traffic for all external destinations should</font></div><div><font color="#7f00ff"><span style="">		</span>// jump to externalTrafficChain, which will handle some special-cases</font></div><div><font color="#7f00ff"><span style="">		</span>// and then jump to externalPolicyChain.</font></div><div><span style="">		</span>if hasEndpoints &amp;&amp; svcInfo.ExternallyAccessible() {</div><div><span style="">			</span>if chain, ok := existingNATChains[externalTrafficChain]; ok {</div><div><span style="">				</span>proxier.natChains.WriteBytes(chain)</div><div><span style="">			</span>} else {</div><div><span style="">				</span>proxier.natChains.Write(utiliptables.MakeChainLine(externalTrafficChain))</div><div><span style="">			</span>}</div><div><span style="">			</span>activeNATChains[externalTrafficChain] = true</div><div><br /></div><div><span style="">			</span>if !svcInfo.ExternalPolicyLocal() {</div><div><font color="#7f00ff"><span style="">				</span>// If we are using non-local endpoints we need to masquerade,</font></div><div><font color="#7f00ff"><span style="">				</span>// in case we cross nodes.</font></div><div><span style="">				</span>proxier.natRules.Write(</div><div><span style="">					</span>"-A", string(externalTrafficChain),</div><div><span style="">					</span>"-m", "comment", "--comment", fmt.Sprintf(`"masquerade traffic for %s external destinations"`, svcNameString),</div><div><span style="">					</span>"-j", string(KubeMarkMasqChain))</div><div><span style="">			</span>} else {</div><div><font color="#7f00ff"><span style="">				</span>// If we are only using same-node endpoints, we can retain the</font></div><div><font color="#7f00ff"><span style="">				</span>// source IP in most cases.</font></div><div><br /></div><div><span style="">				</span>if proxier.localDetector.IsImplemented() {</div><div><font color="#7f00ff"><span style="">					</span>// Treat all locally-originated pod -&gt; external destination</font></div><div><font color="#7f00ff"><span style="">					</span>// traffic as a special-case.  It is subject to neither</font></div><div><font color="#7f00ff"><span style="">					</span>// form of traffic policy, which simulates going up-and-out</font></div><div><font color="#7f00ff"><span style="">					</span>// to an external load-balancer and coming back in.</font></div><div><span style="">					</span>proxier.natRules.Write(</div><div><span style="">						</span>"-A", string(externalTrafficChain),</div><div><span style="">						</span>"-m", "comment", "--comment", fmt.Sprintf(`"pod traffic for %s external destinations"`, svcNameString),</div><div><span style="">						</span>proxier.localDetector.IfLocal(),</div><div><span style="">						</span>"-j", string(clusterPolicyChain))</div><div><span style="">				</span>}</div><div><br /></div><div><font color="#7f00ff"><span style="">				</span>// Locally originated traffic (not a pod, but the host node)</font></div><div><font color="#7f00ff"><span style="">				</span>// still needs masquerade because the LBIP itself is a local</font></div><div><font color="#7f00ff"><span style="">				</span>// address, so that will be the chosen source IP.</font></div><div><span style="">				</span>proxier.natRules.Write(</div><div><span style="">					</span>"-A", string(externalTrafficChain),</div><div><span style="">					</span>"-m", "comment", "--comment", fmt.Sprintf(`"masquerade LOCAL traffic for %s external destinations"`, svcNameString),</div><div><span style="">					</span>"-m", "addrtype", "--src-type", "LOCAL",</div><div><span style="">					</span>"-j", string(KubeMarkMasqChain))</div><div><br /></div><div><font color="#7f00ff"><span style="">				</span>// Redirect all src-type=LOCAL -&gt; external destination to the</font></div><div><font color="#7f00ff"><span style="">				</span>// policy=cluster chain. This allows traffic originating</font></div><div><font color="#7f00ff"><span style="">				</span>// from the host to be redirected to the service correctly.</font></div><div><span style="">				</span>proxier.natRules.Write(</div><div><span style="">					</span>"-A", string(externalTrafficChain),</div><div><span style="">					</span>"-m", "comment", "--comment", fmt.Sprintf(`"route LOCAL traffic for %s external destinations"`, svcNameString),</div><div><span style="">					</span>"-m", "addrtype", "--src-type", "LOCAL",</div><div><span style="">					</span>"-j", string(clusterPolicyChain))</div><div><span style="">			</span>}</div><div><br /></div><div><span style="">			</span><font color="#7f00ff">// Anything else falls thru to the appropriate policy chain.</font></div><div><span style="">			</span>proxier.natRules.Write(</div><div><span style="">				</span>"-A", string(externalTrafficChain),</div><div><span style="">				</span>"-j", string(externalPolicyChain))</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span><font color="#7f00ff">// Capture the clusterIP.</font></div><div><span style="">		</span>if hasEndpoints {</div><div><span style="">			</span>args = append(args[:0],</div><div><span style="">				</span>"-m", "comment", "--comment", fmt.Sprintf(`"%s cluster IP"`, svcNameString),</div><div><span style="">				</span>"-m", protocol, "-p", protocol,</div><div><span style="">				</span>"-d", svcInfo.ClusterIP().String(),</div><div><span style="">				</span>"--dport", strconv.Itoa(svcInfo.Port()),</div><div><span style="">			</span>)</div><div><span style="">			</span>if proxier.masqueradeAll {</div><div><span style="">				</span>proxier.natRules.Write(</div><div><span style="">					</span>"-A", string(internalTrafficChain),</div><div><span style="">					</span>args,</div><div><span style="">					</span>"-j", string(KubeMarkMasqChain))</div><div><span style="">			</span>} else if proxier.localDetector.IsImplemented() {</div><div><font color="#7f00ff"><span style="">				</span>// This masquerades off-cluster traffic to a service VIP.  The idea</font></div><div><font color="#7f00ff"><span style="">				</span>// is that you can establish a static route for your Service range,</font></div><div><font color="#7f00ff"><span style="">				</span>// routing to any node, and that node will bridge into the Service</font></div><div><font color="#7f00ff"><span style="">				</span>// for you.  Since that might bounce off-node, we masquerade here.</font></div><div><span style="">				</span>proxier.natRules.Write(</div><div><span style="">					</span>"-A", string(internalTrafficChain),</div><div><span style="">					</span>args,</div><div><span style="">					</span>proxier.localDetector.IfNotLocal(),</div><div><span style="">					</span>"-j", string(KubeMarkMasqChain))</div><div><span style="">			</span>}</div><div><span style="">			</span>proxier.natRules.Write(</div><div><span style="">				</span>"-A", string(kubeServicesChain),</div><div><span style="">				</span>args,</div><div><span style="">				</span>"-j", string(internalTrafficChain))</div><div><span style="">		</span>} else {</div><div><span style="">			</span><font color="#7f00ff">// No endpoints.</font></div><div><span style="">			</span>proxier.filterRules.Write(</div><div><span style="">				</span>"-A", string(kubeServicesChain),</div><div><span style="">				</span>"-m", "comment", "--comment", fmt.Sprintf(`"%s has no endpoints"`, svcNameString),</div><div><span style="">				</span>"-m", protocol, "-p", protocol,</div><div><span style="">				</span>"-d", svcInfo.ClusterIP().String(),</div><div><span style="">				</span>"--dport", strconv.Itoa(svcInfo.Port()),</div><div><span style="">				</span>"-j", "REJECT",</div><div><span style="">			</span>)</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span><font color="#7f00ff">// Capture externalIPs.</font></div><div><span style="">		</span>for _, externalIP := range svcInfo.ExternalIPStrings() {</div><div><span style="">			</span>if hasEndpoints {</div><div><font color="#7f00ff"><span style="">				</span>// Send traffic bound for external IPs to the "external</font></div><div><font color="#7f00ff"><span style="">				</span>// destinations" chain.</font></div><div><span style="">				</span>proxier.natRules.Write(</div><div><span style="">					</span>"-A", string(kubeServicesChain),</div><div><span style="">					</span>"-m", "comment", "--comment", fmt.Sprintf(`"%s external IP"`, svcNameString),</div><div><span style="">					</span>"-m", protocol, "-p", protocol,</div><div><span style="">					</span>"-d", externalIP,</div><div><span style="">					</span>"--dport", strconv.Itoa(svcInfo.Port()),</div><div><span style="">					</span>"-j", string(externalTrafficChain))</div><div><br /></div><div><span style="">			</span>} else {</div><div><span style="">				</span><font color="#7f00ff">// No endpoints.</font></div><div><span style="">				</span>proxier.filterRules.Write(</div><div><span style="">					</span>"-A", string(kubeExternalServicesChain),</div><div><span style="">					</span>"-m", "comment", "--comment", fmt.Sprintf(`"%s has no endpoints"`, svcNameString),</div><div><span style="">					</span>"-m", protocol, "-p", protocol,</div><div><span style="">					</span>"-d", externalIP,</div><div><span style="">					</span>"--dport", strconv.Itoa(svcInfo.Port()),</div><div><span style="">					</span>"-j", "REJECT",</div><div><span style="">				</span>)</div><div><span style="">			</span>}</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span><font color="#7f00ff">// Capture load-balancer ingress.</font></div><div><span style="">		</span>if len(svcInfo.LoadBalancerIPStrings()) &gt; 0 &amp;&amp; hasEndpoints {</div><div><span style="">			</span><font color="#7f00ff">// Normally we send LB matches to the "external destination" chain.</font></div><div><span style="">			</span>nextChain := externalTrafficChain</div><div><br /></div><div><font color="#7f00ff"><span style="">			</span>// If the service specifies any LB source ranges, we need to insert</font></div><div><font color="#7f00ff"><span style="">			</span>// a firewall chain first.</font></div><div><span style="">			</span>if len(svcInfo.LoadBalancerSourceRanges()) &gt; 0 {</div><div><span style="">				</span>fwChain := svcInfo.firewallChainName</div><div><br /></div><div><span style="">				</span><font color="#7f00ff">// Declare the service firewall chain.</font></div><div><span style="">				</span>if chain, ok := existingNATChains[fwChain]; ok {</div><div><span style="">					</span>proxier.natChains.WriteBytes(chain)</div><div><span style="">				</span>} else {</div><div><span style="">					</span>proxier.natChains.Write(utiliptables.MakeChainLine(fwChain))</div><div><span style="">				</span>}</div><div><span style="">				</span>activeNATChains[fwChain] = true</div><div><br /></div><div><font color="#7f00ff"><span style="">				</span>// The firewall chain will jump to the "external destination"</font></div><div><font color="#7f00ff"><span style="">				</span>// chain.</font></div><div><span style="">				</span>nextChain = svcInfo.firewallChainName</div><div><span style="">			</span>}</div><div><br /></div><div><span style="">			</span>for _, lbip := range svcInfo.LoadBalancerIPStrings() {</div><div><span style="">				</span>proxier.natRules.Write(</div><div><span style="">					</span>"-A", string(kubeServicesChain),</div><div><span style="">					</span>"-m", "comment", "--comment", fmt.Sprintf(`"%s loadbalancer IP"`, svcNameString),</div><div><span style="">					</span>"-m", protocol, "-p", protocol,</div><div><span style="">					</span>"-d", lbip,</div><div><span style="">					</span>"--dport", strconv.Itoa(svcInfo.Port()),</div><div><span style="">					</span>"-j", string(nextChain))</div><div><br /></div><div><font color="#7f00ff"><span style="">				</span>// The service firewall rules are created based on the</font></div><div><font color="#7f00ff"><span style="">				</span>// loadBalancerSourceRanges field.  This only works for</font></div><div><font color="#7f00ff"><span style="">				</span>// VIP-like loadbalancers that preserve source IPs.  For</font></div><div><font color="#7f00ff"><span style="">				</span>// loadbalancers which direct traffic to service NodePort, the</font></div><div><font color="#7f00ff"><span style="">				</span>// firewall rules will not apply.</font></div><div><span style="">				</span>if len(svcInfo.LoadBalancerSourceRanges()) &gt; 0 {</div><div><span style="">					</span>args = append(args[:0],</div><div><span style="">						</span>"-A", string(nextChain),</div><div><span style="">						</span>"-m", "comment", "--comment", fmt.Sprintf(`"%s loadbalancer IP"`, svcNameString),</div><div><span style="">					</span>)</div><div><br /></div><div><span style="">					</span><font color="#7f00ff">// firewall filter based on each source range</font></div><div><span style="">					</span>allowFromNode := false</div><div><span style="">					</span>for _, src := range svcInfo.LoadBalancerSourceRanges() {</div><div><span style="">						</span>proxier.natRules.Write(args, "-s", src, "-j", string(externalTrafficChain))</div><div><span style="">						</span>_, cidr, err := netutils.ParseCIDRSloppy(src)</div><div><span style="">						</span>if err != nil {</div><div><span style="">							</span>klog.ErrorS(err, "Error parsing CIDR in LoadBalancerSourceRanges, dropping it", "cidr", cidr)</div><div><span style="">						</span>} else if cidr.Contains(proxier.nodeIP) {</div><div><span style="">							</span>allowFromNode = true</div><div><span style="">						</span>}</div><div><span style="">					</span>}</div><div><font color="#7f00ff"><span style="">					</span>// For VIP-like LBs, the VIP is often added as a local</font></div><div><font color="#7f00ff"><span style="">					</span>// address (via an IP route rule).  In that case, a request</font></div><div><font color="#7f00ff"><span style="">					</span>// from a node to the VIP will not hit the loadbalancer but</font></div><div><font color="#7f00ff"><span style="">					</span>// will loop back with the source IP set to the VIP.  We</font></div><div><font color="#7f00ff"><span style="">					</span>// need the following rule to allow requests from this node.</font></div><div><span style="">					</span>if allowFromNode {</div><div><span style="">						</span>proxier.natRules.Write(</div><div><span style="">							</span>args,</div><div><span style="">							</span>"-s", lbip,</div><div><span style="">							</span>"-j", string(externalTrafficChain))</div><div><span style="">					</span>}</div><div><font color="#7f00ff"><span style="">					</span>// If the packet was able to reach the end of firewall chain,</font></div><div><font color="#7f00ff"><span style="">					</span>// then it did not get DNATed.  It means the packet cannot go</font></div><div><font color="#7f00ff"><span style="">					</span>// thru the firewall, then mark it for DROP.</font></div><div><span style="">					</span>proxier.natRules.Write(args, "-j", string(KubeMarkDropChain))</div><div><span style="">				</span>}</div><div><span style="">			</span>}</div><div><span style="">		</span>} else {</div><div><span style="">			</span><font color="#7f00ff">// No endpoints.</font></div><div><span style="">			</span>for _, lbip := range svcInfo.LoadBalancerIPStrings() {</div><div><span style="">				</span>proxier.filterRules.Write(</div><div><span style="">					</span>"-A", string(kubeExternalServicesChain),</div><div><span style="">					</span>"-m", "comment", "--comment", fmt.Sprintf(`"%s has no endpoints"`, svcNameString),</div><div><span style="">					</span>"-m", protocol, "-p", protocol,</div><div><span style="">					</span>"-d", lbip,</div><div><span style="">					</span>"--dport", strconv.Itoa(svcInfo.Port()),</div><div><span style="">					</span>"-j", "REJECT",</div><div><span style="">				</span>)</div><div><span style="">			</span>}</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span><font color="#7f00ff">// Capture nodeports.</font></div><div><span style="">		</span>if svcInfo.NodePort() != 0 &amp;&amp; len(nodeAddresses) != 0 {</div><div><span style="">			</span>if hasEndpoints {</div><div><font color="#7f00ff"><span style="">				</span>// Jump to the external destination chain.  For better or for</font></div><div><font color="#7f00ff"><span style="">				</span>// worse, nodeports are not subect to loadBalancerSourceRanges,</font></div><div><font color="#7f00ff"><span style="">				</span>// and we can't change that.</font></div><div><span style="">				</span>proxier.natRules.Write(</div><div><span style="">					</span>"-A", string(kubeNodePortsChain),</div><div><span style="">					</span>"-m", "comment", "--comment", svcNameString,</div><div><span style="">					</span>"-m", protocol, "-p", protocol,</div><div><span style="">					</span>"--dport", strconv.Itoa(svcInfo.NodePort()),</div><div><span style="">					</span>"-j", string(externalTrafficChain))</div><div><span style="">			</span>} else {</div><div><span style="">				</span><font color="#7f00ff">// No endpoints.</font></div><div><span style="">				</span>proxier.filterRules.Write(</div><div><span style="">					</span>"-A", string(kubeExternalServicesChain),</div><div><span style="">					</span>"-m", "comment", "--comment", fmt.Sprintf(`"%s has no endpoints"`, svcNameString),</div><div><span style="">					</span>"-m", "addrtype", "--dst-type", "LOCAL",</div><div><span style="">					</span>"-m", protocol, "-p", protocol,</div><div><span style="">					</span>"--dport", strconv.Itoa(svcInfo.NodePort()),</div><div><span style="">					</span>"-j", "REJECT",</div><div><span style="">				</span>)</div><div><span style="">			</span>}</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span><font color="#7f00ff">// Capture healthCheckNodePorts.</font></div><div><span style="">		</span>if svcInfo.HealthCheckNodePort() != 0 {</div><div><font color="#7f00ff"><span style="">			</span>// no matter if node has local endpoints, healthCheckNodePorts</font></div><div><font color="#7f00ff"><span style="">			</span>// need to add a rule to accept the incoming connection</font></div><div><span style="">			</span>proxier.filterRules.Write(</div><div><span style="">				</span>"-A", string(kubeNodePortsChain),</div><div><span style="">				</span>"-m", "comment", "--comment", fmt.Sprintf(`"%s health check node port"`, svcNameString),</div><div><span style="">				</span>"-m", "tcp", "-p", "tcp",</div><div><span style="">				</span>"--dport", strconv.Itoa(svcInfo.HealthCheckNodePort()),</div><div><span style="">				</span>"-j", "ACCEPT",</div><div><span style="">			</span>)</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span>if svcInfo.UsesClusterEndpoints() {</div><div><span style="">			</span><font color="#7f00ff">// Write rules jumping from clusterPolicyChain to clusterEndpoints</font></div><div><span style="">			</span>proxier.writeServiceToEndpointRules(svcNameString, svcInfo, clusterPolicyChain, clusterEndpoints, args)</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span>if svcInfo.UsesLocalEndpoints() {</div><div><span style="">			</span>if len(localEndpoints) != 0 {</div><div><span style="">				</span><font color="#7f00ff">// Write rules jumping from localPolicyChain to localEndpointChains</font></div><div><span style="">				</span>proxier.writeServiceToEndpointRules(svcNameString, svcInfo, localPolicyChain, localEndpoints, args)</div><div><span style="">			</span>} else {</div><div><span style="">				</span>if svcInfo.InternalPolicyLocal() &amp;&amp; utilfeature.DefaultFeatureGate.Enabled(features.ServiceInternalTrafficPolicy) {</div><div><span style="">					</span>serviceNoLocalEndpointsTotalInternal++</div><div><span style="">				</span>}</div><div><span style="">				</span>if svcInfo.ExternalPolicyLocal() {</div><div><span style="">					</span>serviceNoLocalEndpointsTotalExternal++</div><div><span style="">				</span>}</div><div><span style="">				</span>if hasEndpoints {</div><div><span style="">					</span><font color="#7f00ff">// Blackhole all traffic since there are no local endpoints</font></div><div><span style="">					</span>args = append(args[:0],</div><div><span style="">						</span>"-A", string(localPolicyChain),</div><div><span style="">						</span>"-m", "comment", "--comment",</div><div><span style="">						</span>fmt.Sprintf(`"%s has no local endpoints"`, svcNameString),</div><div><span style="">						</span>"-j",</div><div><span style="">						</span>string(KubeMarkDropChain),</div><div><span style="">					</span>)</div><div><span style="">					</span>proxier.natRules.Write(args)</div><div><span style="">				</span>}</div><div><span style="">			</span>}</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// Delete chains no longer in use.</font></div><div><span style="">	</span>for chain := range existingNATChains {</div><div><span style="">		</span>if !activeNATChains[chain] {</div><div><span style="">			</span>chainString := string(chain)</div><div><span style="">			</span>if !isServiceChainName(chainString) {</div><div><span style="">				</span><font color="#7f00ff">// Ignore chains that aren't ours.</font></div><div><span style="">				</span>continue</div><div><span style="">			</span>}</div><div><font color="#7f00ff"><span style="">			</span>// We must (as per iptables) write a chain-line for it, which has</font></div><div><font color="#7f00ff"><span style="">			</span>// the nice effect of flushing the chain.  Then we can remove the</font></div><div><font color="#7f00ff"><span style="">			</span>// chain.</font></div><div><span style="">			</span>proxier.natChains.WriteBytes(existingNATChains[chain])</div><div><span style="">			</span>proxier.natRules.Write("-X", chainString)</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// Finally, tail-call to the nodeports chain.  This needs to be after all</font></div><div><font color="#7f00ff"><span style="">	</span>// other service portal rules.</font></div><div><span style="">	</span>for address := range nodeAddresses {</div><div><span style="">		</span>if utilproxy.IsZeroCIDR(address) {</div><div><span style="">			</span>proxier.natRules.Write(</div><div><span style="">				</span>"-A", string(kubeServicesChain),</div><div><span style="">				</span>"-m", "comment", "--comment", `"kubernetes service nodeports; NOTE: this must be the last rule in this chain"`,</div><div><span style="">				</span>"-m", "addrtype", "--dst-type", "LOCAL",</div><div><span style="">				</span>"-j", string(kubeNodePortsChain))</div><div><span style="">			</span><font color="#7f00ff">// Nothing else matters after the zero CIDR</font>.</div><div><span style="">			</span>break</div><div><span style="">		</span>}</div><div><span style="">		</span><font color="#7f00ff">// Ignore IP addresses with incorrect version</font></div><div><span style="">		</span>if isIPv6 &amp;&amp; !netutils.IsIPv6String(address) || !isIPv6 &amp;&amp; netutils.IsIPv6String(address) {</div><div><span style="">			</span>klog.ErrorS(nil, "IP has incorrect IP version", "IP", address)</div><div><span style="">			</span>continue</div><div><span style="">		</span>}</div><div><span style="">		</span><font color="#7f00ff">// create nodeport rules for each IP one by one</font></div><div><span style="">		</span>proxier.natRules.Write(</div><div><span style="">			</span>"-A", string(kubeServicesChain),</div><div><span style="">			</span>"-m", "comment", "--comment", `"kubernetes service nodeports; NOTE: this must be the last rule in this chain"`,</div><div><span style="">			</span>"-d", address,</div><div><span style="">			</span>"-j", string(kubeNodePortsChain))</div><div><span style="">	</span>}</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// Drop the packets in INVALID state, which would potentially cause</font></div><div><font color="#7f00ff"><span style="">	</span>// unexpected connection reset.</font></div><div><font color="#7f00ff"><span style="">	</span>// https://github.com/kubernetes/kubernetes/issues/74839</font></div><div><span style="">	</span>proxier.filterRules.Write(</div><div><span style="">		</span>"-A", string(kubeForwardChain),</div><div><span style="">		</span>"-m", "conntrack",</div><div><span style="">		</span>"--ctstate", "INVALID",</div><div><span style="">		</span>"-j", "DROP",</div><div><span style="">	</span>)</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// If the masqueradeMark has been added then we want to forward that same</font></div><div><font color="#7f00ff"><span style="">	</span>// traffic, this allows NodePort traffic to be forwarded even if the default</font></div><div><font color="#7f00ff"><span style="">	</span>// FORWARD policy is not accept.</font></div><div><span style="">	</span>proxier.filterRules.Write(</div><div><span style="">		</span>"-A", string(kubeForwardChain),</div><div><span style="">		</span>"-m", "comment", "--comment", `"kubernetes forwarding rules"`,</div><div><span style="">		</span>"-m", "mark", "--mark", fmt.Sprintf("%s/%s", proxier.masqueradeMark, proxier.masqueradeMark),</div><div><span style="">		</span>"-j", "ACCEPT",</div><div><span style="">	</span>)</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// The following rule ensures the traffic after the initial packet accepted</font></div><div><font color="#7f00ff"><span style="">	</span>// by the "kubernetes forwarding rules" rule above will be accepted.</font></div><div><span style="">	</span>proxier.filterRules.Write(</div><div><span style="">		</span>"-A", string(kubeForwardChain),</div><div><span style="">		</span>"-m", "comment", "--comment", `"kubernetes forwarding conntrack rule"`,</div><div><span style="">		</span>"-m", "conntrack",</div><div><span style="">		</span>"--ctstate", "RELATED,ESTABLISHED",</div><div><span style="">		</span>"-j", "ACCEPT",</div><div><span style="">	</span>)</div><div><br /></div><div><span style="">	</span>metrics.IptablesRulesTotal.WithLabelValues(string(utiliptables.TableFilter)).Set(float64(proxier.filterRules.Lines()))</div><div><span style="">	</span>metrics.IptablesRulesTotal.WithLabelValues(string(utiliptables.TableNAT)).Set(float64(proxier.natRules.Lines()))</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// Sync rules.</font></div><div><span style="">	</span><b><font color="#00994d">proxier.iptablesData.Reset()</font></b></div><div><span style="">	</span><b><font color="#00994d">proxier.iptablesData.WriteString("*filter\n")</font></b></div><div><span style="">	</span><b><font color="#00994d">proxier.iptablesData.Write(proxier.filterChains.Bytes())</font></b></div><div><span style="">	</span><b><font color="#00994d">proxier.iptablesData.Write(proxier.filterRules.Bytes())</font></b></div><div><span style="">	</span><b><font color="#00994d">proxier.iptablesData.WriteString("COMMIT\n")</font></b></div><div><span style="">	</span><b><font color="#00994d">proxier.iptablesData.WriteString("*nat\n")</font></b></div><div><span style="">	</span><b><font color="#00994d">proxier.iptablesData.Write(proxier.natChains.Bytes())</font></b></div><div><span style="">	</span><b><font color="#00994d">proxier.iptablesData.Write(proxier.natRules.Bytes())</font></b></div><div><span style="">	</span><b><font color="#00994d">proxier.iptablesData.WriteString("COMMIT\n")</font></b></div><div><br /></div><div><span style="">	</span>klog.V(2).InfoS("Reloading service iptables data",</div><div><span style="">		</span>"numServices", len(proxier.serviceMap),</div><div><span style="">		</span>"numEndpoints", proxier.endpointChainsNumber,</div><div><span style="">		</span>"numFilterChains", proxier.filterChains.Lines(),</div><div><span style="">		</span>"numFilterRules", proxier.filterRules.Lines(),</div><div><span style="">		</span>"numNATChains", proxier.natChains.Lines(),</div><div><span style="">		</span>"numNATRules", proxier.natRules.Lines(),</div><div><span style="">	</span>)</div><div><span style="">	</span>klog.V(9).InfoS("Restoring iptables", "rules", proxier.iptablesData.Bytes())</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// NOTE: NoFlushTables is used so we don't flush non-kubernetes chains in the table</font></div><div><span style="">	</span>err = <b><font color="#00994d">proxier.iptables.RestoreAll(proxier.iptablesData.Bytes(), utiliptables.NoFlushTables, utiliptables.RestoreCounters)</font></b></div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>if pErr, ok := err.(utiliptables.ParseError); ok {</div><div><span style="">			</span>lines := utiliptables.ExtractLines(proxier.iptablesData.Bytes(), pErr.Line(), 3)</div><div><span style="">			</span>klog.ErrorS(pErr, "Failed to execute iptables-restore", "rules", lines)</div><div><span style="">		</span>} else {</div><div><span style="">			</span>klog.ErrorS(err, "Failed to execute iptables-restore")</div><div><span style="">		</span>}</div><div><span style="">		</span>metrics.IptablesRestoreFailuresTotal.Inc()</div><div><span style="">		</span>return</div><div><span style="">	</span>}</div><div><span style="">	</span>success = true</div><div><span style="white-space: pre;">	</span>...<br /></div><div>}</div></pre></div></div></div></foreignObject><text x="383" y="5687" fill="#000000" font-family="Helvetica" font-size="12px">// This is where all of the iptables-save/restore calls happen....</text></switch></g><path d="M 881 2060 L 881 2093.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 881 2098.88 L 877.5 2091.88 L 881 2093.63 L 884.5 2091.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>