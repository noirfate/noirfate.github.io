<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than diagrams.net -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="2917px" height="4179px" viewBox="-0.5 -0.5 2917 4179" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2022-11-22T10:28:53.752Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/19.0.3 Chrome/102.0.5005.63 Electron/19.0.3 Safari/537.36&quot; etag=&quot;kmP0diaep4VlNKscJF_M&quot; version=&quot;19.0.3&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;jmVMBnJVP8WUVvreUFzM&quot; name=&quot;第 1 页&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs/><g><path d="M 1310 23 L 1310 0 L 1590 0 L 1590 23" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 1310 23 L 1310 110 L 1590 110 L 1590 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1310 23 L 1590 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1449.5" y="16">cmd/kube-proxy/proxy.go</text></g><rect x="1310" y="20" width="280" height="90" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 278px; height: 1px; padding-top: 65px; margin-left: 1312px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><b>func main()</b> {</div><div><span style="">	</span><b><font color="#00994d">command := app.NewProxyCommand()</font></b></div><div><span style="">	</span><b><font color="#00994d">code := cli.Run(command)</font></b></div><div><span style="">	</span>os.Exit(code)</div><div>}</div></pre></div></div></div></foreignObject><text x="1312" y="69" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">func main() {...</text></switch></g><path d="M 1050 163 L 1050 140 L 1850 140 L 1850 163" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1050 163 L 1050 760 L 1850 760 L 1850 163" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1050 163 L 1850 163" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1449.5" y="156">cmd/kube-proxy/app/server.go</text></g><rect x="1050" y="160" width="800" height="600" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 798px; height: 1px; padding-top: 460px; margin-left: 1052px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><font color="#7f00ff">// NewProxyCommand creates a *cobra.Command object with default parameters</font></div><div><b>func NewProxyCommand() *cobra.Command</b> {</div><div><span style="">	</span>opts := NewOptions()</div><div><br /></div><div><span style="">	</span>cmd := &amp;cobra.Command{</div><div><span style="">		</span>Use: "kube-proxy",</div><div><span style="">		</span>Long: `The Kubernetes network proxy runs on each node. This</div><div>reflects services as defined in the Kubernetes API on each node and can do simple</div><div>TCP, UDP, and SCTP stream forwarding or round robin TCP, UDP, and SCTP forwarding across a set of backends.</div><div>Service cluster IPs and ports are currently found through Docker-links-compatible</div><div>environment variables specifying ports opened by the service proxy. There is an optional</div><div>addon that provides cluster DNS for these cluster IPs. The user must create a service</div><div>with the apiserver API to configure the proxy.`,</div><div><span style="">		</span><b><font color="#00994d">RunE: func(cmd *cobra.Command, args []string)</font></b> error {</div><div><span style="">			</span>verflag.PrintAndExitIfRequested()</div><div><span style="">			</span>cliflag.PrintFlags(cmd.Flags())</div><div><br /></div><div><span style="">			</span>if err := initForOS(opts.WindowsService); err != nil {</div><div><span style="">				</span>return fmt.Errorf("failed os init: %w", err)</div><div><span style="">			</span>}</div><div><br /></div><div><span style="">			</span>if err := opts.Complete(); err != nil {</div><div><span style="">				</span>return fmt.Errorf("failed complete: %w", err)</div><div><span style="">			</span>}</div><div><br /></div><div><span style="">			</span>if err := opts.Validate(); err != nil {</div><div><span style="">				</span>return fmt.Errorf("failed validate: %w", err)</div><div><span style="">			</span>}</div><div><br /></div><div><span style="">			</span><b><font color="#00994d">if err := opts.Run(); err != nil</font></b> {</div><div><span style="">				</span>klog.ErrorS(err, "Error running ProxyServer")</div><div><span style="">				</span>return err</div><div><span style="">			</span>}</div><div><br /></div><div><span style="">			</span>return nil</div><div><span style="">		</span>},</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span>}</div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span>return cmd</div><div>}</div></pre></div></div></div></foreignObject><text x="1052" y="464" fill="#000000" font-family="Helvetica" font-size="12px">// NewProxyCommand creates a *cobra.Command object with default parameters...</text></switch></g><path d="M 1705 945 L 1920 945 L 1920 1670.2 L 1943.63 1670.17" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1948.88 1670.16 L 1941.89 1673.67 L 1943.63 1670.17 L 1941.88 1666.67 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1195 813 L 1195 790 L 1705 790 L 1705 813" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1195 813 L 1195 1100 L 1705 1100 L 1705 813" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1195 813 L 1705 813" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1449.5" y="806">cmd/kube-proxy/app/server.go</text></g><rect x="1195" y="810" width="510" height="290" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 508px; height: 1px; padding-top: 955px; margin-left: 1197px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><font color="#7f00ff">// Run runs the specified ProxyServer.</font></div><div><b>func (o *Options) Run()</b> error {</div><div><span style="">	</span>defer close(o.errCh)</div><div><span style="">	</span>if len(o.WriteConfigTo) &gt; 0 {</div><div><span style="">		</span>return o.writeConfigFile()</div><div><span style="">	</span>}</div><div><br /></div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// create corresponding proxy server (server_windows.go / server_others.go)</font><br /></div><div><span style="">	</span><b><font color="#00994d">proxyServer, err := NewProxyServer(o)</font></b></div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return err</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>if o.CleanupAndExit {</div><div><span style="">		</span>return proxyServer.CleanupAndExit()</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>o.proxyServer = proxyServer</div><div><span style="">	</span>return <b><font color="#00994d">o.runLoop()</font></b></div><div>}</div></pre></div></div></div></foreignObject><text x="1197" y="959" fill="#000000" font-family="Helvetica" font-size="12px">// Run runs the specified ProxyServer....</text></switch></g><path d="M 1950 813 L 1950 790 L 2916 790 L 2916 813" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1950 813 L 1950 4170 L 2916 4170 L 2916 813" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1950 813 L 2916 813" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="2432.5" y="806">cmd/kube-proxy/app/server_others.go</text></g><rect x="1950" y="810" width="966" height="3360" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 964px; height: 1px; padding-top: 2490px; margin-left: 1952px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><b>func newProxyServer</b>(</div><div><span style="">	</span>config *proxyconfigapi.KubeProxyConfiguration,</div><div><span style="">	</span>cleanupAndExit bool,</div><div><span style="">	</span>master string) (*ProxyServer, error) {</div><div><span style="white-space: pre;">	</span>...<br /></div><div><font color="#7f00ff"><span style="">	</span>// Create a iptables utils.</font></div><div><font color="#7f00ff"><span style="white-space: pre;">	</span>// wrapper of os/exec (vendor/k8s.io/utils/exec/exec.go)</font><br /></div><div><span style="">	</span>execer := exec.New()</div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// create kube-apiserver client</font><br /></div><div><span style="">	</span>client, eventClient, err := createClients(config.ClientConnection, master)</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return nil, err</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>nodeIP := detectNodeIP(client, hostname, config.BindAddress)</div><div><span style="">	</span>klog.InfoS("Detected node IP", "address", nodeIP.String())</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// Create event recorder</font></div><div><span style="">	</span>eventBroadcaster := events.NewBroadcaster(&amp;events.EventSinkImpl{Interface: client.EventsV1()})</div><div><span style="">	</span>recorder := eventBroadcaster.NewRecorder(scheme.Scheme, "kube-proxy")</div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// get proxy mode: iptables, ipvs, userspace</font><br /></div><div><span style="">	</span><b><font color="#00994d">proxyMode := getProxyMode(string(config.Mode), canUseIPVS, iptables.LinuxKernelCompatTester{})</font></b></div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span>dualStack := true <font color="#7f00ff">// While we assume that node supports, we do further checks below</font></div><div><br /></div><div><span style="">	</span>if proxyMode != proxyModeUserspace {</div><div><font color="#7f00ff"><span style="">		</span>// Create iptables handlers for both families, one is already created</font></div><div><font color="#7f00ff"><span style="">		</span>// Always ordered as IPv4, IPv6</font></div><div><span style="">		</span>if primaryProtocol == utiliptables.ProtocolIPv4 {</div><div><span style="">			</span>ipt[0] = iptInterface</div><div><span style="">			</span>ipt[1] = utiliptables.New(execer, utiliptables.ProtocolIPv6)</div><div><span style="">		</span>} else {</div><div><span style="">			</span>ipt[0] = utiliptables.New(execer, utiliptables.ProtocolIPv4)</div><div><span style="">			</span>ipt[1] = iptInterface</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span>for _, perFamilyIpt := range ipt {</div><div><span style="">			</span>if !perFamilyIpt.Present() {</div><div><span style="">				</span>klog.V(0).InfoS("kube-proxy running in single-stack mode, this ipFamily is not supported", "ipFamily", perFamilyIpt.Protocol())</div><div><span style="">				</span>dualStack = false</div><div><span style="">			</span>}</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>if <b><font color="#00994d">proxyMode == proxyModeIPTables</font></b> {</div><div><span style="">		</span>klog.V(0).InfoS("Using iptables Proxier")</div><div><span style="">		</span>if config.IPTables.MasqueradeBit == nil {</div><div><span style="">			</span><font color="#7f00ff">// MasqueradeBit must be specified or defaulted.</font></div><div><span style="">			</span>return nil, fmt.Errorf("unable to read IPTables MasqueradeBit from config")</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span>if dualStack {</div><div><span style="">			</span>klog.V(0).InfoS("kube-proxy running in dual-stack mode", "ipFamily", iptInterface.Protocol())</div><div><span style="">			</span>klog.V(0).InfoS("Creating dualStackProxier for iptables")</div><div><span style="">			</span><font color="#7f00ff">// Always ordered to match []ipt</font></div><div><span style="">			</span>var localDetectors [2]proxyutiliptables.LocalTrafficDetector</div><div><span style="">			</span>localDetectors, err = getDualStackLocalDetectorTuple(detectLocalMode, config, ipt, nodeInfo)</div><div><span style="">			</span>if err != nil {</div><div><span style="">				</span>return nil, fmt.Errorf("unable to create proxier: %v", err)</div><div><span style="">			</span>}</div><div><br /></div><div><span style="">			</span><font color="#7f00ff">// TODO this has side effects that should only happen when Run() is invoked.</font></div><div><span style="">			</span><b><font color="#00994d">proxier, err = iptables.NewDualStackProxier</font></b>(</div><div><span style="">				</span>ipt,</div><div><span style="">				</span>utilsysctl.New(),</div><div><span style="">				</span>execer,</div><div><span style="">				</span>config.IPTables.SyncPeriod.Duration,</div><div><span style="">				</span>config.IPTables.MinSyncPeriod.Duration,</div><div><span style="">				</span>config.IPTables.MasqueradeAll,</div><div><span style="">				</span>int(*config.IPTables.MasqueradeBit),</div><div><span style="">				</span>localDetectors,</div><div><span style="">				</span>hostname,</div><div><span style="">				</span>nodeIPTuple(config.BindAddress),</div><div><span style="">				</span>recorder,</div><div><span style="">				</span>healthzServer,</div><div><span style="">				</span>config.NodePortAddresses,</div><div><span style="">			</span>)</div><div><span style="">		</span>} else {</div><div><span style="">			</span><font color="#7f00ff">// Create a single-stack proxier if and only if the node does not support dual-stack (i.e, no iptables support).</font></div><div><span style="">			</span>var localDetector proxyutiliptables.LocalTrafficDetector</div><div><span style="">			</span>localDetector, err = getLocalDetector(detectLocalMode, config, iptInterface, nodeInfo)</div><div><span style="">			</span>if err != nil {</div><div><span style="">				</span>return nil, fmt.Errorf("unable to create proxier: %v", err)</div><div><span style="">			</span>}</div><div><br /></div><div><span style="">			</span><font color="#7f00ff">// TODO this has side effects that should only happen when Run() is invoked.</font></div><div><span style="">			</span><b><font color="#00994d">proxier, err = iptables.NewProxier</font></b>(</div><div><span style="">				</span>iptInterface,</div><div><span style="">				</span>utilsysctl.New(),</div><div><span style="">				</span>execer,</div><div><span style="">				</span>config.IPTables.SyncPeriod.Duration,</div><div><span style="">				</span>config.IPTables.MinSyncPeriod.Duration,</div><div><span style="">				</span>config.IPTables.MasqueradeAll,</div><div><span style="">				</span>int(*config.IPTables.MasqueradeBit),</div><div><span style="">				</span>localDetector,</div><div><span style="">				</span>hostname,</div><div><span style="">				</span>nodeIP,</div><div><span style="">				</span>recorder,</div><div><span style="">				</span>healthzServer,</div><div><span style="">				</span>config.NodePortAddresses,</div><div><span style="">			</span>)</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span>if err != nil {</div><div><span style="">			</span>return nil, fmt.Errorf("unable to create proxier: %v", err)</div><div><span style="">		</span>}</div><div><span style="">		</span>proxymetrics.RegisterMetrics()</div><div><span style="">	</span>} else if <b><font color="#00994d">proxyMode == proxyModeIPVS</font></b> {</div><div><span style="">		</span>klog.V(0).InfoS("Using ipvs Proxier")</div><div><span style="">		</span>if dualStack {</div><div><span style="">			</span>klog.V(0).InfoS("Creating dualStackProxier for ipvs")</div><div><br /></div><div><span style="">			</span>nodeIPs := nodeIPTuple(config.BindAddress)</div><div><br /></div><div><span style="">			</span><font color="#7f00ff">// Always ordered to match []ipt</font></div><div><span style="">			</span>var localDetectors [2]proxyutiliptables.LocalTrafficDetector</div><div><span style="">			</span>localDetectors, err = getDualStackLocalDetectorTuple(detectLocalMode, config, ipt, nodeInfo)</div><div><span style="">			</span>if err != nil {</div><div><span style="">				</span>return nil, fmt.Errorf("unable to create proxier: %v", err)</div><div><span style="">			</span>}</div><div><br /></div><div><span style="">			</span><b><font color="#00994d">proxier, err = ipvs.NewDualStackProxier</font></b>(</div><div><span style="">				</span>ipt,</div><div><span style="">				</span>ipvsInterface,</div><div><span style="">				</span>ipsetInterface,</div><div><span style="">				</span>utilsysctl.New(),</div><div><span style="">				</span>execer,</div><div><span style="">				</span>config.IPVS.SyncPeriod.Duration,</div><div><span style="">				</span>config.IPVS.MinSyncPeriod.Duration,</div><div><span style="">				</span>config.IPVS.ExcludeCIDRs,</div><div><span style="">				</span>config.IPVS.StrictARP,</div><div><span style="">				</span>config.IPVS.TCPTimeout.Duration,</div><div><span style="">				</span>config.IPVS.TCPFinTimeout.Duration,</div><div><span style="">				</span>config.IPVS.UDPTimeout.Duration,</div><div><span style="">				</span>config.IPTables.MasqueradeAll,</div><div><span style="">				</span>int(*config.IPTables.MasqueradeBit),</div><div><span style="">				</span>localDetectors,</div><div><span style="">				</span>hostname,</div><div><span style="">				</span>nodeIPs,</div><div><span style="">				</span>recorder,</div><div><span style="">				</span>healthzServer,</div><div><span style="">				</span>config.IPVS.Scheduler,</div><div><span style="">				</span>config.NodePortAddresses,</div><div><span style="">				</span>kernelHandler,</div><div><span style="">			</span>)</div><div><span style="">		</span>} else {</div><div><span style="">			</span>var localDetector proxyutiliptables.LocalTrafficDetector</div><div><span style="">			</span>localDetector, err = getLocalDetector(detectLocalMode, config, iptInterface, nodeInfo)</div><div><span style="">			</span>if err != nil {</div><div><span style="">				</span>return nil, fmt.Errorf("unable to create proxier: %v", err)</div><div><span style="">			</span>}</div><div><br /></div><div><span style="">			</span><b><font color="#00994d">proxier, err = ipvs.NewProxier</font></b>(</div><div><span style="">				</span>iptInterface,</div><div><span style="">				</span>ipvsInterface,</div><div><span style="">				</span>ipsetInterface,</div><div><span style="">				</span>utilsysctl.New(),</div><div><span style="">				</span>execer,</div><div><span style="">				</span>config.IPVS.SyncPeriod.Duration,</div><div><span style="">				</span>config.IPVS.MinSyncPeriod.Duration,</div><div><span style="">				</span>config.IPVS.ExcludeCIDRs,</div><div><span style="">				</span>config.IPVS.StrictARP,</div><div><span style="">				</span>config.IPVS.TCPTimeout.Duration,</div><div><span style="">				</span>config.IPVS.TCPFinTimeout.Duration,</div><div><span style="">				</span>config.IPVS.UDPTimeout.Duration,</div><div><span style="">				</span>config.IPTables.MasqueradeAll,</div><div><span style="">				</span>int(*config.IPTables.MasqueradeBit),</div><div><span style="">				</span>localDetector,</div><div><span style="">				</span>hostname,</div><div><span style="">				</span>nodeIP,</div><div><span style="">				</span>recorder,</div><div><span style="">				</span>healthzServer,</div><div><span style="">				</span>config.IPVS.Scheduler,</div><div><span style="">				</span>config.NodePortAddresses,</div><div><span style="">				</span>kernelHandler,</div><div><span style="">			</span>)</div><div><span style="">		</span>}</div><div><span style="">		</span>if err != nil {</div><div><span style="">			</span>return nil, fmt.Errorf("unable to create proxier: %v", err)</div><div><span style="">		</span>}</div><div><span style="">		</span>proxymetrics.RegisterMetrics()</div><div><span style="">	</span>} else {</div><div><span style="">		</span>klog.V(0).InfoS("Using userspace Proxier")</div><div><span style="">		</span>klog.V(0).InfoS("The userspace proxier is now deprecated and will be removed in a future release, please use 'iptables' or 'ipvs' instead")</div><div><br /></div><div><span style="">		</span><font color="#7f00ff">// TODO this has side effects that should only happen when Run() is invoked.</font></div><div><span style="">		</span><b><font color="#00994d">proxier, err = userspace.NewProxier</font></b>(</div><div><span style="">			</span>userspace.NewLoadBalancerRR(),</div><div><span style="">			</span>netutils.ParseIPSloppy(config.BindAddress),</div><div><span style="">			</span>iptInterface,</div><div><span style="">			</span>execer,</div><div><span style="">			</span>*utilnet.ParsePortRangeOrDie(config.PortRange),</div><div><span style="">			</span>config.IPTables.SyncPeriod.Duration,</div><div><span style="">			</span>config.IPTables.MinSyncPeriod.Duration,</div><div><span style="">			</span>config.UDPIdleTimeout.Duration,</div><div><span style="">			</span>config.NodePortAddresses,</div><div><span style="">		</span>)</div><div><span style="">		</span>if err != nil {</div><div><span style="">			</span>return nil, fmt.Errorf("unable to create proxier: %v", err)</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>useEndpointSlices := true</div><div><span style="">	</span>if proxyMode == proxyModeUserspace {</div><div><span style="">		</span><font color="#7f00ff">// userspace mode doesn't support endpointslice.</font></div><div><span style="">		</span>useEndpointSlices = false</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>return <b><font color="#00994d">&amp;ProxyServer</font></b>{</div><div><span style="">		</span>Client:                 client,</div><div><span style="">		</span>EventClient:               eventClient,</div><div><span style="">		</span>IptInterface:              iptInterface,</div><div><span style="">		</span>IpvsInterface:              ipvsInterface,</div><div><span style="">		</span>IpsetInterface:             ipsetInterface,</div><div><span style="">		</span>execer:                 execer,</div><div><span style="">		</span>Proxier:                 proxier,</div><div><span style="">		</span>Broadcaster:               eventBroadcaster,</div><div><span style="">		</span>Recorder:                recorder,</div><div><span style="">		</span>ConntrackConfiguration:          config.Conntrack,</div><div><span style="">		</span>Conntracker:               &amp;realConntracker{},</div><div><span style="">		</span>ProxyMode:                proxyMode,</div><div><span style="">		</span>NodeRef:                 nodeRef,</div><div><span style="">		</span>MetricsBindAddress:           config.MetricsBindAddress,</div><div><span style="">		</span>BindAddressHardFail:           config.BindAddressHardFail,</div><div><span style="">		</span>EnableProfiling:             config.EnableProfiling,</div><div><span style="">		</span>OOMScoreAdj:               config.OOMScoreAdj,</div><div><span style="">		</span>ConfigSyncPeriod:            config.ConfigSyncPeriod.Duration,</div><div><span style="">		</span>HealthzServer:              healthzServer,</div><div><span style="">		</span>UseEndpointSlices:            useEndpointSlices,</div><div><span style="">	</span>}, nil</div><div>}</div></pre></div></div></div></foreignObject><text x="1952" y="2494" fill="#000000" font-family="Helvetica" font-size="12px">func newProxyServer(...</text></switch></g><path d="M 1195 1153 L 1195 1130 L 1705 1130 L 1705 1153" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1195 1153 L 1195 1440 L 1705 1440 L 1705 1153" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1195 1153 L 1705 1153" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1449.5" y="1146">cmd/kube-proxy/app/server.go</text></g><rect x="1195" y="1150" width="510" height="290" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 508px; height: 1px; padding-top: 1295px; margin-left: 1197px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><font color="#7f00ff">// runLoop will watch on the update change of the proxy server's configuration file.</font></div><div><font color="#7f00ff">// Return an error when updated</font></div><div><b><font color="#00994d">func (o *Options) runLoop()</font></b> error {</div><div><span style="">	</span>if o.watcher != nil {</div><div><span style="">		</span>o.watcher.Run()</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// run the proxy in goroutine</font></div><div><span style="">	</span>go func() {</div><div><span style="">		</span><b><font color="#00994d">err := o.proxyServer.Run()</font></b></div><div><span style="">		</span>o.errCh &lt;- err</div><div><span style="">	</span>}()</div><div><br /></div><div><span style="">	</span>for {</div><div><span style="">		</span>err := &lt;-o.errCh</div><div><span style="">		</span>if err != nil {</div><div><span style="">			</span>return err</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div>}</div></pre></div></div></div></foreignObject><text x="1197" y="1299" fill="#000000" font-family="Helvetica" font-size="12px">// runLoop will watch on the update change of the proxy server's configuration file....</text></switch></g><path d="M 0 813 L 0 790 L 910 790 L 910 813" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 813 L 0 2450 L 910 2450 L 910 813" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 813 L 910 813" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="454.5" y="806">cmd/kube-proxy/app/server_windows.go</text></g><rect x="0" y="810" width="910" height="1640" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 908px; height: 1px; padding-top: 1630px; margin-left: 2px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><b>func newProxyServer</b>(config *proxyconfigapi.KubeProxyConfiguration, cleanupAndExit bool, master string) (*ProxyServer, error) {</div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// create kube-apiserver client</font><br /></div><div><span style="">	</span>client, eventClient, err := createClients(config.ClientConnection, master)</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return nil, err</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// Create event recorder</font></div><div><span style="">	</span>hostname, err := utilnode.GetHostname(config.HostnameOverride)</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>return nil, err</div><div><span style="">	</span>}</div><div><span style="">	</span>nodeIP := detectNodeIP(client, hostname, config.BindAddress)</div><div><span style="">	</span>klog.InfoS("Detected node IP", "IP", nodeIP.String())</div><div><br /></div><div><span style="">	</span>eventBroadcaster := events.NewBroadcaster(&amp;events.EventSinkImpl{Interface: client.EventsV1()})</div><div><span style="">	</span>recorder := eventBroadcaster.NewRecorder(proxyconfigscheme.Scheme, "kube-proxy")</div><div><br /></div><div><span style="">	</span>nodeRef := &amp;v1.ObjectReference{</div><div><span style="">		</span>Kind:      "Node",</div><div><span style="">		</span>Name:      hostname,</div><div><span style="">		</span>UID:       types.UID(hostname),</div><div><span style="">		</span>Namespace: "",</div><div><span style="">	</span>}</div><div><span style="white-space: pre;">	</span>...<br /></div><div><br /></div><div><span style="">	</span>var proxier proxy.Provider</div><div><span style="">	</span><b><font color="#00994d">proxyMode := getProxyMode(string(config.Mode), winkernel.WindowsKernelCompatTester{})</font></b></div><div><span style="">	</span>dualStackMode := getDualStackMode(config.Winkernel.NetworkName, winkernel.DualStackCompatTester{})</div><div><span style="">	</span>if <b><font color="#00994d">proxyMode == proxyModeKernelspace</font></b> {</div><div><span style="">		</span>klog.V(0).InfoS("Using Kernelspace Proxier.")</div><div><span style="">		</span>if dualStackMode {</div><div><span style="">			</span>klog.V(0).InfoS("Creating dualStackProxier for Windows kernel.")</div><div><br /></div><div><span style="">			</span><b><font color="#00994d">proxier, err = winkernel.NewDualStackProxier</font></b>(</div><div><span style="">				</span>config.IPTables.SyncPeriod.Duration,</div><div><span style="">				</span>config.IPTables.MinSyncPeriod.Duration,</div><div><span style="">				</span>config.IPTables.MasqueradeAll,</div><div><span style="">				</span>int(*config.IPTables.MasqueradeBit),</div><div><span style="">				</span>config.ClusterCIDR,</div><div><span style="">				</span>hostname,</div><div><span style="">				</span>nodeIPTuple(config.BindAddress),</div><div><span style="">				</span>recorder,</div><div><span style="">				</span>healthzServer,</div><div><span style="">				</span>config.Winkernel,</div><div><span style="">				</span>healthzPort,</div><div><span style="">			</span>)</div><div><span style="">		</span>} else {</div><div><br /></div><div><span style="">			</span><b><font color="#00994d">proxier, err = winkernel.NewProxier</font></b>(</div><div><span style="">				</span>config.IPTables.SyncPeriod.Duration,</div><div><span style="">				</span>config.IPTables.MinSyncPeriod.Duration,</div><div><span style="">				</span>config.IPTables.MasqueradeAll,</div><div><span style="">				</span>int(*config.IPTables.MasqueradeBit),</div><div><span style="">				</span>config.ClusterCIDR,</div><div><span style="">				</span>hostname,</div><div><span style="">				</span>nodeIP,</div><div><span style="">				</span>recorder,</div><div><span style="">				</span>healthzServer,</div><div><span style="">				</span>config.Winkernel,</div><div><span style="">				</span>healthzPort,</div><div><span style="">			</span>)</div><div><br /></div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span>if err != nil {</div><div><span style="">			</span>return nil, fmt.Errorf("unable to create proxier: %v", err)</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span>winkernel.RegisterMetrics()</div><div><span style="">	</span>} else {</div><div><span style="">		</span>klog.V(0).InfoS("Using userspace Proxier.")</div><div><span style="">		</span>klog.V(0).InfoS("The userspace proxier is now deprecated and will be removed in a future release, please use 'kernelspace' instead")</div><div><span style="">		</span>execer := exec.New()</div><div><span style="">		</span>var netshInterface utilnetsh.Interface</div><div><span style="">		</span>netshInterface = utilnetsh.New(execer)</div><div><br /></div><div><span style="">		</span><b><font color="#00994d">proxier, err = winuserspace.NewProxier</font></b>(</div><div><span style="">			</span>winuserspace.NewLoadBalancerRR(),</div><div><span style="">			</span>netutils.ParseIPSloppy(config.BindAddress),</div><div><span style="">			</span>netshInterface,</div><div><span style="">			</span>*utilnet.ParsePortRangeOrDie(config.PortRange),</div><div><span style="">			</span><font color="#7f00ff">// TODO @pires replace below with default values, if applicable</font></div><div><span style="">			</span>config.IPTables.SyncPeriod.Duration,</div><div><span style="">			</span>config.UDPIdleTimeout.Duration,</div><div><span style="">		</span>)</div><div><span style="">		</span>if err != nil {</div><div><span style="">			</span>return nil, fmt.Errorf("unable to create proxier: %v", err)</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div><span style="">	</span>useEndpointSlices := true</div><div><span style="">	</span>if proxyMode == proxyModeUserspace {</div><div><span style="">		</span><font color="#7f00ff">// userspace mode doesn't support endpointslice.</font></div><div><span style="">		</span>useEndpointSlices = false</div><div><span style="">	</span>}</div><div><span style="">	</span>return <b><font color="#00994d">&amp;ProxyServer</font></b>{</div><div><span style="">		</span>Client:              client,</div><div><span style="">		</span>EventClient:           eventClient,</div><div><span style="">		</span>Proxier:             proxier,</div><div><span style="">		</span>Broadcaster:           eventBroadcaster,</div><div><span style="">		</span>Recorder:             recorder,</div><div><span style="">		</span>ProxyMode:            proxyMode,</div><div><span style="">		</span>NodeRef:             nodeRef,</div><div><span style="">		</span>MetricsBindAddress:        config.MetricsBindAddress,</div><div><span style="">		</span>BindAddressHardFail:        config.BindAddressHardFail,</div><div><span style="">		</span>EnableProfiling:         config.EnableProfiling,</div><div><span style="">		</span>OOMScoreAdj:           config.OOMScoreAdj,</div><div><span style="">		</span>ConfigSyncPeriod:         config.ConfigSyncPeriod.Duration,</div><div><span style="">		</span>HealthzServer:          healthzServer,</div><div><span style="">		</span>UseEndpointSlices:        useEndpointSlices,</div><div><span style="">	</span>}, nil</div><div>}</div></pre></div></div></div></foreignObject><text x="2" y="1634" fill="#000000" font-family="Helvetica" font-size="12px">func newProxyServer(config *proxyconfigapi.KubeProxyConfiguration, cleanupAndExit bool, master string) (*ProxyServer, error) {...</text></switch></g><path d="M 995 1493 L 995 1470 L 1905 1470 L 1905 1493" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 995 1493 L 995 2180 L 1905 2180 L 1905 1493" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 995 1493 L 1905 1493" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1449.5" y="1486">cmd/kube-proxy/app/server.go</text></g><rect x="995" y="1490" width="910" height="690" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 908px; height: 1px; padding-top: 1835px; margin-left: 997px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><br /></div><div><font color="#7f00ff">// Run runs the specified ProxyServer.  This should never exit (unless CleanupAndExit is set).</font></div><div><font color="#7f00ff">// TODO: At the moment, Run() cannot return a nil error, otherwise it's caller will never exit. Update callers of Run to handle nil errors.</font></div><div><b>func (s *ProxyServer) Run()</b> error {</div><div><span style="white-space: pre;">	</span>...<br /></div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// Start up a healthz server if requested</font></div><div><span style="">	</span>serveHealthz(s.HealthzServer, errCh)</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// Start up a metrics server if requested</font></div><div><span style="">	</span>serveMetrics(s.MetricsBindAddress, s.ProxyMode, s.EnableProfiling, errCh)</div><div><span style="white-space: pre;">	</span>...<br /></div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// Make informers that filter out objects that want a non-default service proxy.</font></div><div><span style="">	</span><font color="#00994d"><b>informerFactory := informers.NewSharedInformerFactoryWithOptions</b></font>(s.Client, s.ConfigSyncPeriod,</div><div><span style="">		</span>informers.WithTweakListOptions(func(options *metav1.ListOptions) {</div><div><span style="">			</span>options.LabelSelector = labelSelector.String()</div><div><span style="">		</span>}))</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// Create configs (i.e. Watches for Services and Endpoints or EndpointSlices)</font></div><div><font color="#7f00ff"><span style="">	</span>// Note: RegisterHandler() calls need to happen before creation of Sources because sources</font></div><div><font color="#7f00ff"><span style="">	</span>// only notify on changes, and the initial update (on process start) may be lost if no handlers</font></div><div><font color="#7f00ff"><span style="">	</span>// are registered yet.</font></div><div><span style="">	</span>serviceConfig := config.NewServiceConfig(informerFactory.Core().V1().Services(), s.ConfigSyncPeriod)</div><div><span style="">	</span>serviceConfig.RegisterEventHandler(s.Proxier)</div><div><span style="">	</span>go serviceConfig.Run(wait.NeverStop)</div><div><br /></div><div><span style="">	</span>if endpointsHandler, ok := s.Proxier.(config.EndpointsHandler); ok &amp;&amp; !s.UseEndpointSlices {</div><div><span style="">		</span>endpointsConfig := config.NewEndpointsConfig(informerFactory.Core().V1().Endpoints(), s.ConfigSyncPeriod)</div><div><span style="">		</span>endpointsConfig.RegisterEventHandler(endpointsHandler)</div><div><span style="">		</span>go endpointsConfig.Run(wait.NeverStop)</div><div><span style="">	</span>} else {</div><div><span style="">		</span>endpointSliceConfig := config.NewEndpointSliceConfig(informerFactory.Discovery().V1().EndpointSlices(), s.ConfigSyncPeriod)</div><div><span style="">		</span>endpointSliceConfig.RegisterEventHandler(s.Proxier)</div><div><span style="">		</span>go endpointSliceConfig.Run(wait.NeverStop)</div><div><span style="">	</span>}</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// This has to start after the calls to NewServiceConfig and NewEndpointsConfig because those</font></div><div><font color="#7f00ff"><span style="">	</span>// functions must configure their shared informer event handlers first.</font></div><div><span style="">	</span><b><font color="#00994d">informerFactory.Start(wait.NeverStop)</font></b></div><div><span style="white-space: pre;">	</span>...<br /></div><div><br /></div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// start corresponding proxier (pkg/proxy/...)<br /></font></div><div><span style="">	</span><font color="#00994d"><b>go s.Proxier.SyncLoop()</b></font></div><div><br /></div><div><span style="">	</span>return &lt;-errCh</div><div>}</div></pre></div></div></div></foreignObject><text x="997" y="1839" fill="#000000" font-family="Helvetica" font-size="12px">// Run runs the specified ProxyServer.  This should never exit (unless CleanupAndExit is set)....</text></switch></g><path d="M 1210 2233 L 1210 2210 L 1690 2210 L 1690 2233" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1210 2233 L 1210 2410 L 1690 2410 L 1690 2233" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1210 2233 L 1690 2233" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1449.5" y="2226">pkg/proxy/{iptables, ipvs, userspace, winkernel, winuserspace}/proxier.go</text></g><rect x="1210" y="2230" width="480" height="180" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 478px; height: 1px; padding-top: 2320px; margin-left: 1212px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><div><font color="#7f00ff">// SyncLoop runs periodic work.</font></div><div><font color="#7f00ff">// This is expected to run as a goroutine or as the main loop of the app..</font></div><div><b>func (proxier *Proxier) SyncLoop()</b> {</div><div><span style="">	</span><font color="#7f00ff">// Update healthz timestamp at beginning in case Sync() never succeeds.</font></div><div><span style="">	</span>if proxier.healthzServer != nil {</div><div><span style="">		</span>proxier.healthzServer.Updated()</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>// synthesize "last change queued" time as the informers are syncing.</div><div><span style="">	</span>metrics.SyncProxyRulesLastQueuedTimestamp.SetToCurrentTime()</div><div><span style="">	</span><b><font color="#00994d">proxier.syncRunner.Loop(wait.NeverStop)</font></b></div><div>}</div></pre></div></div></div></foreignObject><text x="1212" y="2324" fill="#000000" font-family="Helvetica" font-size="12px">// SyncLoop runs periodic work....</text></switch></g><path d="M 1450 110 L 1450 133.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1450 138.88 L 1446.5 131.88 L 1450 133.63 L 1453.5 131.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1450 760 L 1450 783.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1450 788.88 L 1446.5 781.88 L 1450 783.63 L 1453.5 781.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1450 1100 L 1450 1123.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1450 1128.88 L 1446.5 1121.88 L 1450 1123.63 L 1453.5 1121.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1450 1440 L 1450 1463.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1450 1468.88 L 1446.5 1461.88 L 1450 1463.63 L 1453.5 1461.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1450 2180 L 1450 2203.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1450 2208.88 L 1446.5 2201.88 L 1450 2203.63 L 1453.5 2201.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1195 955 L 950 955 L 950 1630 L 916.37 1630" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 911.12 1630 L 918.12 1626.5 L 916.37 1630 L 918.12 1633.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>