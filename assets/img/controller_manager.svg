<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than diagrams.net -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="2261px" height="2540px" viewBox="-0.5 -0.5 2261 2540" content="&lt;mxfile host=&quot;Electron&quot; modified=&quot;2022-09-06T08:26:41.367Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/19.0.3 Chrome/102.0.5005.63 Electron/19.0.3 Safari/537.36&quot; etag=&quot;lF_cFY66rPWeoMcm_D8F&quot; version=&quot;19.0.3&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;1jI2NbenIIqPtYyUv3ZK&quot; name=&quot;第 1 页&quot;&gt;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&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs/><g><path d="M 1160 23 L 1160 0 L 1530 0 L 1530 23" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 1160 23 L 1160 102 L 1530 102 L 1530 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1160 23 L 1530 23" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1344.5" y="16">main (cmd/kube-controller-manager/controller-manager.go)</text></g><rect x="1160" y="22" width="370" height="80" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 368px; height: 1px; padding-top: 62px; margin-left: 1162px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><b>func main()</b> {<div><span style="">	</span><b><font color="#00994d">command := app.NewControllerManagerCommand()</font></b></div><div><span style="">	</span><b><font color="#00994d">code := cli.Run(command)</font></b></div><div><span style="">	</span>os.Exit(code)</div><div>}</div></pre></div></div></div></foreignObject><text x="1162" y="66" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">func main() {...</text></switch></g><path d="M 1680 355 L 1733.63 355" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1738.88 355 L 1731.88 358.5 L 1733.63 355 L 1731.88 351.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1010 163 L 1010 140 L 1680 140 L 1680 163" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1010 163 L 1010 570 L 1680 570 L 1680 163" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1010 163 L 1680 163" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1344.5" y="156">NewControllerManagerCommand (cmd/kube-controller-manager/app/controllermanager.go)</text></g><rect x="1010" y="160" width="670" height="410" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 668px; height: 1px; padding-top: 365px; margin-left: 1012px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// NewControllerManagerCommand creates a *cobra.Command object with default parameters</font><div><b>func NewControllerManagerCommand() *cobra.Command</b> {</div><div><span style="">	</span>s, err := options.NewKubeControllerManagerOptions()</div><div><span style="">	</span>if err != nil {</div><div><span style="">		</span>klog.Fatalf("unable to initialize command options: %v", err)</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>cmd := &amp;cobra.Command{</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>...<br /></div><div><span style="">		</span>Run: func(cmd *cobra.Command, args []string) {</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>...<br /></div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// init default config</font><br /></div><div><span style="">			</span><b><font color="#00994d">c, err := s.Config(KnownControllers(), ControllersDisabledByDefault.List())</font></b></div><div><span style="">			</span>if err != nil {</div><div><span style="">				</span>fmt.Fprintf(os.Stderr, "%v\n", err)</div><div><span style="">				</span>os.Exit(1)</div><div><span style="">			</span>}</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// run</font><br /></div><div><span style="">			</span>if err := <font color="#00994d"><b>Run(c.Complete(), wait.NeverStop)</b></font>; err != nil {</div><div><span style="">				</span>fmt.Fprintf(os.Stderr, "%v\n", err)</div><div><span style="">				</span>os.Exit(1)</div><div><span style="">			</span>}</div><div><span style="">		</span>},</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span>}</div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span>return cmd</div><div>}</div></pre></div></div></div></foreignObject><text x="1012" y="369" fill="#000000" font-family="Helvetica" font-size="12px">// NewControllerManagerCommand creates a *cobra.Command object with default parameters...</text></switch></g><path d="M 1740 318 L 1740 295 L 2260 295 L 2260 318" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1740 318 L 1740 395 L 2260 395 L 2260 318" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1740 318 L 2260 318" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1999.5" y="311">ControllersDisableByDefault (cmd/kube-controller-manager/app/controllermanager.go)</text></g><rect x="1740" y="315" width="520" height="80" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 518px; height: 1px; padding-top: 355px; margin-left: 1742px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// ControllersDisabledByDefault is the set of controllers which is disabled by default</font><div><b>var ControllersDisabledByDefault</b> = sets.NewString(</div><div><span style="">	</span><b><font color="#00994d">"bootstrapsigner"</font></b>,</div><div><span style="">	</span><b><font color="#00994d">"tokencleaner"</font></b>,</div><div>)</div></pre></div></div></div></foreignObject><text x="1742" y="359" fill="#000000" font-family="Helvetica" font-size="12px">// ControllersDisabledByDefault is the set of controllers which is disabled by default...</text></switch></g><path d="M 25 238 L 25 215 L 745 215 L 745 238" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 25 238 L 25 515 L 745 515 L 745 238" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 25 238 L 745 238" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="384.5" y="231">KnownControllers (cmd/kube-controller-manager/app/controllermanager.go)</text></g><rect x="25" y="235" width="720" height="280" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 718px; height: 1px; padding-top: 375px; margin-left: 27px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre>const (<br />	<b><font color="#00994d">saTokenControllerName = "serviceaccount-token"</font></b><br />)<br /></pre><pre><font color="#7f00ff">// KnownControllers returns all known controllers's name</font><div><b>func KnownControllers() []string</b> {</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// get all build-in controllers</font><br /></div><div><span style="">	</span>ret := sets.StringKeySet(<b><font color="#00994d">NewControllerInitializers(IncludeCloudLoops)</font></b>)</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// add "special" controllers that aren't initialized normally.  These controllers cannot be initialized</font></div><div><font color="#7f00ff"><span style="">	</span>// using a normal function.  The only known special case is the SA token controller which *must* be started</font></div><div><font color="#7f00ff"><span style="">	</span>// first to ensure that the SA tokens for future controllers will exist.  Think very carefully before adding</font></div><div><font color="#7f00ff"><span style="">	</span>// to this list.</font></div><div><span style="">	</span>ret.Insert(</div><div><span style="">		</span><b><font color="#00994d">saTokenControllerName</font></b>,</div><div><span style="">	</span>)</div><div><br /></div><div><span style="">	</span>return ret.List()</div><div>}</div></pre></div></div></div></foreignObject><text x="27" y="379" fill="#000000" font-family="Helvetica" font-size="12px">const (...</text></switch></g><path d="M 0 593 L 0 570 L 770 570 L 770 593" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 593 L 0 1340 L 770 1340 L 770 593" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 593 L 770 593" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="384.5" y="586">NewControllerInitializers (cmd/kube-controller-manager/app/controllermanager.go)</text></g><rect x="0" y="590" width="770" height="750" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 768px; height: 1px; padding-top: 965px; margin-left: 2px;"><div data-drawio-colors="color: #7F00FF; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(127, 0, 255); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre>// NewControllerInitializers is a public map of named controller groups (you can start more than one in an init func)<div>// paired to their InitFunc.  This allows for structured downstream composition and subdivision.</div><div><font color="#000000"><b>func NewControllerInitializers(loopMode ControllerLoopMode) map[string]InitFunc </b>{</font></div><div><span style="color: rgb(0, 0, 0); white-space: pre;">	</span>// controller name =&gt; controller start function<font color="#000000"><br /></font></div><div><font color="#000000"><span style="">	</span>controllers := map[string]InitFunc{}</font></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["endpoint"] = </font><b style=""><font color="#00994d">startEndpointController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["endpointslice"] = </font><b style=""><font color="#00994d">startEndpointSliceController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["endpointslicemirroring"] = </font><b style=""><font color="#00994d">startEndpointSliceMirroringController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["replicationcontroller"] = </font><b style=""><font color="#00994d">startReplicationController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["podgc"] = </font><b style=""><font color="#00994d">startPodGCController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["resourcequota"] = </font><b style=""><font color="#00994d">startResourceQuotaController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["namespace"] = </font><b style=""><font color="#00994d">startNamespaceController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["serviceaccount"] = </font><b style=""><font color="#00994d">startServiceAccountController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["garbagecollector"] = </font><b style=""><font color="#00994d">startGarbageCollectorController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["daemonset"] = </font><b style=""><font color="#00994d">startDaemonSetController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["job"] = </font><b style=""><font color="#00994d">startJobController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["deployment"] = </font><b style=""><font color="#00994d">startDeploymentController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["replicaset"] = </font><b style=""><font color="#00994d">startReplicaSetController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["horizontalpodautoscaling"] = </font><b style=""><font color="#00994d">startHPAController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["disruption"] = </font><b style=""><font color="#00994d">startDisruptionController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["statefulset"] = </font><b style=""><font color="#00994d">startStatefulSetController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["cronjob"] = </font><b style=""><font color="#00994d">startCronJobController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["csrsigning"] = </font><b style=""><font color="#00994d">startCSRSigningController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["csrapproving"] = </font><b style=""><font color="#00994d">startCSRApprovingController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["csrcleaner"] = </font><b style=""><font color="#00994d">startCSRCleanerController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["ttl"] = </font><b style=""><font color="#00994d">startTTLController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["bootstrapsigner"] = </font><b style=""><font color="#00994d">startBootstrapSignerController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["tokencleaner"] = </font><b style=""><font color="#00994d">startTokenCleanerController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["nodeipam"] = </font><b style=""><font color="#00994d">startNodeIpamController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["nodelifecycle"] = </font><b style=""><font color="#00994d">startNodeLifecycleController</font></b></div><div><font color="#000000"><span style="">	</span>if loopMode == IncludeCloudLoops {</font></div><div><span style="color: rgb(0, 0, 0);">		</span><font color="#000000">controllers["service"] = </font><b style=""><font color="#00994d">startServiceController</font></b></div><div><span style="color: rgb(0, 0, 0);">		</span><font color="#000000">controllers["route"] = </font><b style=""><font color="#00994d">startRouteController</font></b></div><div><span style="color: rgb(0, 0, 0);">		</span><font color="#000000">controllers["cloud-node-lifecycle"] = </font><b style=""><font color="#00994d">startCloudNodeLifecycleController</font></b></div><div><span style="color: rgb(0, 0, 0);">		</span>// TODO: volume controller into the IncludeCloudLoops only set.</div><div><font color="#000000"><span style="">	</span>}</font></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["persistentvolume-binder"] = </font><b style=""><font color="#00994d">startPersistentVolumeBinderController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["attachdetach"] = </font><b style=""><font color="#00994d">startAttachDetachController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["persistentvolume-expander"] = </font><b style=""><font color="#00994d">startVolumeExpandController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["clusterrole-aggregation"] = </font><b style=""><font color="#00994d">startClusterRoleAggregrationController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["pvc-protection"] = </font><b style=""><font color="#00994d">startPVCProtectionController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["pv-protection"] = </font><b style=""><font color="#00994d">startPVProtectionController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["ttl-after-finished"] = </font><b style=""><font color="#00994d">startTTLAfterFinishedController</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["root-ca-cert-publisher"] = </font><b style=""><font color="#00994d">startRootCACertPublisher</font></b></div><div><span style="color: rgb(0, 0, 0);">	</span><font color="#000000">controllers["ephemeral-volume"] = </font><b style=""><font color="#00994d">startEphemeralVolumeController</font></b></div><div><font color="#000000"><span style="">	</span>if utilfeature.DefaultFeatureGate.Enabled(genericfeatures.APIServerIdentity) &amp;&amp;</font></div><div><font color="#000000"><span style="">		</span>utilfeature.DefaultFeatureGate.Enabled(genericfeatures.StorageVersionAPI) {</font></div><div><span style="color: rgb(0, 0, 0);">		</span><font color="#000000">controllers["storage-version-gc"] = </font><b style=""><font color="#00994d">startStorageVersionGCController</font></b></div><div><font color="#000000"><span style="">	</span>}</font></div><div><font color="#000000"><br /></font></div><div><font color="#000000"><span style="">	</span>return controllers</font></div><div><font color="#000000">}</font></div></pre></div></div></div></foreignObject><text x="2" y="969" fill="#7F00FF" font-family="Helvetica" font-size="12px">// NewControllerInitializers is a public map of named controller groups (you can start more than one in an init func)...</text></switch></g><path d="M 805 633 L 805 610 L 1885 610 L 1885 633" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 805 633 L 805 1530 L 1885 1530 L 1885 633" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 805 633 L 1885 633" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1344.5" y="626">Run (cmd/kube-controller-manager/app/controllermanager.go)</text></g><rect x="805" y="630" width="1080" height="900" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1078px; height: 1px; padding-top: 1080px; margin-left: 807px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// Run runs the KubeControllerManagerOptions.  This should never exit.</font><div><b>func Run(c *config.CompletedConfig, stopCh &lt;-chan struct{}) error</b> {</div><div><span style="">	</span>...<br /></div><div><span style="">	</span><font color="#7f00ff">// Setup any healthz checks we will want to use.</font></div><div><span style="">	</span>var checks []healthz.HealthChecker</div><div><span style="">	</span>var electionChecker *leaderelection.HealthzAdaptor</div><div><span style="">	</span>if c.ComponentConfig.Generic.LeaderElection.LeaderElect {</div><div><span style="">		</span>electionChecker = leaderelection.NewLeaderHealthzAdaptor(time.Second * 20)</div><div><span style="">		</span>checks = append(checks, electionChecker)</div><div><span style="">	</span>}</div><div><span style="">	</span>healthzHandler := controllerhealthz.NewMutableHealthzHandler(checks...)</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// Start the controller manager HTTP server</font></div><div><span style="">	</span><font color="#7f00ff">// unsecuredMux is the handler for these controller *after* authn/authz filters have been applied</font></div><div><span style="">	</span>var unsecuredMux *mux.PathRecorderMux</div><div><span style="">	</span>if c.SecureServing != nil {</div><div><span style="">	</span><span style="">	</span><font color="#7f00ff">// create /healthz, /metrics handler</font><br /></div><div><span style="">		</span><b><font color="#00994d">unsecuredMux = genericcontrollermanager.NewBaseHandler(&amp;c.ComponentConfig.Generic.Debugging, healthzHandler)</font></b></div><div><span style="">		</span>handler := genericcontrollermanager.BuildHandlerChain(unsecuredMux, &amp;c.Authorization, &amp;c.Authentication)</div><div><span style="">		</span>// TODO: handle stoppedCh and listenerStoppedCh returned by c.SecureServing.Serve</div><div><span style="">		</span>if _, _, err := c.SecureServing.Serve(handler, 0, stopCh); err != nil {</div><div><span style="">			</span>return err</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// create apiserver client builder<br /></font></div><div><font color="#7f00ff"><span style="">	</span>// rootClientBuilder use controller-manager's kubeconfig to communicate with apiserver via ClusterRole system:kube-controller-manager<br /></font></div><div><font color="#7f00ff"><span style="">	</span>// clientBuilder is not equal to rootClientBuilder when use '--use-service-account-credentials', in this case</font></div><div><font color="#7f00ff"><span style="">	</span>// controller-manager will generate service account token for each controller with built-in ClusterRole system:controller:xxx</font><span style="background-color: initial; font-family: Helvetica;"></span></div><div><span style="">	</span><b><font color="#00994d">clientBuilder, rootClientBuilder := createClientBuilders(c)</font></b></div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// saTokenController must be started first, in order to generate saToken for other controllers</font><br /></div><div><span style="">	</span><b><font color="#00994d">saTokenControllerInitFunc := serviceAccountTokenControllerStarter{rootClientBuilder: rootClientBuilder}.startServiceAccountTokenController</font></b></div><div><br /></div><div><span style="">	</span><b><font color="#00994d">run := func(ctx context.Context, startSATokenController InitFunc, initializersFunc ControllerInitializersFunc)</font></b> {</div><div><br /></div><div><span style="">		</span>controllerContext, err := CreateControllerContext(c, rootClientBuilder, clientBuilder, ctx.Done())</div><div><span style="">		</span>if err != nil {</div><div><span style="">			</span>klog.Fatalf("error building controller context: %v", err)</div><div><span style="">		</span>}</div><div><span style="">		</span>controllerInitializers := initializersFunc(controllerContext.LoopMode)</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// start all enabled controllers, walk through controllers map and run startXXX functions</font><br /></div><div><span style="">		</span>if err := <b><font color="#00994d">StartControllers(ctx, controllerContext, startSATokenController, controllerInitializers, unsecuredMux, healthzHandler)</font></b>; err != nil {</div><div><span style="">			</span>klog.Fatalf("error starting controllers: %v", err)</div><div><span style="">		</span>}</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// start informer factory, list-watch apiserver resources and inform to corresponding controller who register the handlers for the resource</font><br /></div><div><span style="">		</span><b><font color="#00994d">controllerContext.InformerFactory.Start(stopCh)</font></b></div><div><span style="">		</span>controllerContext.ObjectOrMetadataInformerFactory.Start(stopCh)</div><div><span style="">		</span>close(controllerContext.InformersStarted)</div><div><br /></div><div><span style="">		</span>select {}</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span><font color="#7f00ff">// No leader election, run directly</font></div><div><span style="">	</span>if !c.ComponentConfig.Generic.LeaderElection.LeaderElect {</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span>// run<br /></div><div><span style="">		</span><b><font color="#00994d">run(context.TODO(), saTokenControllerInitFunc, NewControllerInitializers)</font></b></div><div><span style="">		</span>panic("unreachable")</div><div><span style="">	</span>}</div><div><br /></div><div><span style="white-space: pre;">	</span>...<br /></div><div><span style="">	</span>select {}</div><div>}</div></pre></div></div></div></foreignObject><text x="807" y="1084" fill="#000000" font-family="Helvetica" font-size="12px">// Run runs the KubeControllerManagerOptions.  This should never exit....</text></switch></g><path d="M 905 1593 L 905 1570 L 1785 1570 L 1785 1593" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 905 1593 L 905 2530 L 1785 2530 L 1785 1593" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 905 1593 L 1785 1593" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1344.5" y="1586">StartControllers (cmd/kube-controller-manager/app/controllermanager.go)</text></g><rect x="905" y="1590" width="880" height="940" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 878px; height: 1px; padding-top: 2060px; margin-left: 907px;"><div data-drawio-colors="color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><pre><font color="#7f00ff">// StartControllers starts a set of controllers with a specified ControllerContext</font><div><b>func StartControllers</b>(ctx context.Context, controllerCtx ControllerContext, startSATokenController InitFunc, controllers map[string]InitFunc,</div><div><span style="">	</span>unsecuredMux *mux.PathRecorderMux, healthzHandler *controllerhealthz.MutableHealthzHandler) error {</div><div><font color="#7f00ff"><span style="">	</span>// Always start the SA token controller first using a full-power client, since it needs to mint tokens for the rest</font></div><div><font color="#7f00ff"><span style="">	</span>// If this fails, just return here and fail since other controllers won't be able to get credentials.</font></div><div><span style="">	</span>if startSATokenController != nil {</div><div><span style="">		</span>if _, _, err := <b><font color="#00994d">startSATokenController(ctx, controllerCtx)</font></b>; err != nil {</div><div><span style="">			</span>return err</div><div><span style="">		</span>}</div><div><span style="">	</span>}</div><div><br /></div><div><font color="#7f00ff"><span style="">	</span>// Initialize the cloud provider with a reference to the clientBuilder only after token controller</font></div><div><font color="#7f00ff"><span style="">	</span>// has started in case the cloud provider uses the client builder.</font></div><div><span style="">	</span>if controllerCtx.Cloud != nil {</div><div><span style="">		</span>controllerCtx.Cloud.Initialize(controllerCtx.ClientBuilder, ctx.Done())</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>var controllerChecks []healthz.HealthChecker</div><div><span style="white-space: pre;">	</span><font color="#7f00ff">// walk through</font><br /></div><div><span style="">	</span><b><font color="#00994d">for controllerName, initFn := range controllers</font></b> {</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// check if the controller is enabled</font><br /></div><div><span style="">		</span>if <b><font color="#00994d">!controllerCtx.IsControllerEnabled(controllerName)</font></b> {</div><div><span style="">			</span>klog.Warningf("%q is disabled", controllerName)</div><div><span style="">			</span>continue</div><div><span style="">		</span>}</div><div><br /></div><div><span style="">		</span>time.Sleep(wait.Jitter(controllerCtx.ComponentConfig.Generic.ControllerStartInterval.Duration, ControllerStartJitter))</div><div><br /></div><div><span style="">		</span>klog.V(1).Infof("Starting %q", controllerName)</div><div><span style="white-space: pre;">	</span><span style="white-space: pre;">	</span><font color="#7f00ff">// start</font><br /></div><div><span style="">		</span><b><font color="#00994d">ctrl, started, err := initFn(ctx, controllerCtx)</font></b></div><div><span style="">		</span>if err != nil {</div><div><span style="">			</span>klog.Errorf("Error starting %q", controllerName)</div><div><span style="">			</span>return err</div><div><span style="">		</span>}</div><div><span style="">		</span>if !started {</div><div><span style="">			</span>klog.Warningf("Skipping %q", controllerName)</div><div><span style="">			</span>continue</div><div><span style="">		</span>}</div><div><span style="">		</span>check := controllerhealthz.NamedPingChecker(controllerName)</div><div><span style="">		</span>if ctrl != nil {</div><div><font color="#7f00ff"><span style="">			</span>// check if the controller supports and requests a debugHandler</font></div><div><font color="#7f00ff"><span style="">			</span>// and it needs the unsecuredMux to mount the handler onto.</font></div><div><span style="">			</span>if debuggable, ok := ctrl.(controller.Debuggable); ok &amp;&amp; unsecuredMux != nil {</div><div><span style="">				</span>if debugHandler := debuggable.DebuggingHandler(); debugHandler != nil {</div><div><span style="">					</span>basePath := "/debug/controllers/" + controllerName</div><div><span style="">					</span>unsecuredMux.UnlistedHandle(basePath, http.StripPrefix(basePath, debugHandler))</div><div><span style="">					</span>unsecuredMux.UnlistedHandlePrefix(basePath+"/", http.StripPrefix(basePath, debugHandler))</div><div><span style="">				</span>}</div><div><span style="">			</span>}</div><div><span style="">			</span>if healthCheckable, ok := ctrl.(controller.HealthCheckable); ok {</div><div><span style="">				</span>if realCheck := healthCheckable.HealthChecker(); realCheck != nil {</div><div><span style="">					</span>check = controllerhealthz.NamedHealthChecker(controllerName, realCheck)</div><div><span style="">				</span>}</div><div><span style="">			</span>}</div><div><span style="">		</span>}</div><div><span style="">		</span>controllerChecks = append(controllerChecks, check)</div><div><br /></div><div><span style="">		</span>klog.Infof("Started %q", controllerName)</div><div><span style="">	</span>}</div><div><br /></div><div><span style="">	</span>healthzHandler.AddHealthChecker(controllerChecks...)</div><div><br /></div><div><span style="">	</span>return nil</div><div>}</div></pre></div></div></div></foreignObject><text x="907" y="2064" fill="#000000" font-family="Helvetica" font-size="12px">// StartControllers starts a set of controllers with a specified ControllerContext...</text></switch></g><path d="M 1345 102 L 1339 102 L 1338.98 133.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1338.97 138.88 L 1335.48 131.88 L 1338.98 133.63 L 1342.48 131.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1010 365 L 751.37 365" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 746.12 365 L 753.12 361.5 L 751.37 365 L 753.12 368.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 385 515 L 385 563.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 385 568.88 L 381.5 561.88 L 385 563.63 L 388.5 561.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1345 570 L 1345 603.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1345 608.88 L 1341.5 601.88 L 1345 603.63 L 1348.5 601.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1345 1530 L 1345 1563.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1345 1568.88 L 1341.5 1561.88 L 1345 1563.63 L 1348.5 1561.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>